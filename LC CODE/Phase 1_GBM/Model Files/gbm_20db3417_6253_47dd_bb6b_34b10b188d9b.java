/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2019-01-17T16:34:38.246-08:00
  3.10.5.2
  
  Standalone prediction code with sample test data for GBMModel named gbm_20db3417_6253_47dd_bb6b_34b10b188d9b

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/gbm-20db3417-6253-47dd-bb6b-34b10b188d9b > gbm_20db3417_6253_47dd_bb6b_34b10b188d9b.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_20db3417_6253_47dd_bb6b_34b10b188d9b.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_20db3417_6253_47dd_bb6b_34b10b188d9b", algorithm="gbm")
public class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 127; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_20db3417_6253_47dd_bb6b_34b10b188d9b.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* age */ null,
    /* sex */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_1.VALUES,
    /* ethnic_group */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_2.VALUES,
    /* packYears */ null,
    /* binned_race */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_4.VALUES,
    /* hcc_1 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_5.VALUES,
    /* hcc_2 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_6.VALUES,
    /* hcc_6 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_7.VALUES,
    /* hcc_8 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_8.VALUES,
    /* hcc_9 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_9.VALUES,
    /* hcc_10 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_10.VALUES,
    /* hcc_11 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_11.VALUES,
    /* hcc_12 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_12.VALUES,
    /* hcc_17 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_13.VALUES,
    /* hcc_18 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_14.VALUES,
    /* hcc_19 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_15.VALUES,
    /* hcc_21 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_16.VALUES,
    /* hcc_22 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_17.VALUES,
    /* hcc_23 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_18.VALUES,
    /* hcc_27 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_19.VALUES,
    /* hcc_28 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_20.VALUES,
    /* hcc_29 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_21.VALUES,
    /* hcc_33 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_22.VALUES,
    /* hcc_34 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_23.VALUES,
    /* hcc_35 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_24.VALUES,
    /* hcc_39 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_25.VALUES,
    /* hcc_40 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_26.VALUES,
    /* hcc_46 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_27.VALUES,
    /* hcc_47 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_28.VALUES,
    /* hcc_48 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_29.VALUES,
    /* hcc_54 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_30.VALUES,
    /* hcc_55 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_31.VALUES,
    /* hcc_57 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_32.VALUES,
    /* hcc_58 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_33.VALUES,
    /* hcc_70 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_34.VALUES,
    /* hcc_71 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_35.VALUES,
    /* hcc_72 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_36.VALUES,
    /* hcc_73 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_37.VALUES,
    /* hcc_74 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_38.VALUES,
    /* hcc_75 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_39.VALUES,
    /* hcc_76 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_40.VALUES,
    /* hcc_77 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_41.VALUES,
    /* hcc_78 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_42.VALUES,
    /* hcc_79 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_43.VALUES,
    /* hcc_80 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_44.VALUES,
    /* hcc_82 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_45.VALUES,
    /* hcc_83 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_46.VALUES,
    /* hcc_84 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_47.VALUES,
    /* hcc_85 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_48.VALUES,
    /* hcc_86 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_49.VALUES,
    /* hcc_87 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_50.VALUES,
    /* hcc_88 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_51.VALUES,
    /* hcc_96 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_52.VALUES,
    /* hcc_99 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_53.VALUES,
    /* hcc_100 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_54.VALUES,
    /* hcc_103 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_55.VALUES,
    /* hcc_104 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_56.VALUES,
    /* hcc_106 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_57.VALUES,
    /* hcc_107 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_58.VALUES,
    /* hcc_108 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_59.VALUES,
    /* hcc_110 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_60.VALUES,
    /* hcc_111 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_61.VALUES,
    /* hcc_112 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_62.VALUES,
    /* hcc_114 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_63.VALUES,
    /* hcc_115 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_64.VALUES,
    /* hcc_122 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_65.VALUES,
    /* hcc_124 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_66.VALUES,
    /* hcc_134 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_67.VALUES,
    /* hcc_135 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_68.VALUES,
    /* hcc_136 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_69.VALUES,
    /* hcc_137 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_70.VALUES,
    /* hcc_157 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_71.VALUES,
    /* hcc_158 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_72.VALUES,
    /* hcc_161 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_73.VALUES,
    /* hcc_162 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_74.VALUES,
    /* hcc_167 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_75.VALUES,
    /* hcc_169 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_76.VALUES,
    /* hcc_170 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_77.VALUES,
    /* hcc_173 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_78.VALUES,
    /* hcc_176 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_79.VALUES,
    /* hcc_186 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_80.VALUES,
    /* hcc_188 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_81.VALUES,
    /* hcc_189 */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_82.VALUES,
    /* ACTINIC KERATOSIS */ null,
    /* ASTIGMATISM. */ null,
    /* CAD OF NATIVE ARTERY */ null,
    /* CATARACT. */ null,
    /* CKD STAGE 3 (GFR 30-59) */ null,
    /* COUGH */ null,
    /* DIABETIC FOOT EXAM */ null,
    /* ESSENTIAL HTN */ null,
    /* GERD (GASTROESOPHAGEAL REFLUX DISEASE) */ null,
    /* HTN (HYPERTENSION) */ null,
    /* HX OF MI */ null,
    /* HYPERLIPIDEMIA */ null,
    /* HYPOTHYROIDISM */ null,
    /* OSTEOARTHRITIS */ null,
    /* OSTEOPOROSIS */ null,
    /* PREDIABETES */ null,
    /* PRESBYOPIA */ null,
    /* ROUTINE ADULT HEALTH CHECK UP EXAM */ null,
    /* SEBORRHEIC KERATOSIS */ null,
    /* TOBACCO SMOKER */ null,
    /* ANALGESICS */ null,
    /* ANESTHETICS */ null,
    /* ANTIARTHRITICS */ null,
    /* ANTIASTHMATICS */ null,
    /* ANTIBIOTICS */ null,
    /* ANTICOAGULANTS */ null,
    /* ANTIHYPERGLYCEMICS */ null,
    /* CARDIAC DRUGS */ null,
    /* CARDIOVASCULAR */ null,
    /* COUGH/COLD PREPARATIONS */ null,
    /* DIURETICS */ null,
    /* EENT PREPS */ null,
    /* ELECT/CALORIC/H2O */ null,
    /* GASTROINTESTINAL */ null,
    /* HORMONES */ null,
    /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */ null,
    /* PSYCHOTHERAPEUTIC DRUGS */ null,
    /* SEDATIVE/HYPNOTICS */ null,
    /* SKIN PREPS */ null,
    /* UNCLASSIFIED DRUG PRODUCTS */ null,
    /* bmi_mean */ null,
    /* bmi_max */ null,
    /* bmi_min */ null,
    /* bmi_var */ null,
    /* LC */ gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_127.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.4872061757307659,0.5127938242692341};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.4872061757307659,0.5127938242692341};

  public gbm_20db3417_6253_47dd_bb6b_34b10b188d9b() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(3891984204660513824L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_0.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_1.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_2.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_3.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_4.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_5.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_6.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_7.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_8.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_9.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_10.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_11.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_12.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_13.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_14.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_15.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_16.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_17.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_18.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_19.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_20.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_21.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_22.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_23.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_24.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_25.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_26.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_27.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_28.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_29.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_30.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_31.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_32.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_33.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_34.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_35.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_36.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_37.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_38.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_39.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_40.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_41.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_42.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_43.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_44.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_45.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_46.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_47.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_48.score0(data,preds);
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_49.score0(data,preds);
    preds[2] = preds[1] + 0.05118647009560515;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.4137486889655385);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_20db3417_6253_47dd_bb6b_34b10b188d9b implements java.io.Serializable {
  public static final String[] VALUES = new String[127];
  static {
    NamesHolder_gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "age";
      sa[1] = "sex";
      sa[2] = "ethnic_group";
      sa[3] = "packYears";
      sa[4] = "binned_race";
      sa[5] = "hcc_1";
      sa[6] = "hcc_2";
      sa[7] = "hcc_6";
      sa[8] = "hcc_8";
      sa[9] = "hcc_9";
      sa[10] = "hcc_10";
      sa[11] = "hcc_11";
      sa[12] = "hcc_12";
      sa[13] = "hcc_17";
      sa[14] = "hcc_18";
      sa[15] = "hcc_19";
      sa[16] = "hcc_21";
      sa[17] = "hcc_22";
      sa[18] = "hcc_23";
      sa[19] = "hcc_27";
      sa[20] = "hcc_28";
      sa[21] = "hcc_29";
      sa[22] = "hcc_33";
      sa[23] = "hcc_34";
      sa[24] = "hcc_35";
      sa[25] = "hcc_39";
      sa[26] = "hcc_40";
      sa[27] = "hcc_46";
      sa[28] = "hcc_47";
      sa[29] = "hcc_48";
      sa[30] = "hcc_54";
      sa[31] = "hcc_55";
      sa[32] = "hcc_57";
      sa[33] = "hcc_58";
      sa[34] = "hcc_70";
      sa[35] = "hcc_71";
      sa[36] = "hcc_72";
      sa[37] = "hcc_73";
      sa[38] = "hcc_74";
      sa[39] = "hcc_75";
      sa[40] = "hcc_76";
      sa[41] = "hcc_77";
      sa[42] = "hcc_78";
      sa[43] = "hcc_79";
      sa[44] = "hcc_80";
      sa[45] = "hcc_82";
      sa[46] = "hcc_83";
      sa[47] = "hcc_84";
      sa[48] = "hcc_85";
      sa[49] = "hcc_86";
      sa[50] = "hcc_87";
      sa[51] = "hcc_88";
      sa[52] = "hcc_96";
      sa[53] = "hcc_99";
      sa[54] = "hcc_100";
      sa[55] = "hcc_103";
      sa[56] = "hcc_104";
      sa[57] = "hcc_106";
      sa[58] = "hcc_107";
      sa[59] = "hcc_108";
      sa[60] = "hcc_110";
      sa[61] = "hcc_111";
      sa[62] = "hcc_112";
      sa[63] = "hcc_114";
      sa[64] = "hcc_115";
      sa[65] = "hcc_122";
      sa[66] = "hcc_124";
      sa[67] = "hcc_134";
      sa[68] = "hcc_135";
      sa[69] = "hcc_136";
      sa[70] = "hcc_137";
      sa[71] = "hcc_157";
      sa[72] = "hcc_158";
      sa[73] = "hcc_161";
      sa[74] = "hcc_162";
      sa[75] = "hcc_167";
      sa[76] = "hcc_169";
      sa[77] = "hcc_170";
      sa[78] = "hcc_173";
      sa[79] = "hcc_176";
      sa[80] = "hcc_186";
      sa[81] = "hcc_188";
      sa[82] = "hcc_189";
      sa[83] = "ACTINIC KERATOSIS";
      sa[84] = "ASTIGMATISM.";
      sa[85] = "CAD OF NATIVE ARTERY";
      sa[86] = "CATARACT.";
      sa[87] = "CKD STAGE 3 (GFR 30-59)";
      sa[88] = "COUGH";
      sa[89] = "DIABETIC FOOT EXAM";
      sa[90] = "ESSENTIAL HTN";
      sa[91] = "GERD (GASTROESOPHAGEAL REFLUX DISEASE)";
      sa[92] = "HTN (HYPERTENSION)";
      sa[93] = "HX OF MI";
      sa[94] = "HYPERLIPIDEMIA";
      sa[95] = "HYPOTHYROIDISM";
      sa[96] = "OSTEOARTHRITIS";
      sa[97] = "OSTEOPOROSIS";
      sa[98] = "PREDIABETES";
      sa[99] = "PRESBYOPIA";
      sa[100] = "ROUTINE ADULT HEALTH CHECK UP EXAM";
      sa[101] = "SEBORRHEIC KERATOSIS";
      sa[102] = "TOBACCO SMOKER";
      sa[103] = "ANALGESICS";
      sa[104] = "ANESTHETICS";
      sa[105] = "ANTIARTHRITICS";
      sa[106] = "ANTIASTHMATICS";
      sa[107] = "ANTIBIOTICS";
      sa[108] = "ANTICOAGULANTS";
      sa[109] = "ANTIHYPERGLYCEMICS";
      sa[110] = "CARDIAC DRUGS";
      sa[111] = "CARDIOVASCULAR";
      sa[112] = "COUGH/COLD PREPARATIONS";
      sa[113] = "DIURETICS";
      sa[114] = "EENT PREPS";
      sa[115] = "ELECT/CALORIC/H2O";
      sa[116] = "GASTROINTESTINAL";
      sa[117] = "HORMONES";
      sa[118] = "MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG";
      sa[119] = "PSYCHOTHERAPEUTIC DRUGS";
      sa[120] = "SEDATIVE/HYPNOTICS";
      sa[121] = "SKIN PREPS";
      sa[122] = "UNCLASSIFIED DRUG PRODUCTS";
      sa[123] = "bmi_mean";
      sa[124] = "bmi_max";
      sa[125] = "bmi_min";
      sa[126] = "bmi_var";
    }
  }
}
// The class representing column sex
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Female";
      sa[1] = "Male";
      sa[2] = "Unknown";
    }
  }
}
// The class representing column ethnic_group
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[166];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Acadian/Cajun";
      sa[1] = "Afghan/Afghanistani";
      sa[2] = "Agikuyu/Kikuyu";
      sa[3] = "Algerian";
      sa[4] = "Amara/Amhara";
      sa[5] = "American/United States";
      sa[6] = "Amerindian/Indigena/Indio";
      sa[7] = "Antiguan/Barbudan";
      sa[8] = "Arab/Arabic";
      sa[9] = "Argentine/Argentinean";
      sa[10] = "Armenian";
      sa[11] = "Asian Indian/Indian (Asia)";
      sa[12] = "Assyrian/Chaldean/Syriac";
      sa[13] = "Australian";
      sa[14] = "Austrian";
      sa[15] = "Bamar/Burman";
      sa[16] = "Bangladeshi";
      sa[17] = "Belarusian/Belorussian";
      sa[18] = "Belgian";
      sa[19] = "Belizean";
      sa[20] = "Blackfeet";
      sa[21] = "Bolivian";
      sa[22] = "Bosniak";
      sa[23] = "Brazilian";
      sa[24] = "British Isles/British Isles origin";
      sa[25] = "Briton/British";
      sa[26] = "Bulgarian";
      sa[27] = "Burmese";
      sa[28] = "Cambodian";
      sa[29] = "Cameroonian/Cameroon";
      sa[30] = "Canadian";
      sa[31] = "Canadian American Indian";
      sa[32] = "Central American Indian";
      sa[33] = "Cherokee";
      sa[34] = "Chickasaw";
      sa[35] = "Chilean";
      sa[36] = "Chinese";
      sa[37] = "Choctaw";
      sa[38] = "Colombian";
      sa[39] = "Congolese/Congo";
      sa[40] = "Costa Rican";
      sa[41] = "Creek";
      sa[42] = "Creole";
      sa[43] = "Croat/Croatian";
      sa[44] = "Cuban";
      sa[45] = "Czech";
      sa[46] = "Czechoslovakian";
      sa[47] = "Dane/Danish";
      sa[48] = "Decline to State";
      sa[49] = "Dominican";
      sa[50] = "Dutch";
      sa[51] = "East Indian";
      sa[52] = "Ecuadorian";
      sa[53] = "Egyptian";
      sa[54] = "English";
      sa[55] = "Eritrean";
      sa[56] = "Estonian";
      sa[57] = "Ethiopian";
      sa[58] = "Fijian";
      sa[59] = "Filipino/Philippine";
      sa[60] = "French";
      sa[61] = "French Canadian";
      sa[62] = "German";
      sa[63] = "German Russian";
      sa[64] = "Ghanaian/Ghanian";
      sa[65] = "Greek";
      sa[66] = "Guamanian/Chamorro";
      sa[67] = "Guatemalan";
      sa[68] = "Haitian";
      sa[69] = "Hawaiian/Native Hawaiian";
      sa[70] = "Hispanic/Latino - Caribbean Latino";
      sa[71] = "Hispanic/Latino - Central American";
      sa[72] = "Hispanic/Latino - Mexican,Chicano";
      sa[73] = "Hispanic/Latino - Other Hispanic/Latino";
      sa[74] = "Hispanic/Latino - South American";
      sa[75] = "Hmong";
      sa[76] = "Honduran";
      sa[77] = "Hungarian";
      sa[78] = "Icelander";
      sa[79] = "Indonesian";
      sa[80] = "Iranian";
      sa[81] = "Iraqi";
      sa[82] = "Irish";
      sa[83] = "Israeli";
      sa[84] = "Italian";
      sa[85] = "Jamaican";
      sa[86] = "Japanese";
      sa[87] = "Jewish";
      sa[88] = "Jordanian";
      sa[89] = "Kenyan";
      sa[90] = "Khmer";
      sa[91] = "Kinh/Viet";
      sa[92] = "Korean";
      sa[93] = "Lao/Laotian";
      sa[94] = "Latin American Indian";
      sa[95] = "Latvian";
      sa[96] = "Lebanese";
      sa[97] = "Libyan";
      sa[98] = "Lithuanian";
      sa[99] = "Macedonian";
      sa[100] = "Malaysian";
      sa[101] = "Maltese";
      sa[102] = "Mestizo";
      sa[103] = "Mexican";
      sa[104] = "Mexican American Indian";
      sa[105] = "Moldovan/Moldavian";
      sa[106] = "Moroccan";
      sa[107] = "Navajo";
      sa[108] = "Nepalese/Nepali";
      sa[109] = "Nicaraguan";
      sa[110] = "Nigerian";
      sa[111] = "Non Hispanic/Non Latino";
      sa[112] = "Norwegian";
      sa[113] = "Okinawan";
      sa[114] = "Other";
      sa[115] = "Pakistani";
      sa[116] = "Palestinian";
      sa[117] = "Panamanian";
      sa[118] = "Paraguayan";
      sa[119] = "Part Hawaiian";
      sa[120] = "Persian";
      sa[121] = "Peruvian";
      sa[122] = "Pole/Polish";
      sa[123] = "Portuguese";
      sa[124] = "Pueblo";
      sa[125] = "Puerto Rican";
      sa[126] = "Romanian";
      sa[127] = "Russian";
      sa[128] = "Salvadoran/Salvadorian";
      sa[129] = "Samoan";
      sa[130] = "Scandinavian";
      sa[131] = "Scotch-Irish";
      sa[132] = "Scottish";
      sa[133] = "Serb/Serbian";
      sa[134] = "Sierra Leonean";
      sa[135] = "Singaporean/Singapore";
      sa[136] = "Slovene/Slovenian";
      sa[137] = "Somali/Somalian";
      sa[138] = "South African";
      sa[139] = "Soviet/Soviet Union";
      sa[140] = "Spaniard/Spanish";
      sa[141] = "Spanish American Indian";
      sa[142] = "Sri Lankan";
      sa[143] = "Swede/Swedish";
      sa[144] = "Swiss";
      sa[145] = "Syrian";
      sa[146] = "Taiwanese";
      sa[147] = "Tanzanian";
      sa[148] = "Teton Sioux";
      sa[149] = "Thai";
      sa[150] = "Togolese/Togo";
      sa[151] = "Tongan";
      sa[152] = "Trinidadian/Tobagonian";
      sa[153] = "Turk/Turkish";
      sa[154] = "U.S. Virgin Islander";
      sa[155] = "Ugandan";
      sa[156] = "Ukrainian";
      sa[157] = "Unknown";
      sa[158] = "Uruguayan";
      sa[159] = "Venezuelan";
      sa[160] = "Vietnamese";
      sa[161] = "Welsh";
      sa[162] = "White Mountain Apache";
      sa[163] = "Yemeni";
      sa[164] = "Yugoslavian";
      sa[165] = "Zimbabwean";
    }
  }
}
// The class representing column binned_race
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[8];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_4_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Asian";
      sa[1] = "Black";
      sa[2] = "Hispanic/Latino";
      sa[3] = "Middle Eastern";
      sa[4] = "Native American";
      sa[5] = "Pacific Islander";
      sa[6] = "Unknown";
      sa[7] = "White";
    }
  }
}
// The class representing column hcc_1
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_5_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_2
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_6_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_6
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_7_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_8
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_8_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_9
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_9 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_9_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_9_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_10
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_10 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_10_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_10_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_11
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_11 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_11_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_11_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_12
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_12 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_12_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_12_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_17
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_13 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_13_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_13_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_18
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_14 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_14_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_14_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_19
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_15 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_15_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_15_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_21
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_16 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_16_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_16_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_22
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_17 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_17_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_17_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_23
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_18 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_18_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_18_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_27
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_19 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_19_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_19_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_28
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_20 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_20_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_20_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_29
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_21 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_21_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_21_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_33
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_22 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_22_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_22_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_34
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_23 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_23_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_23_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_35
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_24 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_24_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_24_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_39
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_25 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_25_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_25_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_40
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_26 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_26_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_26_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_46
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_27 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_27_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_27_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_47
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_28 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_28_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_28_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_48
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_29 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_29_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_29_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_54
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_30 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_30_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_30_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_55
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_31 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_31_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_31_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_57
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_32 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_32_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_32_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_58
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_33 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_33_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_33_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_70
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_34 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_34_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_34_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_71
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_35 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_35_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_35_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_72
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_36 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_36_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_36_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_73
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_37 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_37_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_37_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_74
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_38 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_38_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_38_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_75
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_39 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_39_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_39_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_76
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_40 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_40_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_40_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_77
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_41 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_41_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_41_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_78
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_42 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_42_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_42_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_79
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_43 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_43_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_43_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_80
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_44 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_44_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_44_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_82
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_45 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_45_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_45_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_83
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_46 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_46_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_46_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_84
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_47 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_47_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_47_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_85
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_48 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_48_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_48_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_86
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_49 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_49_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_49_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_87
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_50 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_50_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_50_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_88
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_51 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_51_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_51_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_96
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_52 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_52_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_52_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_99
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_53 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_53_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_53_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_100
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_54 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_54_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_54_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_103
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_55 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_55_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_55_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_104
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_56 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_56_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_56_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_106
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_57 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_57_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_57_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_107
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_58 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_58_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_58_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_108
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_59 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_59_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_59_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_110
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_60 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_60_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_60_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_111
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_61 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_61_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_61_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_112
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_62 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_62_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_62_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_114
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_63 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_63_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_63_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_115
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_64 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_64_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_64_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_122
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_65 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_65_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_65_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_124
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_66 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_66_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_66_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_134
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_67 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_67_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_67_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_135
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_68 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_68_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_68_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_136
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_69 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_69_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_69_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_137
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_70 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_70_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_70_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_157
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_71 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_71_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_71_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_158
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_72 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_72_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_72_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_161
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_73 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_73_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_73_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_162
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_74 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_74_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_74_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_167
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_75 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_75_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_75_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_169
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_76 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_76_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_76_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_170
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_77 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_77_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_77_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_173
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_78 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_78_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_78_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_176
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_79 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_79_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_79_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_186
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_80 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_80_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_80_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_188
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_81 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_81_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_81_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column hcc_189
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_82 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_82_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_82_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "N";
      sa[1] = "Y";
    }
  }
}
// The class representing column LC
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_127 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_127_0.fill(VALUES);
  }
  static final class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_ColInfo_127_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_0_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <57.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <48.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <43.5f ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                     (data[123 /* bmi_mean */] <46.367996f ? 
                        -0.19746256f : 
                        -0.17001203f) : 
                    0.03490532f) : 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.258554f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 163, 3, data[2])) ? 
                        -0.19312276f : 
                        -0.044140145f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 3, data[2]) || (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 163, 3, data[2])) ? 
                        -0.1647999f : 
                        0.041063197f))) : 
             (Double.isNaN(data[125]) || data[125 /* bmi_min */] <19.235039f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 165, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 165, 0, data[2])) ? 
                        -0.13564113f : 
                        -0.039810266f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 165, 0, data[2])) ? 
                        0.064670764f : 
                        0.17146532f)) : 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <11.25f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                        -0.1615671f : 
                        -0.093773976f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        -0.15304382f : 
                        0.07333048f)))) : 
         (data[84 /* ASTIGMATISM. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <8.2265625f ? 
                 (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[61])) ? 
                     (data[0 /* age */] <66.5f ? 
                        -0.06284289f : 
                        0.013233183f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        -0.031224936f : 
                        0.13062808f)) : 
                 (data[3 /* packYears */] <22.835632f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 164, 1, data[2])) ? 
                        -0.03757457f : 
                        0.09667415f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 164, 1, data[2])) ? 
                        -0.055153646f : 
                        0.1490341f))) : 
             (data[0 /* age */] <66.0f ? 
                 (Double.isNaN(data[125]) || data[125 /* bmi_min */] <21.240625f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 162, 0, data[2])) ? 
                        -0.019764623f : 
                        0.14747308f) : 
                     (data[96 /* OSTEOARTHRITIS */] <0.5f ? 
                        0.12223522f : 
                        -0.030944247f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <93.0f ? 
                     (data[121 /* SKIN PREPS */] <6.5f ? 
                        0.15249147f : 
                        0.17818384f) : 
                     (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[4])) ? 
                        -0.042645458f : 
                        0.19501014f)))));
    return pred;
  } // constant pool size = 379B, number of visited nodes = 30, static init size = 1542B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {...3 0-bits... 10100000 00000000 00001000 01000000 01000000 00000000 00000000 00000000 10000000 00000001 00000000 01000000 00001000 00001000 00000000 00000000 00000000 00000000 00000000 00100100}
  public static final byte[] GRPSPLIT1 = new byte[] {5, 0, 16, 2, 2, 0, 0, 0, 1, -128, 0, 2, 16, 16, 0, 0, 0, 0, 0, 36, 0};
  // {...3 0-bits... 00000010 00000000 00000000 00000001 00000000 00000000 00100000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 10000000 00000000 00010000 00000010 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 0, -128, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 1, 0, 8, 64, 0, 0, 0};
  // {11111111 11101111 11111111 11111111 11111111 11111111 01011110 10111111 11111111 10111111 01111111 11111111 11111110 11111111 11111111 10011111 11111111 10110111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -9, -1, -1, -1, -1, 122, -3, -1, -3, -2, -1, 127, -1, -1, -7, -1, -19, -1, -1, 31};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 10000000 00000000 00000001 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, -128, 0, 0, 0, 0, 16, 0, 0, 0};
  // {11111011 11111111 11111111 11110111 11111111 11111111 11111111 11101111 11101111 01111111 11111111 11111111 11111111 11111110 11111111 11111111 01111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, -1, -1, -17, -1, -1, -1, -9, -9, -2, -1, -1, -1, 127, -1, -1, -2, -1, -1, -1, 31};
  // {00000100 00110000 00000000 00000000 00001010 00001000 00011000 01010000 00000000 00000000 10101100 00001100 00000000 00000100 00010000 00000111 11001000 00000000 00000100 11100000 10100}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 12, 0, 0, 80, 16, 24, 10, 0, 0, 53, 48, 0, 32, 8, -32, 19, 0, 32, 7, 5};
  // {00000100 00100000 00100000 00000000 00000000 00000000 00100010 00010000 00000000 00000000 00000000 00000000 00000001 00000001 00001000 00100001 00000000 00000000 00000100 00000000 00001}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 4, 4, 0, 0, 0, 68, 8, 0, 0, 0, 0, -128, -128, 16, -124, 0, 0, 32, 0, 16};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {11111111 10101111 11111111 11111111 11111111 01111101 01111111 11111111 11111111 00111111 01111110 11111111 11111110 11111111 11111111 10111011 11111111 11111110 10111111 11111111 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -11, -1, -1, -1, -66, -2, -1, -1, -4, 126, -1, 127, -1, -1, -35, -1, 127, -3, -1, 31};
  // {...1 0-bits... 11111111 11111111 11011111 11101111 11111111 11111011 10111111 11101111 10011110 11101110 11011111 11101111 11111101 10111110 10111111 01111111 11110111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -5, -9, -1, -33, -3, -9, 121, 119, -5, -9, -65, 125, -3, -2, -17, -1, -1, -1, 15};
  // {...1 0-bits... 01111110 11111111 11011111 11111111 11111110 11111111 11111111 11111111 11110111 11101110 11111111 11111111 11111011 11111110 11111110 00111111 11111111 11111011 11110110 11111111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {126, -1, -5, -1, 127, -1, -1, -1, -17, 119, -1, -1, -33, 127, 127, -4, -1, -33, 111, -1, 15};
  // {11111101 11111111 11111111 11111111 11111111 11110111 11111111 11110111 11111110 00111111 11111101 11111111 11111111 11111111 11111111 01111111 11111111 11110111 11111111 11111011 11}
  public static final byte[] GRPSPLIT12 = new byte[] {-65, -1, -1, -1, -1, -17, -1, -17, 127, -4, -65, -1, -1, -1, -1, -2, -1, -17, -1, -33, 3};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {127, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_1_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <54.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <47.5f ? 
             (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0]) || data[0 /* age */] <43.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.17508617f : 
                        -0.0705334f) : 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.769636f ? 
                        -0.07321902f : 
                        -0.1535529f)) : 
                 (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                    -0.005289361f : 
                    0.16178282f)) : 
             (Double.isNaN(data[124]) || data[124 /* bmi_max */] <20.477655f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 3, data[2]) || (GenModel.bitSetIsInRange(162, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 162, 3, data[2])) ? 
                     (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.0038972734f : 
                        0.10676213f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 162, 3, data[2])) ? 
                        0.10002836f : 
                        0.18297708f)) : 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <11.9704685f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(158, 5, data[2]) || (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 158, 5, data[2])) ? 
                        -0.12768273f : 
                        0.17388178f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 158, 5, data[2])) ? 
                        -0.1093887f : 
                        0.053314935f)))) : 
         (data[84 /* ASTIGMATISM. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <8.2265625f ? 
                 (data[0 /* age */] <66.5f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.073529094f : 
                        0.09219978f) : 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.05028566f : 
                        -0.02970034f)) : 
                 (data[3 /* packYears */] <21.212402f ? 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <29.302292f ? 
                        0.098140016f : 
                        0.015092529f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 164, 1, data[2])) ? 
                        -0.015451268f : 
                        0.13367675f))) : 
             (data[0 /* age */] <63.5f ? 
                 (Double.isNaN(data[125]) || data[125 /* bmi_min */] <21.287031f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 163, 0, data[2])) ? 
                        0.022731233f : 
                        0.123748064f) : 
                     (data[98 /* PREDIABETES */] <1.5f ? 
                        0.09851405f : 
                        -0.057310365f)) : 
                 (data[106 /* ANTIASTHMATICS */] <2.0f ? 
                     (data[93 /* HX OF MI */] <7.5f ? 
                        0.14900796f : 
                        0.06809358f) : 
                     (data[3 /* packYears */] <7.3125f ? 
                        0.059490435f : 
                        0.15923786f)))));
    return pred;
  } // constant pool size = 285B, number of visited nodes = 29, static init size = 1002B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000 00000000 00000000 00100000 01000000 00000000 00000001 00000010 00000000 00000000 10100000 00010000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0, 0, 0, 4, 2, 0, -128, 64, 0, 0, 5, 8, 0, 2, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {...3 0-bits... 11011111 01111111 01111111 10111111 11101111 11111011 10101101 11111110 01111001 11111011 11111111 11111111 11110111 11110111 11111101 11111011 11111111 11111111 11111111 1111101}
  public static final byte[] GRPSPLIT3 = new byte[] {-5, -2, -2, -3, -9, -33, -75, 127, -98, -33, -1, -1, -17, -17, -65, -33, -1, -1, -1, -33, 3};
  // {01001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {50, 0, 0, 0};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, 3};
  // {...5 0-bits... 00000000 00000000 00000000 00000100 00000000 00000001 00000000 00000000 00000000 00000101 10000000 10000000 00000000 00000000 00000000 00100001 00000000 00001000 00010100 0}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 32, 0, -128, 0, 0, 0, -96, 1, 1, 0, 0, 0, -124, 0, 16, 40, 32};
  // {...5 0-bits... 10001000 00000100 00000000 00000000 00000000 00000100 01000010 00000000 00001000 00000000 00000000 00000000 00100000 00000001 00000000 00000000 00000000 00000000 10000000 0}
  public static final byte[] GRPSPLIT7 = new byte[] {17, 32, 0, 0, 0, 32, 66, 0, 16, 0, 0, 0, 4, -128, 0, 0, 0, 0, 1, 0};
  // {...1 0-bits... 01111110 11111111 11011111 11111111 11011110 11111110 11110111 11111111 11110111 11101110 11111111 11111111 11111011 11111110 10111110 01111011 11111111 11101011 11110110 11111111 111}
  public static final byte[] GRPSPLIT8 = new byte[] {126, -1, -5, -1, 123, 127, -17, -1, -17, 119, -1, -1, -33, 127, 125, -34, -1, -41, 111, -1, 15};
  // {11111101 11111111 11111111 11111111 11111111 11110111 01111110 11110111 11101110 00111111 11111101 11111111 11111110 11111111 11111111 01011111 11111111 10110111 11111111 11111011 111}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, -1, -1, -1, -1, -17, 126, -17, 119, -4, -65, -1, 127, -1, -1, -6, -1, -19, -1, -33, 7};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_2_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <57.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <48.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <43.5f ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                     (data[123 /* bmi_mean */] <46.367996f ? 
                        -0.1645976f : 
                        -0.1386436f) : 
                    0.026559137f) : 
                 (data[107 /* ANTIBIOTICS */] <6.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 3, data[2]) || (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 163, 3, data[2])) ? 
                        -0.15964165f : 
                        -0.11994508f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 163, 3, data[2])) ? 
                        -0.08802205f : 
                        0.062739335f))) : 
             (Double.isNaN(data[124]) || data[124 /* bmi_max */] <21.310976f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 165, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 165, 0, data[2])) ? 
                        -0.12787719f : 
                        -0.029259937f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 165, 0, data[2])) ? 
                        0.051308785f : 
                        0.16018683f)) : 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[8])) ? 
                        -0.10326009f : 
                        0.14278007f) : 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
                        -0.094768345f : 
                        0.09174952f)))) : 
         (data[84 /* ASTIGMATISM. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <6.3984375f ? 
                 (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[61])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        -0.07027486f : 
                        0.00904935f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                        -0.010459966f : 
                        0.11845568f)) : 
                 (data[3 /* packYears */] <22.77356f ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <33.430626f ? 
                        0.083913855f : 
                        -0.0012705276f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 164, 1, data[2])) ? 
                        -0.050422553f : 
                        0.12448113f))) : 
             (data[0 /* age */] <66.0f ? 
                 (data[106 /* ANTIASTHMATICS */] <2.0f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 0, data[2]) || (GenModel.bitSetIsInRange(162, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 162, 0, data[2])) ? 
                        -0.17490359f : 
                        0.04002955f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 162, 0, data[2])) ? 
                        -0.01894642f : 
                        0.12709552f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <93.0f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 158, 5, data[2])) ? 
                        0.10622507f : 
                        0.14179157f) : 
                     (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[4])) ? 
                        -0.052124277f : 
                        0.16813308f)))));
    return pred;
  } // constant pool size = 388B, number of visited nodes = 30, static init size = 1596B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {...3 0-bits... 00100010 00000000 00000000 00000000 01000000 00000000 00100000 10010000 10000000 00000000 01000000 01000000 00000000 00000000 00000000 00000000 00000000 00000010 00100000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {68, 0, 0, 0, 2, 0, 4, 9, 1, 0, 2, 2, 0, 0, 0, 0, 0, 64, 4, 0, 0};
  // {...3 0-bits... 10000000 00000000 00001000 01000001 01000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00100100}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 16, -126, 2, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 8, 0, 0, 36, 0};
  // {11111111 11101111 11111111 11110111 11111101 11111111 01011110 10111111 11111111 00111111 01111111 11111111 11111110 11111111 11111111 10011111 01111111 10110111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -9, -1, -17, -65, -1, 122, -3, -1, -4, -2, -1, 127, -1, -1, -7, -2, -19, -1, -1, 31};
  // {00000000 00000000 00000000 00001000 00000010 00000000 00000000 00000000 00000000 11000000 10000000 00000000 00000001 00000000 00000000 00000000 10000000 00001000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 16, 64, 0, 0, 0, 0, 3, 1, 0, -128, 0, 0, 0, 1, 16, 0, 0, 0};
  // {11111011 11111111 11111111 11111111 11110111 11111111 11111111 11101111 11101111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, -1, -1, -1, -17, -1, -1, -9, -9, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, 31};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {11000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-93, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {11100111 01101111 11011110 11100010 11111101 11011111 01011011 11111010 10100111 00010100 10111011 10111110 11001100 01110100 11000111 00111011 01101111 11110110 10101111 11101011 11110}
  public static final byte[] GRPSPLIT9 = new byte[] {-25, -10, 123, 71, -65, -5, -38, 95, -27, 40, -35, 125, 51, 46, -29, -36, -10, 111, -11, -41, 15};
  // {11111111 10101111 11111111 11111101 11111111 01111101 01111111 11101111 11111111 00111111 01111110 11111111 11111110 11111111 11111111 10111011 11111111 11111110 10111111 11111111 11111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -11, -1, -65, -1, -66, -2, -9, -1, -4, 126, -1, 127, -1, -1, -35, -1, 127, -3, -1, 31};
  // {...1 0-bits... 01111110 11111111 11011111 11111111 11111110 11111111 11111111 11111111 11110111 11101110 11111111 11111111 11111011 11111110 11111110 00111111 11111111 11111011 11110110 11111111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {126, -1, -5, -1, 127, -1, -1, -1, -17, 119, -1, -1, -33, 127, 127, -4, -1, -33, 111, -1, 15};
  // {11111101 11101111 11111110 11111111 11111101 11111111 01111111 11110111 11110111 01111110 01111100 11111011 11111101 01111111 11111111 11111111 11100111 11111111 11111111 11110011 11}
  public static final byte[] GRPSPLIT12 = new byte[] {-65, -9, 127, -1, -65, -1, -2, -17, -17, 126, 62, -33, -65, -2, -1, -1, -25, -1, -1, -49, 3};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11110111 11111110 00111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11110111 11111111 11111011 11}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -17, 127, -4, -1, -1, -1, -1, -1, -2, -1, -17, -1, -33, 3};
  // {...5 0-bits... 11101101 11111111 11111111 11111111 11111111 11111011 11111101 11110101 11100111 11111111 11111110 11101111 11011111 11111111 11101111 11011110 11111110 11110111 11110111 0}
  public static final byte[] GRPSPLIT14 = new byte[] {-73, -1, -1, -1, -1, -33, -65, -81, -25, -1, 127, -9, -5, -1, -9, 123, 127, -17, -17, 62};
  // {11111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {127, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_3_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <58.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <49.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <42.5f ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                     (data[123 /* bmi_mean */] <48.41232f ? 
                        -0.15393794f : 
                        -0.13019767f) : 
                    0.038130276f) : 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.258554f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 163, 3, data[2])) ? 
                        -0.16191454f : 
                        -0.030690543f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 3, data[2]) || (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 163, 3, data[2])) ? 
                        -0.12683195f : 
                        0.03669867f))) : 
             (Double.isNaN(data[124]) || data[124 /* bmi_max */] <21.310976f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 163, 0, data[2])) ? 
                     (data[106 /* ANTIASTHMATICS */] <1.5f ? 
                        -0.119434014f : 
                        -0.008421211f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 163, 0, data[2])) ? 
                        0.048683826f : 
                        0.10900729f)) : 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <6.25f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 163, 0, data[2])) ? 
                        -0.100192405f : 
                        -0.013068302f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 163, 0, data[2])) ? 
                        -0.15120861f : 
                        0.044832848f)))) : 
         (data[84 /* ASTIGMATISM. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <4.5703125f ? 
                 (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[61])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 165, 0, data[2])) ? 
                        -0.06190649f : 
                        0.009645989f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        -0.030083705f : 
                        0.10619792f)) : 
                 (data[3 /* packYears */] <21.088257f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 164, 1, data[2])) ? 
                        -0.09418054f : 
                        0.06928747f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 164, 1, data[2])) ? 
                        -0.15684621f : 
                        0.114847526f))) : 
             (data[0 /* age */] <67.5f ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <23.170038f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 162, 0, data[2])) ? 
                        0.032930367f : 
                        0.12183093f) : 
                     (data[94 /* HYPERLIPIDEMIA */] <9.0f ? 
                        0.0966861f : 
                        -0.030082196f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <88.5f ? 
                     (Double.isNaN(data[116]) || data[116 /* GASTROINTESTINAL */] <11.5f ? 
                        0.13349986f : 
                        0.043887682f) : 
                     (data[122 /* UNCLASSIFIED DRUG PRODUCTS */] <3.5f ? 
                        0.036774483f : 
                        0.12628067f)))));
    return pred;
  } // constant pool size = 374B, number of visited nodes = 30, static init size = 1512B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {...3 0-bits... 10100000 00000000 00001000 01000000 01000000 00000000 00000000 10000000 10000100 00000001 00010000 01000000 00001000 00001000 00000000 00000000 01000000 00000000 00000000 00100100}
  public static final byte[] GRPSPLIT1 = new byte[] {5, 0, 16, 2, 2, 0, 0, 1, 33, -128, 8, 2, 16, 16, 0, 0, 2, 0, 0, 36, 0};
  // {...3 0-bits... 00000010 00000000 00000000 00000001 00000000 00000001 00100000 00000000 00000000 00000000 01000000 01000000 00000000 00000000 10000000 00001000 01010000 00000010 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 0, 0, -128, 0, -128, 4, 0, 0, 0, 2, 2, 0, 0, 1, 16, 10, 64, 0, 0, 2};
  // {11111101 11101111 11111111 11110111 11111101 11111111 01011110 10111111 11101110 00111111 01111111 11111111 11111110 11111111 11111111 10011111 11111111 10110111 11111111 11111111 111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -9, -1, -17, -65, -1, 122, -3, 119, -4, -2, -1, 127, -1, -1, -7, -1, -19, -1, -1, 7};
  // {11111011 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111011 111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -1, -1, -1, -1, -1, -1, -9, -1, -1, -65, -1, -1, -1, -1, -1, -2, -1, -1, -33, 7};
  // {00000000 00100000 00010000 00000000 00001010 00000000 00001000 01010000 00000000 00001000 10101000 00001100 00000000 00000100 00000000 00000111 01000000 00000000 00100000 11100000 001}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 4, 8, 0, 80, 0, 16, 10, 0, 16, 21, 48, 0, 32, 0, -32, 2, 0, 4, 7, 4};
  // {11111111 11111111 11111110 11111111 11111111 11111111 01111111 11111111 11111111 10110111 11110110 01110111 11111111 11111111 11111111 01111111 10111111 11111111 11111111 11111011 011}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, 127, -1, -1, -1, -2, -1, -1, -19, 111, -18, -1, -1, -1, -2, -3, -1, -1, -33, 6};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {11100111 01101111 11001111 11100010 11111101 11011111 01011011 11111010 10100111 00010100 10111011 10111110 11001100 01110100 11000111 00111011 01101111 11110111 10101111 11101011 11110}
  public static final byte[] GRPSPLIT8 = new byte[] {-25, -10, -13, 71, -65, -5, -38, 95, -27, 40, -35, 125, 51, 46, -29, -36, -10, -17, -11, -41, 15};
  // {11111111 10101111 11111111 11111111 11111111 01111101 01111111 11111111 11111111 00111111 01111110 11111111 11111110 11111111 11111111 10111011 11111111 11111110 10111111 11111111 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -11, -1, -1, -1, -66, -2, -1, -1, -4, 126, -1, 127, -1, -1, -35, -1, 127, -3, -1, 31};
  // {...1 0-bits... 11111111 11111111 11111111 11101111 11111111 11111011 10111111 11101111 10111110 11100110 11011111 11101111 11111111 10111110 10111111 10010110 11110111 11111111 11110111 11111110 111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -9, -1, -33, -3, -9, 125, 103, -5, -9, -1, 125, -3, 105, -17, -1, -17, 127, 15};
  // {...1 0-bits... 01111110 11111111 11011111 11111111 11111110 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111011 11110110 11111111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {126, -1, -5, -1, 127, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -2, -1, -33, 111, -1, 15};
  // {11111111 11111111 11111111 11111111 11111111 11110111 01111111 11110111 11101111 00111111 11111111 11110111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111011 11}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -1, -1, -17, -2, -17, -9, -4, -1, -17, -1, -1, -1, -2, -1, -1, -1, -33, 3};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_4_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <54.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <47.5f ? 
             (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                 (Double.isNaN(data[0]) || data[0 /* age */] <36.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.145973f : 
                        0.011591695f) : 
                     (data[123 /* bmi_mean */] <59.656094f ? 
                        -0.13014545f : 
                        -0.071951374f)) : 
                 (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                    -0.0013331139f : 
                    0.15813877f)) : 
             (data[116 /* GASTROINTESTINAL */] <11.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <13.376407f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.103563994f : 
                        0.078515165f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 160, 5, data[2])) ? 
                        -0.07371042f : 
                        0.05893589f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 162, 3, data[2])) ? 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.05045f ? 
                        -0.088137396f : 
                        -0.16387297f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 3, data[2]) || (GenModel.bitSetIsInRange(162, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 162, 3, data[2])) ? 
                        0.014782169f : 
                        0.13511361f)))) : 
         (data[84 /* ASTIGMATISM. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <8.2265625f ? 
                 (data[0 /* age */] <66.5f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.060992613f : 
                        0.082208574f) : 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        0.012171752f : 
                        0.14313002f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        -0.15392406f : 
                        0.031580545f) : 
                     (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[61])) ? 
                        0.08022759f : 
                        0.11613835f))) : 
             (data[0 /* age */] <63.5f ? 
                 (data[103 /* ANALGESICS */] <5.5f ? 
                     (data[98 /* PREDIABETES */] <1.5f ? 
                        0.09071226f : 
                        -0.04225579f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 163, 0, data[2])) ? 
                        0.06349245f : 
                        0.13000666f)) : 
                 (data[120 /* SEDATIVE/HYPNOTICS */] <6.5f ? 
                     (data[93 /* HX OF MI */] <6.5f ? 
                        0.11819002f : 
                        0.05055096f) : 
                     (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[17])) ? 
                        -0.034874264f : 
                        0.13318701f)))));
    return pred;
  } // constant pool size = 291B, number of visited nodes = 29, static init size = 1038B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 10100000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 2, 0, -128, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {...5 0-bits... 10001100 00000100 00000000 00000000 00000001 00000100 00000010 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {49, 32, 0, 0, -128, 32, 64, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -128};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111111 11111011 10111101 11111110 11111101 11111011 11111111 11101111 11101111 11111111 11111101 11111111 11111111 11111111 11111111 1100111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -33, -67, 127, -65, -33, -1, -9, -9, -1, -65, -1, -1, -1, -1, -13, 3};
  // {...3 0-bits... 11011111 01111111 01111111 11111111 11111111 11111111 11111111 01111111 11111011 11111111 11111111 11111111 11110111 11110111 11111111 11111011 11111111 11111111 11111111 1111101}
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -2, -2, -1, -1, -1, -1, -2, -33, -1, -1, -1, -17, -17, -1, -33, -1, -1, -1, -33, 3};
  // {10111111 01111111 11101111 11110111 11111111 01111101 01011111 11110111 11001011 01110111 01101111 11110111 11111110 11011111 01011111 00011111 11111011 11110101 11111011 01111111 01111}
  public static final byte[] GRPSPLIT6 = new byte[] {-3, -2, -9, -17, -1, -66, -6, -17, -45, -18, -10, -17, 127, -5, -6, -8, -33, -81, -33, -2, 30};
  // {10111111 01111111 11111111 11110111 11111111 01111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11011111 01111111 10111111 11111011 11111101 11111011 01111111 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -2, -1, -17, -1, -2, -1, -1, -1, -17, -1, -1, -1, -5, -2, -3, -33, -65, -33, -2, 31};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {11111011 11111111 11111111 11111111 11110111 11111111 01111110 11110111 11101110 00111111 11111100 11111111 11111110 11111111 11111111 01011111 11111111 11110111 11111111 11111011 111}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -1, -1, -1, -17, -1, 126, -17, 119, -4, 63, -1, 127, -1, -1, -6, -1, -17, -1, -33, 7};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_5_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <58.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <49.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <42.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
                        -0.13373917f : 
                        0.029244594f) : 
                    0.02443818f) : 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.258554f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 163, 3, data[2])) ? 
                        -0.1459948f : 
                        -0.023467349f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 3, data[2]) || (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 163, 3, data[2])) ? 
                        -0.13283806f : 
                        -0.086256444f))) : 
             (data[102 /* TOBACCO SMOKER */] <0.5f ? 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.08545577f : 
                        0.13860108f) : 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.17153889f : 
                        0.09800881f)) : 
                 (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <23.632334f ? 
                        5.393207E-4f : 
                        -0.10074599f) : 
                     (data[111 /* CARDIOVASCULAR */] <2.5f ? 
                        0.0029114552f : 
                        0.06867115f)))) : 
         (data[84 /* ASTIGMATISM. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <4.5703125f ? 
                 (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.01408846f : 
                        0.115834534f) : 
                     (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <11.5f ? 
                        0.1419474f : 
                        -0.04890253f)) : 
                 (data[3 /* packYears */] <21.088257f ? 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.07102199f : 
                        -0.009151822f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 164, 1, data[2])) ? 
                        -0.008350116f : 
                        0.101749726f))) : 
             (data[0 /* age */] <67.5f ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <23.170038f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 162, 0, data[2])) ? 
                        0.02373879f : 
                        0.10711552f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 0, data[2]) || (GenModel.bitSetIsInRange(162, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 162, 0, data[2])) ? 
                        -0.10264034f : 
                        0.049947124f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <88.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 158, 5, data[2])) ? 
                        0.08702182f : 
                        0.120673016f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 158, 5, data[2])) ? 
                        0.03101662f : 
                        0.13937335f)))));
    return pred;
  } // constant pool size = 316B, number of visited nodes = 30, static init size = 1164B
  // {00000000 10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 00100000 00000000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 1, 0, 0, 0, 0, 0, 2, 0, -128, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {...3 0-bits... 10100000 00000000 00001000 01000000 01000000 00000000 00000000 10000000 10000100 00000001 00010000 01000000 00001000 00001000 00000000 00000000 01000000 00000000 00000000 00100100}
  public static final byte[] GRPSPLIT2 = new byte[] {5, 0, 16, 2, 2, 0, 0, 1, 33, -128, 8, 2, 16, 16, 0, 0, 2, 0, 0, 36, 0};
  // {...3 0-bits... 00100010 00000000 00000000 00000001 01000000 00000001 00100010 10010000 10000000 00000000 01000000 01000000 00000000 00000000 10000000 00001000 01010000 00000010 00100000 00000100}
  public static final byte[] GRPSPLIT3 = new byte[] {68, 0, 0, -128, 2, -128, 68, 9, 1, 0, 2, 2, 0, 0, 1, 16, 10, 64, 4, 32, 2};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11110001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-113, 0, 0, 0};
  // {11000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-93, 0, 0, 0};
  // {...1 0-bits... 01111110 11011111 11011111 11111111 11011110 11111111 11110111 11111111 11110110 11101110 11111111 11111111 11111011 11111110 10111111 00111011 11111111 11101011 11110110 11111111 111}
  public static final byte[] GRPSPLIT7 = new byte[] {126, -5, -5, -1, 123, -1, -17, -1, 111, 119, -1, -1, -33, 127, -3, -36, -1, -41, 111, -1, 15};
  // {11111111 11111111 11111111 11111111 11111111 11110111 01111101 11110111 11101111 00111111 11111111 11110111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111011 11}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -17, -66, -17, -9, -4, -1, -17, -1, -1, -1, -2, -1, -1, -1, -33, 3};
  // {11111111 01101111 11111110 11110111 11111111 11111111 01111111 11110111 11110111 00111110 01111101 11111011 11111101 01111110 11111111 01111111 01100111 11110111 11111111 10111011 11}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -10, 127, -17, -1, -1, -2, -17, -17, 124, -66, -33, -65, 126, -1, -2, -26, -17, -1, -35, 3};
  // {...5 0-bits... 11111101 11111111 11111111 10111111 11111111 11111011 11111111 11110101 11100111 11111111 10111110 11101111 11011111 11111111 11111111 11001110 11111110 11110111 11111111 0}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, -1, -1, -3, -1, -33, -1, -81, -25, -1, 125, -9, -5, -1, -1, 115, 127, -17, -1, 62};
  // {...5 0-bits... 01111011 11111111 11111111 11111111 11111111 11111111 11111101 10111111 11101111 11111111 11111111 11111111 11111111 11011111 11111011 11111111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT11 = new byte[] {-34, -1, -1, -1, -1, -1, -65, -3, -9, -1, -1, -1, -1, -5, -33, -1, -1, -1, -1, 63};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_6_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <53.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <47.5f ? 
             (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                 (data[125 /* bmi_min */] <58.399803f ? 
                     (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                        -0.12658569f : 
                        0.019388547f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        -0.09446983f : 
                        0.13016666f)) : 
                 (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[1])) ? 
                    0.001781111f : 
                    0.148873f)) : 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.003014f ? 
                 (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 3, data[2]) || (GenModel.bitSetIsInRange(162, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 162, 3, data[2])) ? 
                        -0.0125507815f : 
                        0.15676008f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 162, 3, data[2])) ? 
                        -0.023926793f : 
                        0.10962829f)) : 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <11.9704685f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(160, 5, data[2]) || (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 160, 5, data[2])) ? 
                        -0.09346902f : 
                        0.122249566f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 160, 5, data[2])) ? 
                        -0.13804401f : 
                        0.05761346f)))) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[61])) ? 
             (data[84 /* ASTIGMATISM. */] <0.5f ? 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (data[0 /* age */] <66.0f ? 
                        -0.0535268f : 
                        0.011630564f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                        -0.098464675f : 
                        0.100024626f)) : 
                 (data[0 /* age */] <61.5f ? 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <21.196405f ? 
                        0.06446899f : 
                        -0.034036156f) : 
                     (data[119 /* PSYCHOTHERAPEUTIC DRUGS */] <8.5f ? 
                        0.071959056f : 
                        0.113346845f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 166, 0, data[2])) ? 
                 (!Double.isNaN(data[52 /* hcc_96 */]) && (GenModel.bitSetIsInRange(32, 0, data[52]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[52])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <25.59375f ? 
                        -0.16918714f : 
                        0.11079696f) : 
                     (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <4.5f ? 
                        0.065582365f : 
                        -0.11909144f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <90.0f ? 
                     (Double.isNaN(data[108]) || data[108 /* ANTICOAGULANTS */] <9.5f ? 
                        0.11274639f : 
                        -0.016286142f) : 
                     (Double.isNaN(data[95]) || data[95 /* HYPOTHYROIDISM */] <3.5f ? 
                        0.035678275f : 
                        -0.1317614f)))));
    return pred;
  } // constant pool size = 300B, number of visited nodes = 29, static init size = 1092B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {00000000 10100000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000001 00100000 00000000 00000000 00000000 00000000 00000001 00000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 5, 0, 0, 0, 0, 0, 64, 0, -128, 4, 0, 0, 0, 0, -128, 0, 16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {11011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {59, 0, 0, 0};
  // {...3 0-bits... 10000001 00000000 00001000 00000000 00010000 01000000 00000000 00000000 00001000 00000010 00001000 01000000 00000000 00000000 00000000 00000000 01000000 01000000 00000000 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-127, 0, 16, 0, 8, 2, 0, 0, 16, 64, 16, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0};
  // {...3 0-bits... 11111111 11111111 01111111 11111111 11111111 11111111 11111101 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111101}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -2, -1, -1, -1, -65, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, 3};
  // {...5 0-bits... 00000000 00000000 00000000 00000100 00000000 00000001 00001000 00000000 00000000 00000101 10000000 00000000 00000000 00000000 00000000 01100001 00000000 00001000 10010000 000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 32, 0, -128, 16, 0, 0, -96, 1, 0, 0, 0, 0, -122, 0, 16, 9, 32};
  // {...5 0-bits... 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11101110 11111111 11111111 11011111 11111111 01111111 11111111 11111111 11111111 011}
  public static final byte[] GRPSPLIT8 = new byte[] {-65, -1, -1, -1, -1, -1, -1, -1, -9, -1, 119, -1, -1, -5, -1, -2, -1, -1, -1, -2};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {11111111 01111111 11111111 11110111 11111111 11111111 11111111 11111111 11101111 00110111 11111111 11111111 11111111 11011111 11011111 10111011 01111111 11111111 11111111 11111011 11111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -2, -1, -17, -1, -1, -1, -1, -9, -20, -1, -1, -1, -5, -5, -35, -2, -1, -1, -33, 31};
  // {11111111 10001111 11101111 11111111 11111101 01111101 01111011 11101111 11111111 01111111 01111110 11110111 11111110 11111111 01111111 10011100 01111111 11111110 10111111 11111111 011111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -15, -9, -1, -65, -66, -34, -9, -1, -2, 126, -17, 127, -1, -2, 57, -2, 127, -3, -1, 62};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_7_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <58.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <49.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <42.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
                        -0.12234767f : 
                        0.021499312f) : 
                     (data[115 /* ELECT/CALORIC/H2O */] <7.5f ? 
                        -0.09616427f : 
                        0.13316678f)) : 
                 (data[104 /* ANESTHETICS */] <4.5f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.101529226f : 
                        -0.023529062f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 163, 3, data[2])) ? 
                        -0.055840023f : 
                        0.0635396f))) : 
             (Double.isNaN(data[124]) || data[124 /* bmi_max */] <21.310976f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 163, 0, data[2])) ? 
                     (data[106 /* ANTIASTHMATICS */] <1.5f ? 
                        -0.11463477f : 
                        -0.013001011f) : 
                     (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[61])) ? 
                        0.044748954f : 
                        0.16501252f)) : 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <6.25f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 163, 0, data[2])) ? 
                        -0.10233633f : 
                        -0.046896927f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 163, 0, data[2])) ? 
                        -0.14321673f : 
                        0.037732534f)))) : 
         (data[84 /* ASTIGMATISM. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <4.5703125f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        -0.026921825f : 
                        -0.09537886f) : 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.033951238f : 
                        -0.023711095f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 165, 0, data[2])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <40.90979f ? 
                        -6.55281E-4f : 
                        0.08391651f) : 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.09267371f : 
                        0.052160863f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <23.52185f ? 
                    0.014170127f : 
                    -0.18741892f) : 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <18.28125f ? 
                     (data[121 /* SKIN PREPS */] <6.5f ? 
                        0.05466737f : 
                        0.106936105f) : 
                     (Double.isNaN(data[93]) || data[93 /* HX OF MI */] <7.0f ? 
                        0.119779654f : 
                        0.00408326f)))));
    return pred;
  } // constant pool size = 304B, number of visited nodes = 29, static init size = 1116B
  // {00000000 10000000 00000000 00000000 00000000 00000000 00000000 01000010 00000000 00000001 00000000 00000000 00000000 10100000 00010000 00000001 01000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 1, 0, 0, 0, 0, 0, 66, 0, -128, 0, 0, 0, 5, 8, -128, 2, 16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {...3 0-bits... 10000000 00000000 00001000 01000001 01000000 00000000 00000010 10000000 00000000 00000001 00000000 01000000 00000000 00000000 00000000 00000000 01010000 00000000 00000000 00100100}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 16, -126, 2, 0, 64, 1, 0, -128, 0, 2, 0, 0, 0, 0, 10, 0, 0, 36, 0};
  // {11111101 11101111 11111111 11110111 11111101 11111111 01011110 10111111 11101110 00111111 11111111 11111111 11111110 11111111 11111111 10011111 11111111 10110111 11111111 11111111 111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -9, -1, -17, -65, -1, 122, -3, 119, -4, -1, -1, 127, -1, -1, -7, -1, -19, -1, -1, 7};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000100 00110000 00010000 00000000 00001010 00000000 00001000 01010000 00000000 00001000 10101000 00001100 00000000 00000110 00000000 00000111 11000000 00000000 00100100 11100000 101}
  public static final byte[] GRPSPLIT5 = new byte[] {32, 12, 8, 0, 80, 0, 16, 10, 0, 16, 21, 48, 0, 96, 0, -32, 3, 0, 36, 7, 5};
  // {11111111 11111111 11111110 11111111 11111111 11111111 01111111 11111111 11111111 10110111 11110110 11110111 11111111 11111111 11111111 01111111 10111111 11111111 11111111 11111011 011}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, 127, -1, -1, -1, -2, -1, -1, -19, 111, -17, -1, -1, -1, -2, -3, -1, -1, -33, 6};
  // {11100111 01101011 11001111 11100010 11111101 11011111 01011011 11111011 10100111 00010100 10111011 10111110 11001100 01110100 11000111 00111011 01101111 11110110 10101111 11101011 11110}
  public static final byte[] GRPSPLIT7 = new byte[] {-25, -42, -13, 71, -65, -5, -38, -33, -27, 40, -35, 125, 51, 46, -29, -36, -10, 111, -11, -41, 15};
  // {10111111 01111111 11101111 11110111 11111111 01111101 11011101 11110111 11001011 01110011 01100111 11110111 11111100 11011110 01011111 00001101 01111011 11110101 11111011 01111111 01111}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -2, -9, -17, -1, -66, -69, -17, -45, -50, -26, -17, 63, 123, -6, -80, -34, -81, -33, -2, 30};
  // {11111111 01111111 11111110 11111111 11111111 11111111 11111111 11111111 11110111 11111110 01111111 11111111 11111101 01111111 11111111 01111111 11110111 11111111 11111111 10111011 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -2, 127, -1, -1, -1, -1, -1, -17, 127, -2, -1, -65, -2, -1, -2, -17, -1, -1, -35, 31};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_8_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <59.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <49.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <36.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.12534043f : 
                        -0.11091168f) : 
                    0.023216698f) : 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.258554f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        -0.04432051f : 
                        0.14307654f) : 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                        -0.09854491f : 
                        0.085508466f))) : 
             (data[102 /* TOBACCO SMOKER */] <0.5f ? 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 158, 5, data[2])) ? 
                        -0.14282964f : 
                        -0.054662883f) : 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        -0.16230433f : 
                        0.08966637f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 163, 0, data[2])) ? 
                     (data[118 /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */] <2.5f ? 
                        -0.097124934f : 
                        -0.0063137487f) : 
                     (data[111 /* CARDIOVASCULAR */] <2.5f ? 
                        0.0038458335f : 
                        0.05666958f)))) : 
         (data[86 /* CATARACT. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <18.28125f ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.010451243f : 
                        0.09410144f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        -0.0516692f : 
                        0.08975538f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 165, 0, data[2])) ? 
                     (data[3 /* packYears */] <21.370605f ? 
                        -0.09952617f : 
                        0.0425951f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <85.5f ? 
                        0.090310596f : 
                        0.041719567f))) : 
             (data[0 /* age */] <68.0f ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <23.170038f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(157, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 157, 5, data[2])) ? 
                        0.02844153f : 
                        0.0967155f) : 
                     (data[94 /* HYPERLIPIDEMIA */] <8.5f ? 
                        0.08502117f : 
                        -0.04132166f)) : 
                 (data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <4.5f ? 
                        0.13343832f : 
                        -0.025202746f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <91.5f ? 
                        0.09975246f : 
                        -0.019866927f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 30, static init size = 1104B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 10100000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 2, 0, -128, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00001000 00000000 00000010 00000000 00000000 00000000 00000010 00001000 00000001 00000000 00000000 00000000 10000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 8, 0, 0, 16, 0, 64, 0, 0, 0, 64, 16, -128, 0, 0, 0, 1, 0, 0, 0, 0};
  // {00010000 10100000 00000001 00000000 00001000 00000000 00000000 00000010 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000001 00001000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 5, -128, 0, 16, 0, 0, 64, 0, 0, 4, 0, 0, 0, 0, -128, 16, 16, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {...5 0-bits... 10000100 00000010 00000000 00000001 01000001 00000011 01001010 01000000 00000001 00010101 10110001 00000000 00100000 11100000 10001100 10111000 00000000 00000100 10000100 1}
  public static final byte[] GRPSPLIT4 = new byte[] {33, 64, 0, -128, -126, -64, 82, 2, -128, -88, -115, 0, 4, 7, 49, 29, 0, 32, 33, 41};
  // {11110001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-113, 0, 0, 0};
  // {01111101 00111111 11111111 11110111 11111101 11111101 01111110 10111101 11101110 00011111 10110100 01011111 11111110 11111111 11101111 00011111 00111111 10110111 11111111 11110001 111}
  public static final byte[] GRPSPLIT6 = new byte[] {-66, -4, -1, -17, -65, -65, 126, -67, 119, -8, 45, -6, 127, -1, -9, -8, -4, -19, -1, -113, 7};
  // {11111110 11111111 11111111 11101111 11111101 11111111 11111111 11111111 11101111 10111111 11110111 11111111 11111101 11111111 11001111 11011011 01111111 11111111 11111111 11111111 01111}
  public static final byte[] GRPSPLIT7 = new byte[] {127, -1, -1, -9, -65, -1, -1, -1, -9, -3, -17, -1, -65, -1, -13, -37, -2, -1, -1, -1, 30};
  // {10111111 11101111 11101111 11110111 11111111 01111111 01011111 11111111 11001011 01110111 01101111 11111111 11111110 11011111 01011111 00011101 11111111 11110111 11111011 01111111 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -9, -9, -17, -1, -2, -6, -1, -45, -18, -10, -1, 127, -5, -6, -72, -1, -17, -33, -2, 31};
  // {...5 0-bits... 11111111 11111111 11111111 11111111 11111110 11101111 10111100 11111101 11100111 11111111 10111111 11111111 11011111 11111111 11101111 11111111 11111111 11111111 01111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -1, 127, -9, 61, -65, -25, -1, -3, -1, -5, -1, -9, -1, -1, -1, -2, 30};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_9_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <53.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <28.564453f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <43.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (data[124 /* bmi_max */] <51.58828f ? 
                        -0.1164787f : 
                        -0.085046254f) : 
                    0.09240158f) : 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.258554f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 3, data[2]) || (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 163, 3, data[2])) ? 
                        -0.054502316f : 
                        0.020047745f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 163, 3, data[2])) ? 
                        -0.105876364f : 
                        -0.052162956f))) : 
             (Double.isNaN(data[126]) || data[126 /* bmi_var */] <0.7525401f ? 
                 (data[126 /* bmi_var */] <0.46151873f ? 
                    0.07866978f : 
                     (data[0 /* age */] <51.5f ? 
                        0.22539519f : 
                        0.14038505f)) : 
                -0.0016034972f)) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[61])) ? 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <25.396824f ? 
                 (data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 163, 0, data[2])) ? 
                        -0.10587916f : 
                        0.029110575f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 163, 0, data[2])) ? 
                        -0.05941724f : 
                        0.078868605f)) : 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.026719732f : 
                        0.0808127f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                        -0.014743744f : 
                        0.088483185f))) : 
             (Double.isNaN(data[0]) || data[0 /* age */] <86.0f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 156, 5, data[2])) ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <39.194687f ? 
                        0.036579605f : 
                        -0.16908464f) : 
                     (Double.isNaN(data[108]) || data[108 /* ANTICOAGULANTS */] <1.5f ? 
                        0.10267424f : 
                        0.05931877f)) : 
                 (Double.isNaN(data[115]) || data[115 /* ELECT/CALORIC/H2O */] <3.0f ? 
                     (!Double.isNaN(data[51 /* hcc_88 */]) && (GenModel.bitSetIsInRange(32, 0, data[51]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[51])) ? 
                        -0.0408025f : 
                        0.078303576f) : 
                     (!Double.isNaN(data[29 /* hcc_48 */]) && (GenModel.bitSetIsInRange(32, 0, data[29]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[29])) ? 
                        -0.21709871f : 
                        -0.0027348923f)))));
    return pred;
  } // constant pool size = 274B, number of visited nodes = 26, static init size = 1008B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00100000 01000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0};
  // {...3 0-bits... 11111110 01111111 01111111 11111111 11111111 11111011 10101101 01111110 11101001 11010111 11101111 11111111 11110111 11111110 01111001 11111011 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT1 = new byte[] {127, -2, -2, -1, -1, -33, -75, 126, -105, -21, -9, -1, -17, 127, -98, -33, -1, -1, -1, -1, 7};
  // {...3 0-bits... 00100000 00000000 00000000 00000001 01000000 00000000 01100010 10010000 10000000 00000001 01100000 01000000 00000000 00000001 10000000 00011000 01010000 00000010 00100100 00000001}
  public static final byte[] GRPSPLIT2 = new byte[] {4, 0, 0, -128, 2, 0, 70, 9, 1, -128, 6, 2, 0, -128, 1, 24, 10, 64, 36, -128, 2};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {11111101 01101111 11011111 11101111 11111111 01111111 01011111 11111110 11110110 11111000 10111111 10111111 11011111 11010101 11001111 00111101 11101011 11111111 11111111 11111011 111}
  public static final byte[] GRPSPLIT4 = new byte[] {-65, -10, -5, -9, -1, -2, -6, 127, 111, 31, -3, -3, -5, -85, -13, -68, -41, -1, -1, -33, 7};
  // {11111101 01111111 11111110 11110111 11111111 11111111 11111110 11110111 11001110 11111111 11111111 11111111 11111111 11111111 11011111 01111111 11111111 10110111 10111111 11110011 111}
  public static final byte[] GRPSPLIT5 = new byte[] {-65, -2, 127, -17, -1, -1, 127, -17, 115, -1, -1, -1, -1, -1, -5, -2, -1, -19, -3, -49, 7};
  // {11111110 11111111 11111110 11111111 11111111 11101111 11110111 11111111 11101111 01111111 11111111 11111111 11111101 01111110 11001111 11011111 01111111 11111111 11111111 11111111 01111}
  public static final byte[] GRPSPLIT6 = new byte[] {127, -1, 127, -1, -1, -9, -17, -1, -9, -2, -1, -1, -65, 126, -13, -5, -2, -1, -1, -1, 30};
  // {...5 0-bits... 11110001 11111101 11111111 11111111 10101111 11101111 01111111 11111111 11101111 11101111 10011111 11111111 11011111 11101111 11110011 10001111 11111111 11010111 1111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-113, -65, -1, -1, -11, -9, -2, -1, -9, -9, -7, -1, -5, -9, -49, -15, -1, -21, -1, 15};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_10_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <60.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <47.5f ? 
             (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                 (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                     (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <6.5f ? 
                        -0.10131227f : 
                        0.11730706f) : 
                     (Double.isNaN(data[105]) || data[105 /* ANTIARTHRITICS */] <0.5f ? 
                        0.15705821f : 
                        -0.041359246f)) : 
                 (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                    0.01270299f : 
                    0.14341018f)) : 
             (data[102 /* TOBACCO SMOKER */] <0.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 165, 0, data[2])) ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 165, 0, data[2])) ? 
                        -0.10780722f : 
                        -0.049671687f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 165, 0, data[2])) ? 
                        0.014069765f : 
                        0.17723842f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <24.44828f ? 
                        -0.015282208f : 
                        -0.08628525f) : 
                     (data[98 /* PREDIABETES */] <1.5f ? 
                        0.06649528f : 
                        0.011361535f)))) : 
         (data[86 /* CATARACT. */] <0.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <21.9375f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.041627433f : 
                        0.05443404f) : 
                     (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[17])) ? 
                        -0.04734583f : 
                        0.028343206f)) : 
                 (Double.isNaN(data[124]) || data[124 /* bmi_max */] <26.51375f ? 
                     (Double.isNaN(data[103]) || data[103 /* ANALGESICS */] <7.0f ? 
                        0.1065228f : 
                        0.056894764f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 160, 1, data[2])) ? 
                        -0.14959799f : 
                        0.06872454f))) : 
             (data[93 /* HX OF MI */] <1.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* age */] <91.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 156, 5, data[2])) ? 
                        -0.07678048f : 
                        0.11090988f) : 
                    -0.062264245f) : 
                 (data[126 /* bmi_var */] <31.022896f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 158, 5, data[2])) ? 
                        -0.14844872f : 
                        0.011750813f) : 
                     (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <1.5f ? 
                        0.09202976f : 
                        -0.044736486f)))));
    return pred;
  } // constant pool size = 307B, number of visited nodes = 28, static init size = 1158B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {01000000 00100000 00000100 00001000 00001010 00000000 00011000 01110000 00100000 00000000 00100001 10001000 00000000 00000100 00000100 00100111 00001000 00000000 01100100 00100000 00100}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 4, 32, 16, 80, 0, 24, 14, 4, 0, -124, 17, 0, 32, 32, -28, 16, 0, 38, 4, 4};
  // {00000100 00000000 00010000 00000000 00000000 00001000 00000010 00000000 00000000 00001000 10001100 00000000 10000001 00000010 00010000 00000000 01000000 00000000 00000000 00000000 10000}
  public static final byte[] GRPSPLIT4 = new byte[] {32, 0, 8, 0, 0, 16, 64, 0, 0, 16, 49, 0, -127, 64, 8, 0, 2, 0, 0, 0, 1};
  // {01000000 00000000 00000000 00000000 00000000 00000000 00010000 01100000 00100000 00000000 00100001 10000000 00000000 00000000 00000000 00100001 00001000 00000000 01000000 00100000 00100}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0, 0, 0, 8, 6, 4, 0, -124, 1, 0, 0, 0, -124, 16, 0, 2, 4, 4};
  // {11111101 01111111 11101111 11111111 11111101 11111101 01111100 10111101 11101110 00011111 01111100 00011101 11111110 01111111 11101111 00011111 00111111 10110101 11111111 11110001 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, -2, -9, -1, -65, -65, 62, -67, 119, -8, 62, -72, 127, -2, -9, -8, -4, -83, -1, -113, 31};
  // {11110111 01101011 11011111 11101011 11111101 11011101 01011111 11111011 10001111 00010100 10111101 10111010 11001100 11011100 11000111 00111011 01101111 11110111 10101011 11111011 11110}
  public static final byte[] GRPSPLIT7 = new byte[] {-17, -42, -5, -41, -65, -69, -6, -33, -15, 40, -67, 93, 51, 59, -29, -36, -10, -17, -43, -33, 15};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {...1 0-bits... 01111111 11011111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11101110 11111111 11111111 11111011 11111111 11111111 10111011 11111111 11101111 11111110 1111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-2, -5, -1, -1, 127, -1, -1, -1, -1, 119, -1, -1, -33, -1, -1, -35, -1, -9, 127, -1};
  // {...5 0-bits... 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111110 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11001111 11111111 10111111 1111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, 127, -1, -1, -1, -1, 127, -9, -1, -1, -1, -1, -1, -1, -13, -1, -3, -1, 15};
  // {...5 0-bits... 11111011 11111111 11011111 11111110 11111111 11101111 11111111 11110111 11100111 11011111 11111110 01111111 10011111 11111111 11111111 11111111 11111110 11110111 01110111 0}
  public static final byte[] GRPSPLIT11 = new byte[] {-33, -1, -5, 127, -1, -9, -1, -17, -25, -5, 127, -2, -7, -1, -1, -1, 127, -17, -18, 62};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_11_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <60.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <51.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <37.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (Double.isNaN(data[92]) || data[92 /* HTN (HYPERTENSION) */] <1.5f ? 
                        -0.11099771f : 
                        -0.033562087f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <26.5f ? 
                        -0.084423654f : 
                        0.083006814f)) : 
                 (data[108 /* ANTICOAGULANTS */] <1.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.08228286f : 
                        0.09741624f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.029304132f : 
                        0.13494112f))) : 
             (data[102 /* TOBACCO SMOKER */] <0.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 163, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 163, 0, data[2])) ? 
                        -0.13485669f : 
                        -0.08369418f) : 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.034388058f : 
                        0.13504967f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 163, 0, data[2])) ? 
                     (data[118 /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */] <2.5f ? 
                        -0.08431917f : 
                        -0.0042213257f) : 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <23.678438f ? 
                        0.058159262f : 
                        0.008200211f)))) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[61])) ? 
             (data[126 /* bmi_var */] <13.787953f ? 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.009561901f : 
                        0.07472354f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        0.009152712f : 
                        0.09868611f)) : 
                 (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        -0.035904355f : 
                        0.060487635f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                        -0.124790154f : 
                        0.09111395f))) : 
             (Double.isNaN(data[0]) || data[0 /* age */] <85.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 156, 5, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 156, 5, data[2])) ? 
                        -0.15100679f : 
                        0.0027228736f) : 
                     (Double.isNaN(data[108]) || data[108 /* ANTICOAGULANTS */] <7.5f ? 
                        0.09226206f : 
                        -0.016073035f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 156, 5, data[2])) ? 
                    -0.1693482f : 
                     (Double.isNaN(data[103]) || data[103 /* ANALGESICS */] <28.0f ? 
                        0.046893023f : 
                        -0.18404603f)))));
    return pred;
  } // constant pool size = 376B, number of visited nodes = 30, static init size = 1524B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000001 00000010 00000000 00000000 10100000 00000000 00000001 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 0, 2, 0, -128, 64, 0, 0, 5, 0, -128, 0, 0, 0, 0, 0};
  // {00010000 10100000 00000001 00000000 00100000 00000000 00000000 00000010 00010001 00100000 01100101 00000000 00000000 00000000 00010000 00000000 00001000 00001000 00000100 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 5, -128, 0, 4, 0, 0, 64, -120, 4, -90, 0, 0, 0, 8, 0, 16, 16, 32, 0, 0};
  // {01000100 00100000 00010100 00001000 00001010 00001000 00010010 01110000 00110000 00001000 00101000 10001000 10000001 00000110 00010100 01100110 11000000 00000000 00100100 00100000 100}
  public static final byte[] GRPSPLIT2 = new byte[] {34, 4, 40, 16, 80, 16, 72, 14, 12, 16, 20, 17, -127, 96, 40, 102, 3, 0, 36, 4, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000010 00000000 01000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000100 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 16, 64, 0, 2, 1, 0, 0, -128, 0, 0, 0, 0, 0, 32, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01111101 01111111 11111111 11110111 11110111 11111101 01111100 10111101 11101110 00010110 01111100 01011111 11111110 11111111 11111111 01011111 10111111 10110111 11111111 11110011 111}
  public static final byte[] GRPSPLIT5 = new byte[] {-66, -2, -1, -17, -17, -65, 62, -67, 119, 104, 62, -6, 127, -1, -1, -6, -3, -19, -1, -49, 7};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 11110111 11111111 11111111 11011111 00110111 01101111 11110111 11111111 11011110 11011111 10111011 01111111 11111111 11111111 11111111 01111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -17, -17, -1, -1, -5, -20, -10, -17, -1, 123, -5, -35, -2, -1, -1, -1, 30};
  // {01011111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-6, 0, 0, 0};
  // {11111011 11111111 11111111 11111111 11111111 01111111 01111111 11110111 11101111 10111111 11111101 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111011 11111111 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -1, -1, -1, -1, -2, -2, -17, -9, -3, -65, -1, -1, 127, -1, -1, -1, -1, -33, -1, 31};
  // {11111111 01111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 01111111 11111111 11111111 10111111 11111011 11111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -2, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -9, -2, -1, -1, -3, -33, 31};
  // {...5 0-bits... 11110001 11111101 11111111 11111111 11101111 11101111 01111111 11111111 11101111 11101111 11011111 11111111 11111111 11101111 11111011 00001111 11111111 11110111 1111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-113, -65, -1, -1, -9, -9, -2, -1, -9, -9, -5, -1, -1, -9, -33, -16, -1, -17, -1, 15};
  // {...5 0-bits... 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 10011111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, -1, -9, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -7, -1, -1, -1, 15};
  // {...5 0-bits... 11111111 11111111 11111111 11111111 11111111 10111111 11111101 11111111 11110111 11111111 11011110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -1, -1, -3, -65, -1, -17, -1, 123, -1, -1, -1, -1, -1, -1, -1, -1, 15};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_12_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <63.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <48.5f ? 
             (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                 (data[123 /* bmi_mean */] <51.989883f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.098220296f : 
                        0.054042444f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        -0.05896848f : 
                        0.119537316f)) : 
                 (Double.isNaN(data[124]) || data[124 /* bmi_max */] <29.366405f ? 
                    0.16571046f : 
                    0.0065512396f)) : 
             (Double.isNaN(data[125]) || data[125 /* bmi_min */] <21.169102f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 165, 0, data[2])) ? 
                     (data[90 /* ESSENTIAL HTN */] <2.5f ? 
                        -0.09278428f : 
                        0.002135992f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 165, 0, data[2])) ? 
                        0.040031917f : 
                        0.13153884f)) : 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 163, 0, data[2])) ? 
                        -0.09741881f : 
                        -0.03349301f) : 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                        -0.027602402f : 
                        0.06867827f)))) : 
         (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[4])) ? 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <27.18618f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(154, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 154, 5, data[2])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <4.6971874f ? 
                        3.8893614E-4f : 
                        0.0749022f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(154, 5, data[2]) || (GenModel.bitSetIsInRange(154, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 154, 5, data[2])) ? 
                        0.099297054f : 
                        0.16353309f)) : 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.066041306f : 
                        0.087056056f) : 
                     (data[125 /* bmi_min */] <27.241562f ? 
                        -0.045661528f : 
                        0.071384974f))) : 
             (data[86 /* CATARACT. */] <0.5f ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (!Double.isNaN(data[14 /* hcc_18 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[14])) ? 
                        -0.025930913f : 
                        0.03337067f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <86.5f ? 
                        0.09522874f : 
                        -0.013222612f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <92.5f ? 
                     (data[84 /* ASTIGMATISM. */] <0.5f ? 
                        0.10829914f : 
                        0.08128342f) : 
                     (data[123 /* bmi_mean */] <28.09539f ? 
                        -0.16335969f : 
                        -0.001151227f)))));
    return pred;
  } // constant pool size = 290B, number of visited nodes = 29, static init size = 1032B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 01000000 00000000 00000000 00100000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 10100000 00000000 00000000 01000010 00000000 01000000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 2, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 0, 66, 0, 2, 0, 0};
  // {00010000 10000000 00000001 00000000 00000000 00000000 00000000 00000010 00000000 00000001 00100000 00000000 00000000 00000000 00000000 00000001 10000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 1, -128, 0, 0, 0, 0, 64, 0, -128, 4, 0, 0, 0, 0, -128, 1, 16, 0, 0, 0};
  // {11111101 11111111 11111111 11011111 11111101 01111111 01011100 10100111 11101010 00111111 11111101 11111111 11111110 11110111 11001111 01011111 11111111 10110111 11111111 11111011 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -1, -1, -5, -65, -2, 58, -27, 87, -4, -65, -1, 127, -17, -13, -6, -1, -19, -1, -33, 31};
  // {11111011 11101111 11111111 11110111 11110111 11110111 11111111 11111111 11111111 11111110 11011111 11110111 11111111 11111110 11111111 10111111 01111111 11111111 11111111 11111111 01111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -9, -1, -17, -17, -17, -1, -1, -1, 127, -5, -17, -1, 127, -1, -3, -2, -1, -1, -1, 30};
  // {01000100 01100000 00010100 00100010 00101010 00000000 00111000 01110010 01110000 00000000 00101100 10001000 00000001 00010100 00010101 00110111 01001000 00011000 00100100 00100000 101}
  public static final byte[] GRPSPLIT5 = new byte[] {34, 6, 40, 68, 84, 0, 28, 78, 14, 0, 52, 17, -128, 40, -88, -20, 18, 24, 36, 4, 5};
  // {01000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-94, 0, 0, 0};
  // {11001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-13, 0, 0, 0};
  // {...5 0-bits... 00001000 00000010 10000000 00010010 00000001 00001001 00000000 00000000 01000001 00000000 00000000 01000000 00010000 10100000 10000000 00000000 00000000 10000000 00000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 64, 1, 72, -128, -112, 0, 0, -126, 0, 0, 2, 8, 5, 1, 0, 0, 1, 0, 2};
  // {...5 0-bits... 00000000 00000000 10000000 00000010 00000000 00000001 00000000 00000000 00000000 00000000 00000000 01000000 00010000 10000000 10000000 00000000 00000000 10000000 00000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 1, 64, 0, -128, 0, 0, 0, 0, 0, 2, 8, 1, 1, 0, 0, 1, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_13_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <63.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <51.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <28.4375f ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.079799436f : 
                        0.15971538f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        0.011094916f : 
                        0.20710975f)) : 
                 (data[123 /* bmi_mean */] <31.035572f ? 
                    0.16275886f : 
                    0.0102515975f)) : 
             (Double.isNaN(data[125]) || data[125 /* bmi_min */] <21.169102f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 163, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 163, 0, data[2])) ? 
                        -0.1338711f : 
                        -0.010309512f) : 
                     (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <1.5f ? 
                        0.04853271f : 
                        -0.08470684f)) : 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <6.25f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 0, data[2]) || (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 161, 0, data[2])) ? 
                        -0.051819593f : 
                        0.02436367f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 0, data[2]) || (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 161, 0, data[2])) ? 
                        -0.11907387f : 
                        0.03560133f)))) : 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <16.910156f ? 
             (data[126 /* bmi_var */] <17.234941f ? 
                 (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        -0.09310012f : 
                        0.005916541f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <88.5f ? 
                        0.09116861f : 
                        -0.03987264f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 165, 0, data[2])) ? 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        0.01632675f : 
                        0.07664198f) : 
                     (data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.14778525f : 
                        0.10458416f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                 (data[3 /* packYears */] <37.26233f ? 
                     (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[4])) ? 
                        -0.23379453f : 
                        -0.077757835f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(152, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 152, 1, data[2])) ? 
                        -0.06298754f : 
                        0.11239118f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 165, 0, data[2])) ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <86.5f ? 
                        0.07516109f : 
                        0.018761355f) : 
                     (!Double.isNaN(data[47 /* hcc_84 */]) && (GenModel.bitSetIsInRange(32, 0, data[47]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[47])) ? 
                        0.047193762f : 
                        0.13250257f)))));
    return pred;
  } // constant pool size = 378B, number of visited nodes = 29, static init size = 1560B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00010000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00100100 00000000 00000000 00100000 00000000 00000000 00001010 00000000 00000000 10000000 001010}
  public static final byte[] GRPSPLIT1 = new byte[] {8, 0, 0, 0, 4, 0, 0, 0, 0, 0, 36, 0, 0, 4, 0, 0, 80, 0, 0, 1, 20};
  // {11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, 63};
  // {11111101 11111111 11111111 11111111 11111101 01110111 01011110 11110111 11101010 00111110 01111101 11111111 11111110 11110111 11001111 01011111 11111111 10110111 11111111 11111011 111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -1, -1, -1, -65, -18, 122, -17, 87, 124, -66, -1, 127, -17, -13, -6, -1, -19, -1, -33, 7};
  // {00000000 00000000 00000000 00000000 00000010 00001000 10000000 00000000 00000000 11000001 10000010 00000000 00000001 00000000 00000000 00100000 00000000 00001000 00000000 00000000 000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 64, 16, 1, 0, 0, -125, 65, 0, -128, 0, 0, 4, 0, 16, 0, 0, 0};
  // {01000000 01100000 00010100 00100010 00101010 00000000 00111000 01110000 00100000 00000000 00100000 00001100 00000000 00010100 00010101 00110110 01000000 00011000 00100000 01100000 1}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 6, 40, 68, 84, 0, 28, 14, 4, 0, 4, 48, 0, 40, -88, 108, 2, 24, 4, 6, 1};
  // {11111111 01111111 11101110 11110111 11111111 11111111 01111111 11111111 11111111 10110111 11111110 11110111 11111111 11111111 11111111 11111101 10111011 11111111 11111111 11111011 0}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -2, 119, -17, -1, -1, -2, -1, -1, -19, 127, -17, -1, -1, -1, -65, -35, -1, -1, -33, 0};
  // {11111111 11101111 11011110 11001011 11111111 11011101 01011111 11111011 10011111 00010100 10111111 10111111 11101101 11011111 11000111 01111011 11101111 11110111 11101111 11111011 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -9, 123, -45, -1, -69, -6, -33, -7, 40, -3, -3, -73, -5, -29, -34, -9, -17, -9, -33, 31};
  // {11111011 01101111 11111111 11111111 11111111 01111111 01111111 11101111 11101111 10111111 01111101 11110111 11111110 11111111 11111111 01111111 01111111 11111111 10111111 11111011 01111}
  public static final byte[] GRPSPLIT8 = new byte[] {-33, -10, -1, -1, -1, -2, -2, -9, -9, -3, -66, -17, 127, -1, -1, -2, -2, -1, -3, -33, 30};
  // {01011111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-6, 0, 0, 0};
  // {10111111 11111111 11111111 11111111 11111111 01111111 11111111 11110111 11011111 01110111 01111111 11111111 11111111 11011111 01011111 00111111 11111111 11111101 11111011 01111111 11111}
  public static final byte[] GRPSPLIT10 = new byte[] {-3, -1, -1, -1, -1, -2, -1, -17, -5, -18, -2, -1, -1, -5, -6, -4, -1, -65, -33, -2, 31};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-127, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 01000001 00000000 00000000 00000000 00000000 00000001 01000000 00000000 00000000 00000000 0000000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 0, 0, 0, 0, 8, -126, 0, 0, 0, 0, -128, 2, 0, 0, 0, 0};
  // {11111011 11101111 11101111 10111111 01100101 11110111 01011001 11101111 11101111 11111111 11100101 11110111 11111000 11111110 11111111 11011110 11110111 11110111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT13 = new byte[] {-33, -9, -9, -3, -90, -17, -102, -9, -9, -1, -89, -17, 31, 127, -1, 123, -17, -17, -1, -1, 31};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_14_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <62.5f ? 
         (data[0 /* age */] <44.5f ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
                     (data[115 /* ELECT/CALORIC/H2O */] <3.5f ? 
                        -0.10122785f : 
                        -0.07092398f) : 
                    0.04278977f) : 
                 (data[0 /* age */] <34.0f ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <26.5f ? 
                        -0.12165276f : 
                        -0.022694975f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(122, 8, data[2]) || (GenModel.bitSetIsInRange(122, 8, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 122, 8, data[2])) ? 
                        -0.0017009599f : 
                        0.17892925f))) : 
             (data[116 /* GASTROINTESTINAL */] <7.5f ? 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.047716774f : 
                        0.06548559f) : 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                        -0.019577857f : 
                        0.06345108f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                     (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[17])) ? 
                        -0.10189949f : 
                        0.010948608f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
                        0.055577785f : 
                        0.15581219f)))) : 
         (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[17])) ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <21.023438f ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(153, 5, data[2]) || (GenModel.bitSetIsInRange(153, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 153, 5, data[2])) ? 
                        -0.077934414f : 
                        0.19405264f) : 
                     (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <11.5f ? 
                        0.070974335f : 
                        -0.13764864f)) : 
                 (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <4.0f ? 
                     (data[0 /* age */] <69.5f ? 
                        0.011102184f : 
                        0.09272451f) : 
                     (Double.isNaN(data[126]) || data[126 /* bmi_var */] <3.7752345f ? 
                        -0.08490686f : 
                        0.08287216f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 166, 0, data[2])) ? 
                 (data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <2.3535938f ? 
                        -0.034000285f : 
                        0.03496134f) : 
                     (data[0 /* age */] <70.5f ? 
                        -0.0041797175f : 
                        0.071858585f)) : 
                 (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <90.5f ? 
                        0.052946508f : 
                        -0.031534314f) : 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <7.3125f ? 
                        -0.02517216f : 
                        0.045059226f)))));
    return pred;
  } // constant pool size = 268B, number of visited nodes = 30, static init size = 876B
  // {00000000 10000000 00000000 00000000 00000000 00000000 00100000 01000010 00000000 00000001 00001010 00000000 00000000 00100000 00010000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 1, 0, 0, 0, 0, 4, 66, 0, -128, 80, 0, 0, 4, 8, 0, 2, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {...8 0-bits... 11111111 11111111 11111111 11111111 11111111 11011111 11111101 11111111 11111110 11110111 11111111 11111111 11111111 11111111 11}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -5, -65, -1, 127, -17, -1, -1, -1, -1, -1, 3};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-126, 0, 0, 0};
  // {11111011 11111111 11101111 11111101 11111111 10110111 01110010 11110111 11011100 00011010 01111100 11101101 11111100 11111111 11001111 00011111 00111111 11110111 11111111 11101000 111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -1, -9, -65, -1, -19, 78, -17, 59, 88, 62, -73, 63, -1, -13, -8, -4, -17, -1, 23, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111111 11001111 11111111 11111111 11110111 11111110 11111111 10101111 10101111 11110111 11111111 11110111 11111111 11011110 11111111 11101111 11111111 11111111 11111111 11111111 011111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -13, -1, -1, -17, 127, -1, -11, -11, -17, -1, -17, -1, 123, -1, -9, -1, -1, -1, -1, 62};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 00100000 00000000 00000000 01000000 00000000 00000000 10000001 00000000 00000000 00010000 00110000 00000000 00000000 00000100 00000000 10001001 00000000 00000000 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 0, 0, 2, 0, 0, -127, 0, 0, 8, 12, 0, 0, 32, 0, -111, 0, 0, 0, 1};
  // {11111110 01101111 11001110 11001011 11111101 01001101 01011111 11111111 10000111 00110100 11111101 10110110 11001100 11011111 11001111 00111011 01101111 11110101 10101111 01111011 111101}
  public static final byte[] GRPSPLIT9 = new byte[] {127, -10, 115, -45, -65, -78, -6, -1, -31, 44, -65, 109, 51, -5, -13, -36, -10, -81, -11, -34, 47};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_15_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <53.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <28.564453f ? 
             (Double.isNaN(data[125]) || data[125 /* bmi_min */] <17.05922f ? 
                 (data[0 /* age */] <35.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 160, 1, data[2])) ? 
                        -0.100178495f : 
                        -0.012803484f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(160, 1, data[2]) || (GenModel.bitSetIsInRange(160, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 160, 1, data[2])) ? 
                        -0.010429265f : 
                        0.099496774f)) : 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                        -0.07972143f : 
                        0.06256879f) : 
                     (Double.isNaN(data[117]) || data[117 /* HORMONES */] <5.0f ? 
                        0.036120735f : 
                        0.1770242f))) : 
             (Double.isNaN(data[126]) || data[126 /* bmi_var */] <0.7525401f ? 
                 (data[126 /* bmi_var */] <0.46151873f ? 
                    0.06419399f : 
                     (data[0 /* age */] <51.5f ? 
                        0.2056892f : 
                        0.128498f)) : 
                -0.0104189655f)) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[61])) ? 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <26.930557f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 165, 0, data[2])) ? 
                     (data[114 /* EENT PREPS */] <3.5f ? 
                        -0.075546935f : 
                        0.025886199f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                        0.02601979f : 
                        0.06453819f)) : 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        -0.06061591f : 
                        -0.006723451f) : 
                     (!Double.isNaN(data[70 /* hcc_137 */]) && (GenModel.bitSetIsInRange(32, 0, data[70]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[70])) ? 
                        -0.18357591f : 
                        0.062211674f))) : 
             (!Double.isNaN(data[75 /* hcc_167 */]) && (GenModel.bitSetIsInRange(32, 0, data[75]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[75])) ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <26.419313f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.08547228f : 
                        0.12691694f) : 
                    -0.26285747f) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 166, 0, data[2])) ? 
                     (!Double.isNaN(data[52 /* hcc_96 */]) && (GenModel.bitSetIsInRange(32, 0, data[52]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[52])) ? 
                        -0.090277486f : 
                        0.03176862f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <90.0f ? 
                        0.078646384f : 
                        -0.0029504676f)))));
    return pred;
  } // constant pool size = 283B, number of visited nodes = 26, static init size = 1062B
  // {...1 0-bits... 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000010 00000000 00000000 00000001 00000000 00000000 00000000 0000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 4, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0};
  // {...1 0-bits... 00100001 01000000 00000010 00010000 00010100 00000000 00000000 00000100 00100011 01000000 11000010 00010000 00000000 00000000 00000000 00000010 00010000 00010000 00001000 0000100}
  public static final byte[] GRPSPLIT1 = new byte[] {-124, 2, 64, 8, 40, 0, 0, 32, -60, 2, 67, 8, 0, 0, 0, 64, 8, 8, 16, 16};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00100000 00000000 00101000 01000000 00000000 00000000 00101100 00000000 00000000 00100000 00000000 00000000 00001010 00000000 01000000 10000000 001010}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 4, 0, 20, 2, 0, 0, 52, 0, 0, 4, 0, 0, 80, 0, 2, 1, 20};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {11100101 01101111 01011110 11110110 11111111 11011111 01111010 11111110 11010110 01111100 11111101 10111010 11011101 11010101 11001111 01111011 11101011 10110101 10101111 11111011 11111}
  public static final byte[] GRPSPLIT5 = new byte[] {-89, -10, 122, 111, -1, -5, 94, 127, 107, 62, -65, 93, -69, -85, -13, -34, -41, -83, -11, -33, 31};
  // {11111011 11111111 11111111 10101111 11111101 01111111 11011101 11111111 10101111 10011111 00111110 11110111 11111110 11111110 11111111 11111101 11110111 11111110 11111011 11111111 01111}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, -1, -1, -11, -65, -2, -69, -1, -11, -7, 124, -17, 127, 127, -1, -65, -17, 127, -33, -1, 30};
  // {10111111 11111001 11111110 10111011 10111111 01110101 01001111 11101011 11100001 00010110 11111011 11111111 00101100 01111110 11010111 00111111 01100111 11110111 11101011 00101011 11110}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -97, 127, -35, -3, -82, -14, -41, -121, 104, -33, -1, 52, 126, -21, -4, -26, -17, -41, -44, 15};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {11111111 10101111 11101111 11111111 11111101 01111111 01111011 11101111 11111111 01111111 01111100 11110111 11111110 11111111 01111111 10011100 11111111 11111110 11111111 11111111 011111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -11, -9, -1, -65, -2, -34, -9, -1, -2, 62, -17, 127, -1, -2, 57, -1, 127, -1, -1, 62};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_16_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <65.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <12.339844f ? 
             (data[116 /* GASTROINTESTINAL */] <7.5f ? 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                        -0.06463295f : 
                        0.004971982f) : 
                     (data[0 /* age */] <47.5f ? 
                        -0.06484181f : 
                        0.04547629f)) : 
                 (data[0 /* age */] <46.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <37.5f ? 
                        -0.08438496f : 
                        -0.018588876f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 163, 0, data[2])) ? 
                        0.019942148f : 
                        0.13331579f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                 (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                        -0.19203824f : 
                        -0.07895851f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
                        -0.054494213f : 
                        0.12051577f)) : 
                 (Double.isNaN(data[120]) || data[120 /* SEDATIVE/HYPNOTICS */] <5.5f ? 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <42.819374f ? 
                        0.044451397f : 
                        -0.07068174f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <61.5f ? 
                        -0.18137078f : 
                        0.040353995f)))) : 
         (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[17])) ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <22.851562f ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(153, 5, data[2]) || (GenModel.bitSetIsInRange(153, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 153, 5, data[2])) ? 
                        -0.066095576f : 
                        0.17768376f) : 
                     (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <11.5f ? 
                        0.07460114f : 
                        -0.105055176f)) : 
                 (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <4.5f ? 
                     (!Double.isNaN(data[11 /* hcc_11 */]) && (GenModel.bitSetIsInRange(32, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[11])) ? 
                        -0.078654416f : 
                        0.0822762f) : 
                     (data[126 /* bmi_var */] <2.8708632f ? 
                        -0.19251364f : 
                        0.019825267f))) : 
             (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 166, 0, data[2])) ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.014588133f : 
                        0.06821202f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 166, 0, data[2])) ? 
                        0.0564486f : 
                        0.15177973f)) : 
                 (!Double.isNaN(data[29 /* hcc_48 */]) && (GenModel.bitSetIsInRange(32, 0, data[29]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[29])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 166, 0, data[2])) ? 
                        -0.24302927f : 
                        -0.0055508697f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 166, 0, data[2])) ? 
                        0.044376787f : 
                        0.11100478f)))));
    return pred;
  } // constant pool size = 370B, number of visited nodes = 31, static init size = 1464B
  // {00000000 00000000 00010100 00110010 00101000 00000000 00111000 01110010 10100000 00000100 00010000 00000000 00000000 00110100 00010100 00110111 01000000 00010001 01100100 00100000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 40, 76, 20, 0, 28, 78, 5, 32, 8, 0, 0, 44, 40, -20, 2, -120, 38, 4, 0};
  // {11111011 11001111 11101111 11111101 11110111 10111111 01110010 10100111 11001100 00010011 11111100 11101101 11111100 11111110 11101111 00111111 01111111 11110111 11111111 11101001 011}
  public static final byte[] GRPSPLIT1 = new byte[] {-33, -13, -9, -65, -17, -3, 78, -27, 51, -56, 63, -73, 63, 127, -9, -4, -2, -17, -1, -105, 6};
  // {11111111 01111111 11111110 11110111 11111111 11111111 01111011 11110111 11111011 00110111 01111110 11110111 11111111 11111111 11111111 01111101 10111011 11110111 11111111 11111011 011111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, 127, -17, -1, -1, -34, -17, -33, -20, 126, -17, -1, -1, -1, -66, -35, -17, -1, -33, 62};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-96, 0, 0, 0};
  // {00000000 10000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 01001000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 100000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0, 0, 0, 1, 0, 0, 18, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000100 00000000 00000000 11000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 33, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 00100000 00000000 00000000 01000000 00000000 00000000 10000001 00000000 00000000 00010000 00010000 00000000 00000000 00000100 00000000 10001001 00000000 00000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {4, 0, 0, 2, 0, 0, -127, 0, 0, 8, 8, 0, 0, 32, 0, -111, 0, 0, 0, 1};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {01001111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-14, 0, 0, 0};
  // {01000000 01010001 00000100 01011000 10011000 00000000 01001100 00100000 00100110 00000000 00001000 00000010 00001000 10000101 00000100 00000010 00000000 00000100 00100000 00000110 100000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, -118, 32, 26, 25, 0, 50, 4, 100, 0, 16, 64, 16, -95, 32, 64, 0, 32, 4, 96, 1};
  // {01000000 00000001 00000100 01011000 00000000 00000000 00001100 00000000 00000100 00000000 00001000 00000010 00001000 00000000 00000000 00000000 00000000 00000100 00000000 00000010 000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, -128, 32, 26, 0, 0, 48, 0, 32, 0, 16, 64, 16, 0, 0, 0, 0, 32, 0, 64, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {11111111 11101111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111110 01111111 10111110 11011111 11111111 11111111 11011111 11111111 11111111 11011111 11111111 111111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -9, -1, -1, -17, -1, -1, -1, -1, 127, -2, 125, -5, -1, -1, -5, -1, -1, -5, -1, 63};
  // {11111011 01001111 11001111 10001011 11110111 11101101 01010001 11101111 10011111 00111001 00100100 11110111 11111111 11011100 01001111 00101100 10100111 11111111 10111011 00111011 111101}
  public static final byte[] GRPSPLIT14 = new byte[] {-33, -14, -13, -47, -17, -73, -118, -9, -7, -100, 36, -17, -1, 59, -14, 52, -27, -1, -35, -36, 47};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_17_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <63.5f ? 
         (data[0 /* age */] <43.5f ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (data[123 /* bmi_mean */] <46.367996f ? 
                     (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <1.5f ? 
                        -0.096788555f : 
                        -0.034570526f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 0, data[2]) || (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 161, 0, data[2])) ? 
                        -0.05769471f : 
                        0.124658406f)) : 
                 (data[124 /* bmi_max */] <27.144218f ? 
                    -0.08148812f : 
                    0.21261245f)) : 
             (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                     (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <4.5f ? 
                        -0.075746305f : 
                        0.14294735f) : 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                        -0.028961923f : 
                        0.1706081f)) : 
                 (data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.025506213f : 
                        0.07376661f) : 
                     (data[92 /* HTN (HYPERTENSION) */] <1.5f ? 
                        0.05708356f : 
                        0.012752825f)))) : 
         (data[102 /* TOBACCO SMOKER */] <1.5f ? 
             (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (!Double.isNaN(data[14 /* hcc_18 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[14])) ? 
                        -0.042381927f : 
                        0.008807993f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                        -0.100557595f : 
                        0.065413035f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <92.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 156, 5, data[2])) ? 
                        -0.16755898f : 
                        0.08232284f) : 
                    -0.13332886f)) : 
             (data[88 /* COUGH */] <1.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 158, 5, data[2])) ? 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        -0.1502944f : 
                        0.011489835f) : 
                     (Double.isNaN(data[108]) || data[108 /* ANTICOAGULANTS */] <8.5f ? 
                        0.09197611f : 
                        -0.112595215f)) : 
                 (data[106 /* ANTIASTHMATICS */] <2.0f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 158, 5, data[2])) ? 
                        -0.11238555f : 
                        0.008711338f) : 
                     (data[3 /* packYears */] <18.28125f ? 
                        -0.07613917f : 
                        0.08490436f)))));
    return pred;
  } // constant pool size = 285B, number of visited nodes = 28, static init size = 1026B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00100000 01000000 00000000 00000001 00000010 00000000 00000000 00100000 00000000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 4, 2, 0, -128, 64, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0};
  // {00000000 10100000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000001 10000000 00001000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 5, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 8, -128, 1, 16, 0, 0, 0};
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-69, 0, 0, 0};
  // {01111011 11011111 11111111 10111111 01101111 01111111 01111011 11110101 11111101 00010110 01111111 11111101 10111101 00111111 11011111 00111111 11111111 11111111 11111111 11111101 111110}
  public static final byte[] GRPSPLIT3 = new byte[] {-34, -5, -1, -3, -10, -2, -34, -81, -65, 104, -2, -65, -67, -4, -5, -4, -1, -1, -1, -65, 31};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111110 11111111 11101111 11101111 11111101 11101111 11111111 11111111 11101111 11111111 11111111 11111111 11111101 11111111 11001111 11011111 11110111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {127, -1, -9, -9, -65, -9, -1, -1, -9, -1, -1, -1, -65, -1, -13, -5, -17, -1, -1, -1, 31};
  // {...5 0-bits... 11111011 11111111 11111110 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11001111 11111111 10111111 1111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-33, -1, 127, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -13, -1, -3, -1, 15};
  // {...5 0-bits... 11111111 11111101 11111111 11111110 11111110 11111111 11111111 11111111 11101111 11111111 11111110 11111111 11111111 11101011 11111011 01101111 11111111 11111111 11111111 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -65, -1, 127, 127, -1, -1, -1, -9, -1, 127, -1, -1, -41, -33, -10, -1, -1, -1, 63};
  // {10000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-127, 0, 0, 0};
  // {...5 0-bits... 11101111 11111111 11011111 11111111 11111111 11101111 11111101 11110101 11101111 11111111 10111110 11111111 11011111 11111111 11101111 11111111 11111110 11110111 01110111 0}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -1, -5, -1, -1, -9, -65, -81, -9, -1, 125, -1, -5, -1, -9, -1, 127, -17, -18, 62};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_18_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <53.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <28.564453f ? 
             (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[8])) ? 
                 (Double.isNaN(data[125]) || data[125 /* bmi_min */] <17.05922f ? 
                     (data[0 /* age */] <32.5f ? 
                        -0.082598224f : 
                        -3.960039E-4f) : 
                     (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <6.5f ? 
                        -0.07011919f : 
                        0.13190502f)) : 
                 (data[112 /* COUGH/COLD PREPARATIONS */] <1.5f ? 
                     (data[124 /* bmi_max */] <29.839844f ? 
                        0.15036076f : 
                        -0.022049503f) : 
                    0.19333817f)) : 
             (Double.isNaN(data[126]) || data[126 /* bmi_var */] <0.7525401f ? 
                 (data[123 /* bmi_mean */] <26.169544f ? 
                    0.032617755f : 
                     (data[116 /* GASTROINTESTINAL */] <1.5f ? 
                        0.17576201f : 
                        0.10897745f)) : 
                -0.0145676f)) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[61])) ? 
             (data[126 /* bmi_var */] <13.787953f ? 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.0046789637f : 
                        -0.042496335f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 165, 0, data[2])) ? 
                        -0.047319423f : 
                        0.07479381f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 165, 0, data[2])) ? 
                     (data[110 /* CARDIAC DRUGS */] <1.5f ? 
                        -0.13742864f : 
                        -0.0012968888f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 165, 0, data[2])) ? 
                        0.043343455f : 
                        0.10833014f))) : 
             (!Double.isNaN(data[75 /* hcc_167 */]) && (GenModel.bitSetIsInRange(32, 0, data[75]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[75])) ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <26.419313f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.07901663f : 
                        0.12152167f) : 
                    -0.21986179f) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
                     (data[110 /* CARDIAC DRUGS */] <1.5f ? 
                        -0.07217821f : 
                        0.08712341f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <85.5f ? 
                        0.06988135f : 
                        0.017063472f)))));
    return pred;
  } // constant pool size = 205B, number of visited nodes = 25, static init size = 618B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {11111111 11101111 11111110 10111101 11111111 11111111 11011111 11110111 11110111 01111111 11111111 11111111 01111111 01111110 11111111 11111111 01100111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -9, 127, -67, -1, -1, -5, -17, -17, -2, -1, -1, -2, 126, -1, -1, -26, -1, -1, -1, 31};
  // {11111101 01111111 11111111 11111111 11111111 01111111 01011110 11110110 11101110 11111111 11111101 11111111 11111111 11111111 11101111 01111111 11111111 10110111 10111111 11101011 11111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -2, -1, -1, -1, -2, 122, 111, 119, -1, -65, -1, -1, -1, -9, -2, -1, -19, -3, -41, 31};
  // {11111011 11101111 11101111 11110111 11111111 11110101 11111111 11101101 11111011 00111110 11111111 11110111 11111110 11111110 11011111 10011111 11111111 11111111 11111011 11111111 01111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -9, -9, -17, -1, -81, -1, -73, -33, 124, -1, -17, 127, 127, -5, -7, -1, -1, -33, -1, 30};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111111 10101111 11101111 11111111 11111111 11111111 01111011 11111111 11111111 11111111 01111110 11110111 11111111 11111111 01111111 11011100 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -11, -9, -1, -1, -1, -34, -1, -1, -1, 126, -17, -1, -1, -2, 59, -1, -1, -1, -1, 63};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_19_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <66.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <12.339844f ? 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <18.258554f ? 
                 (data[0 /* age */] <40.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 163, 0, data[2])) ? 
                        -0.061857365f : 
                        0.12975898f) : 
                     (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[17])) ? 
                        -0.14572437f : 
                        0.02611928f)) : 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                        -0.08686525f : 
                        -0.034577265f) : 
                     (!Double.isNaN(data[28 /* hcc_47 */]) && (GenModel.bitSetIsInRange(32, 0, data[28]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[28])) ? 
                        -0.013566602f : 
                        0.12410286f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
                 (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <22.722198f ? 
                        -0.09223782f : 
                        -0.19309796f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 166, 0, data[2])) ? 
                        -0.08002077f : 
                        0.07627423f)) : 
                 (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[17])) ? 
                     (data[125 /* bmi_min */] <35.314064f ? 
                        -0.10217768f : 
                        0.010871323f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 166, 0, data[2])) ? 
                        0.03651805f : 
                        0.12772858f)))) : 
         (data[126 /* bmi_var */] <18.958437f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <10.96875f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.09657548f : 
                        0.13954942f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 165, 0, data[2])) ? 
                        0.0040233578f : 
                        0.083071664f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 165, 0, data[2])) ? 
                     (data[3 /* packYears */] <38.847656f ? 
                        -0.12044541f : 
                        0.0027366993f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 165, 0, data[2])) ? 
                        0.05145239f : 
                        0.1275897f))) : 
             (data[99 /* PRESBYOPIA */] <0.5f ? 
                 (data[119 /* PSYCHOTHERAPEUTIC DRUGS */] <1.5f ? 
                     (Double.isNaN(data[122]) || data[122 /* UNCLASSIFIED DRUG PRODUCTS */] <1.5f ? 
                        0.11178516f : 
                        -0.051454645f) : 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <27.672098f ? 
                        0.06407582f : 
                        -0.09924875f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(159, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 159, 5, data[2])) ? 
                     (data[109 /* ANTIHYPERGLYCEMICS */] <3.5f ? 
                        -0.2161177f : 
                        0.037479255f) : 
                     (data[3 /* packYears */] <16.875f ? 
                        -0.037197802f : 
                        0.080042325f)))));
    return pred;
  } // constant pool size = 370B, number of visited nodes = 31, static init size = 1464B
  // {00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00010000 00000001 10000000 00001000 00000000 00000000 000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 4, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 8, -128, 1, 16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {01000100 01100110 00010100 01010010 00111010 00011000 00111100 01111010 00110000 00000100 10111100 00001100 00000001 10110110 00110100 00110110 01000010 00010001 01100100 11100000 101000}
  public static final byte[] GRPSPLIT3 = new byte[] {34, 102, 40, 74, 92, 24, 60, 94, 12, 32, 61, 48, -128, 109, 44, 108, 66, -120, 38, 7, 5};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111111 01111111 11111110 11110111 11111111 11111111 11111011 11110111 11111011 00110111 01101110 11110111 11111111 11111111 11111111 01111111 11111011 11110111 11111111 11111011 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -2, 127, -17, -1, -1, -33, -17, -33, -20, 118, -17, -1, -1, -1, -2, -33, -17, -1, -33, 63};
  // {00000101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-96, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000100 00001000 00000000 11000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 32, 16, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111011 11101111 11111111 11111111 11110111 11111111 01111101 11101101 11111101 11111111 11111101 01111111 11111110 11111110 11111111 11011101 01111111 11111111 11111111 11111111 011111}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -9, -1, -1, -17, -1, -66, -73, -65, -1, -65, -2, 127, 127, -1, -69, -2, -1, -1, -1, 62};
  // {11111111 11111111 11011111 10001011 11111111 11011101 01101111 11111011 10011111 00010100 10111111 10111111 11101101 11111101 11000111 01111011 11101111 11110110 11101111 11111011 11110}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -5, -47, -1, -69, -10, -33, -7, 40, -3, -3, -73, -65, -29, -34, -9, 111, -9, -33, 15};
  // {11000011 01000000 00000100 00001010 00011100 10000001 01001000 00101011 00000101 00000000 00100100 10000000 00001000 00000000 10000000 00000011 00100000 00100000 10100001 11001010 00100}
  public static final byte[] GRPSPLIT11 = new byte[] {-61, 2, 32, 80, 56, -127, 18, -44, -96, 0, 36, 1, 16, 0, 1, -64, 4, 4, -123, 83, 4};
  // {10111111 11111111 11101111 11111111 11111111 01111101 11111111 11111111 11001111 01110111 01111111 11111111 11111111 11011111 01111111 00111110 11111111 11111101 11111111 01111111 11111}
  public static final byte[] GRPSPLIT12 = new byte[] {-3, -1, -9, -1, -1, -66, -1, -1, -13, -18, -2, -1, -1, -5, -2, 124, -1, -65, -1, -2, 31};
  // {11111001 11001111 11111111 11111111 11100101 11110111 01011101 11100101 11111111 11111111 11110101 11110111 11111000 11111010 11011111 11011111 11100111 11111111 11111111 10111101 11111}
  public static final byte[] GRPSPLIT13 = new byte[] {-97, -13, -1, -1, -89, -17, -70, -89, -1, -1, -81, -17, 31, 95, -5, -5, -25, -1, -1, -67, 31};
  // {...5 0-bits... 11101111 11111111 11111111 11111111 11101111 11111011 11111101 11111101 11111111 11101111 10111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 01111111 11}
  public static final byte[] GRPSPLIT14 = new byte[] {-9, -1, -1, -1, -9, -33, -65, -65, -1, -9, -3, -1, -1, -1, -9, -1, -1, -1, -2, 127};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_20_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <55.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <28.564453f ? 
             (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[8])) ? 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <17.05922f ? 
                        -0.013658968f : 
                        -0.059743475f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        0.02517399f : 
                        0.14946231f)) : 
                 (data[124 /* bmi_max */] <28.81086f ? 
                    0.007415713f : 
                     (data[105 /* ANTIARTHRITICS */] <2.5f ? 
                        0.28780672f : 
                        0.026531948f))) : 
             (data[94 /* HYPERLIPIDEMIA */] <1.5f ? 
                 (data[116 /* GASTROINTESTINAL */] <2.5f ? 
                     (data[124 /* bmi_max */] <28.235624f ? 
                        0.059905272f : 
                        0.13899213f) : 
                     (Double.isNaN(data[126]) || data[126 /* bmi_var */] <0.7722174f ? 
                        0.0762826f : 
                        -0.14999771f)) : 
                 (data[114 /* EENT PREPS */] <8.0f ? 
                     (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <0.5f ? 
                        0.15836172f : 
                        0.09148609f) : 
                    0.06081169f))) : 
         (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
             (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[17])) ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(158, 0, data[2]) || (GenModel.bitSetIsInRange(158, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 158, 0, data[2])) ? 
                        -0.147466f : 
                        -0.042469528f) : 
                     (Double.isNaN(data[110]) || data[110 /* CARDIAC DRUGS */] <3.5f ? 
                        0.053985856f : 
                        -0.12181671f)) : 
                 (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                        -0.040055092f : 
                        0.019006396f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <90.5f ? 
                        0.03494167f : 
                        -0.039181862f))) : 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <6.3984375f ? 
                 (Double.isNaN(data[0]) || data[0 /* age */] <72.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(161, 4, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 161, 4, data[2])) ? 
                        -0.08606044f : 
                        0.027404966f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 4, data[2]) || (GenModel.bitSetIsInRange(161, 4, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 161, 4, data[2])) ? 
                        -0.016185662f : 
                        0.1256816f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 4, data[2]) || (GenModel.bitSetIsInRange(161, 4, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 161, 4, data[2])) ? 
                     (data[115 /* ELECT/CALORIC/H2O */] <10.5f ? 
                        0.020155037f : 
                        -0.17314857f) : 
                     (data[3 /* packYears */] <12.448486f ? 
                        0.155106f : 
                        0.09044811f)))));
    return pred;
  } // constant pool size = 269B, number of visited nodes = 29, static init size = 906B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111110 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, 127, -1, -1, -1, -1, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00111111 11001111 11101111 11111111 11110111 11111111 11011111 11101011 11110111 10010111 10000011 11111111 11111101 11111011 11110111 11111111 01111111 10111111 11111111 111011}
  public static final byte[] GRPSPLIT4 = new byte[] {-4, -13, -9, -1, -17, -1, -5, -41, -17, -23, -63, -1, -65, -33, -17, -1, -2, -3, -1, 55};
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-69, 0, 0, 0};
  // {11111010 01011111 11111110 10111111 11111111 01001111 01111001 11110111 11101111 00010111 11111110 11110111 11101101 01111111 11110111 01111011 01111111 11110111 11111111 11111011 11111}
  public static final byte[] GRPSPLIT6 = new byte[] {95, -6, 127, -3, -1, -14, -98, -17, -9, -24, 127, -17, -73, -2, -17, -34, -2, -17, -1, -33, 31};
  // {...4 0-bits... 00010100 00100000 00000000 00100001 00000000 00100010 10000011 00000001 00000000 00001001 01000000 10000000 00000000 01100001 01000010 01001000 00000000 00000010 00000000 00001}
  public static final byte[] GRPSPLIT7 = new byte[] {40, 4, 0, -124, 0, 68, -63, -128, 0, -112, 2, 1, 0, -122, 66, 18, 0, 64, 0, 16, 0};
  // {...4 0-bits... 00000000 00000000 00000000 00100001 10000001 00000000 10100000 10100001 01010000 01000110 00000000 00000000 00000000 00000000 00000110 01000000 10000000 01001100 01000000 00100}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, -124, -127, 0, 5, -123, 10, 98, 0, 0, 0, 0, 96, 2, 1, 50, 2, 68, 0};
  // {...4 0-bits... 10111111 11111111 11101111 11111111 11111111 11010111 11111111 11111111 11111111 01110111 11001111 01111111 11101101 11101101 11111101 11111011 11111111 11111111 11110111 11110}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, -1, -9, -1, -1, -21, -1, -1, -1, -18, -13, -2, -73, -73, -65, -33, -1, -1, -17, -17, 1};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_21_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <68.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <12.339844f ? 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <16.725313f ? 
                 (data[0 /* age */] <45.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 163, 0, data[2])) ? 
                        -0.044386093f : 
                        0.11150831f) : 
                     (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[17])) ? 
                        -0.13366234f : 
                        0.029177973f)) : 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.044633683f : 
                        0.025430702f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        -0.0959858f : 
                        0.08085202f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                 (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <62.5f ? 
                        -0.102939144f : 
                        -0.18731424f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
                        -0.05227299f : 
                        0.116967164f)) : 
                 (Double.isNaN(data[120]) || data[120 /* SEDATIVE/HYPNOTICS */] <5.5f ? 
                     (data[123 /* bmi_mean */] <22.724218f ? 
                        0.083511405f : 
                        0.029193152f) : 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <36.69922f ? 
                        -0.13574989f : 
                        0.067278154f)))) : 
         (Double.isNaN(data[0]) || data[0 /* age */] <95.5f ? 
             (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                     (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[17])) ? 
                        -0.022993207f : 
                        0.03840886f) : 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <3.65625f ? 
                        0.12928283f : 
                        0.08884011f)) : 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.029122712f : 
                        0.11950299f) : 
                     (Double.isNaN(data[115]) || data[115 /* ELECT/CALORIC/H2O */] <4.0f ? 
                        0.07183019f : 
                        -0.013328098f))) : 
             (data[0 /* age */] <97.5f ? 
                 (data[97 /* OSTEOPOROSIS */] <0.5f ? 
                     (Double.isNaN(data[95]) || data[95 /* HYPOTHYROIDISM */] <0.5f ? 
                        -0.0555726f : 
                        -0.11896972f) : 
                    -0.240815f) : 
                 (data[121 /* SKIN PREPS */] <0.5f ? 
                     (data[0 /* age */] <98.5f ? 
                        -0.030091941f : 
                        -0.19060765f) : 
                    0.06410202f))));
    return pred;
  } // constant pool size = 243B, number of visited nodes = 29, static init size = 750B
  // {00000000 10100000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000001 00000010 00000000 00000000 00000000 00010000 00000001 10000000 00001000 00000000 00000000 000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 5, 0, 0, 0, 0, 0, 64, 0, -128, 64, 0, 0, 0, 8, -128, 1, 16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {11111111 01111111 11111111 10111111 11111111 11111111 01111111 11110111 11110111 01111011 11111101 11110111 11111111 01111110 11111111 11111110 01100111 11111111 11111011 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, -1, -3, -1, -1, -2, -17, -17, -34, -65, -17, -1, 126, -1, 127, -26, -1, -33, -1, 63};
  // {11111111 01111111 11111110 11110111 11111111 11111111 01111011 11110111 11011011 01110111 01101110 11110111 11111111 11111111 11111111 01011111 11111011 11110101 11111111 11111011 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -2, 127, -17, -1, -1, -34, -17, -37, -18, 118, -17, -1, -1, -1, -6, -33, -81, -1, -33, 63};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-126, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000100 00001000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 0, 0, 0, 33, 16, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
  // {10000010 00000011 00000100 00001000 00000110 10000001 01011110 00101001 00000101 00000100 10110000 00000010 10001000 10000000 10011100 00000001 00100000 00000100 10000000 01001010 00111}
  public static final byte[] GRPSPLIT6 = new byte[] {65, -64, 32, 16, 96, -127, 122, -108, -96, 32, 13, 64, 17, 1, 57, -128, 4, 32, 1, 82, 28};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_22_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <53.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <42.5f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <32.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 0, data[2]) || (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 161, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 161, 0, data[2])) ? 
                        -0.10067534f : 
                        -0.07620571f) : 
                    0.03786488f) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 0, data[2]) || (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 161, 0, data[2])) ? 
                     (data[124 /* bmi_max */] <51.58828f ? 
                        -0.07668994f : 
                        -0.012407727f) : 
                    0.15177839f)) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
                        -0.098452576f : 
                        -0.04262572f) : 
                    0.11285279f) : 
                 (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        0.0047324295f : 
                        0.12010772f) : 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <1.5f ? 
                        -0.06864074f : 
                        -0.1729525f)))) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[61])) ? 
             (data[126 /* bmi_var */] <13.787953f ? 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.01701878f : 
                        0.046871323f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        -0.02082918f : 
                        0.06758444f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 165, 0, data[2])) ? 
                     (data[121 /* SKIN PREPS */] <3.5f ? 
                        -0.09121725f : 
                        -0.007029941f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        0.035489623f : 
                        0.099975415f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 166, 0, data[2])) ? 
                 (!Double.isNaN(data[52 /* hcc_96 */]) && (GenModel.bitSetIsInRange(32, 0, data[52]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[52])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <25.59375f ? 
                        -0.16943735f : 
                        0.03571333f) : 
                     (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <4.5f ? 
                        0.02728403f : 
                        -0.14954063f)) : 
                 (Double.isNaN(data[103]) || data[103 /* ANALGESICS */] <32.5f ? 
                     (Double.isNaN(data[108]) || data[108 /* ANTICOAGULANTS */] <9.5f ? 
                        0.06253577f : 
                        -0.07858808f) : 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <27.421875f ? 
                        -0.09490581f : 
                        0.056197293f)))));
    return pred;
  } // constant pool size = 327B, number of visited nodes = 28, static init size = 1278B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000010 01000000 00000000 00000001 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 64, 2, 0, -128, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 10000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 1, 0, 0, 0, 0};
  // {00000000 10100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00100000 00010000 00000000 01000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 4, 8, 0, 2, 0, 0, 0, 0};
  // {00010100 00000000 00000001 00001000 00101000 00001000 00101100 01010000 00010001 00100000 00101101 00001000 00000000 00000000 00001000 00000011 00001010 00001000 01000100 10000100 101010}
  public static final byte[] GRPSPLIT3 = new byte[] {40, 0, -128, 16, 20, 16, 52, 10, -120, 4, -76, 16, 0, 0, 16, -64, 80, 16, 34, 33, 21};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {00000000 01100000 00000000 00000000 00000010 00000000 00000000 00000010 00000000 11000001 11000010 00000000 00000001 00000001 00110000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 6, 0, 0, 64, 0, 0, 64, 0, -125, 67, 0, -128, -128, 12, 0, 0, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {11111111 01111111 11111111 11110101 11110111 11111111 11111111 11111111 11001111 00110111 01101111 11110111 11111111 11011110 11011111 10111011 01111111 11111111 11111111 11111111 01111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -2, -1, -81, -17, -1, -1, -1, -13, -20, -10, -17, -1, 123, -5, -35, -2, -1, -1, -1, 30};
  // {11111101 01111111 11111111 11111111 11111111 01111111 01011110 11110110 11101110 10111111 11111101 11111111 11111111 11111111 11101111 01111111 11111111 10110111 10111111 11101011 11111}
  public static final byte[] GRPSPLIT8 = new byte[] {-65, -2, -1, -1, -1, -2, 122, 111, 119, -3, -65, -1, -1, -1, -9, -2, -1, -19, -3, -41, 31};
  // {11111011 11101111 11111111 11110111 11111111 11110101 11111111 11101111 11111011 01111110 11111111 11110111 11111110 11111110 11011111 10011111 11111111 11111111 01111011 11111111 01111}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -9, -1, -17, -1, -81, -1, -9, -33, 126, -1, -17, 127, 127, -5, -7, -1, -1, -34, -1, 30};
  // {11111111 10001111 11101111 11111101 11111101 01111111 01111011 11101111 11111111 11111111 01111110 11110111 11111110 11111111 01111111 10011100 11110111 11111110 10111111 11111111 011111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -15, -9, -65, -65, -2, -34, -9, -1, -1, 126, -17, 127, -1, -2, 57, -17, 127, -3, -1, 62};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_23_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <67.5f ? 
         (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                 (data[103 /* ANALGESICS */] <8.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        -0.08238856f : 
                        -0.042458106f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                        -0.07992516f : 
                        -0.0028092056f)) : 
                 (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <1.5f ? 
                     (data[0 /* age */] <52.5f ? 
                        -0.051370975f : 
                        0.08238321f) : 
                    0.21579304f)) : 
             (data[0 /* age */] <43.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 165, 0, data[2])) ? 
                     (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[10])) ? 
                        -0.07066279f : 
                        0.14309104f) : 
                    0.14720747f) : 
                 (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.018275712f : 
                        -0.01994843f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                        -0.0596136f : 
                        0.025378127f)))) : 
         (Double.isNaN(data[0]) || data[0 /* age */] <89.5f ? 
             (Double.isNaN(data[124]) || data[124 /* bmi_max */] <25.863594f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                     (data[86 /* CATARACT. */] <0.5f ? 
                        -0.14658259f : 
                        -0.0034788682f) : 
                     (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                        0.054503236f : 
                        -0.0046677287f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 165, 0, data[2])) ? 
                     (data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.03258357f : 
                        0.03327972f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        0.017769832f : 
                        0.103446335f))) : 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                 (!Double.isNaN(data[16 /* hcc_21 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[16])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <21.9375f ? 
                        -0.15354167f : 
                        0.010297905f) : 
                     (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <1.5f ? 
                        -0.019354792f : 
                        -0.12998068f)) : 
                 (data[92 /* HTN (HYPERTENSION) */] <3.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(139, 11, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 139, 11, data[2])) ? 
                        0.07875174f : 
                        0.18185939f) : 
                    0.04137256f))));
    return pred;
  } // constant pool size = 346B, number of visited nodes = 28, static init size = 1392B
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-69, 0, 0, 0};
  // {01000000 01000010 00010000 00100000 00101000 00000000 00001010 00000000 01100000 00000000 01001010 10001000 00000000 00100100 00010100 00000110 00000000 00000001 00010000 00000000 100000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 66, 8, 4, 20, 0, 80, 0, 6, 0, 82, 17, 0, 36, 40, 96, 0, -128, 8, 0, 1};
  // {00000000 00010000 00000100 00000000 00010000 00001000 01000100 00010000 00010000 01000000 00000000 00000000 00000001 00000000 00101000 10000000 00000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 32, 0, 8, 16, 34, 8, 8, 2, 0, 0, -128, 0, 20, 1, 0, 16, 0, 0, 0};
  // {11111111 11001111 11111011 11111111 11111111 01110111 01101011 11100111 11111111 00111111 11111111 11111101 11111101 11111111 11011111 01111111 11111111 11110111 11111111 11111101 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -13, -33, -1, -1, -18, -42, -25, -1, -4, -1, -65, -65, -1, -5, -2, -1, -17, -1, -65, 63};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00100000 01000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 11000000 00000000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {00000001 01000000 00000000 00000010 00000000 00000000 00000010 00110000 00000000 00000000 10100110 00001000 00000000 00000010 00000000 00010000 00000000 00000000 01100100 00000000 00000}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 2, 0, 64, 0, 0, 64, 12, 0, 0, 101, 16, 0, 64, 0, 8, 0, 0, 38, 0, 0};
  // {11111111 01111111 11111111 11111111 11111111 11111111 11011111 11111111 10111111 11111001 10111111 10111111 11111111 11011101 01101111 00111111 01101111 11111111 10111011 11111111 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -2, -1, -1, -1, -1, -5, -1, -3, -97, -3, -3, -1, -69, -10, -4, -10, -1, -35, -1, 31};
  // {11111111 11011011 11101111 10001011 11111111 11010101 01001111 11101011 10001111 00010110 11111111 11111010 01101100 01111110 11000011 11011011 11111111 11110110 11001111 11111111 11110}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -37, -9, -47, -1, -85, -14, -41, -15, 104, -1, 95, 54, 126, -61, -37, -1, 111, -13, -1, 15};
  // {10111011 11101101 11111111 11111111 11110101 01101111 11111001 11111101 11111111 11111011 00100101 11110111 11111011 11111011 11111111 10111111 00110111 11111111 10111111 01111011 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-35, -73, -1, -1, -81, -10, -97, -65, -1, -33, -92, -17, -33, -33, -1, -3, -20, -1, -3, -34, 31};
  // {00000000 00010100 00000000 00000010 01001000 00001000 00101110 00001011 01000000 00000100 00000000 00000000 00000000 00000000 00000000 01100000 10000000 00001000 00000100 00000000 00000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 40, 0, 64, 18, 16, 116, -48, 2, 32, 0, 0, 0, 0, 0, 6, 1, 16, 32, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {...11 0-bits... 01111111 11111111 11101111 11111111 11111111 11101111 10110101 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, -1, -9, -1, -1, -9, -83, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, 7};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_24_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <71.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <19.652344f ? 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <20.302877f ? 
                 (data[0 /* age */] <40.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 163, 0, data[2])) ? 
                        -0.054650012f : 
                        0.12836367f) : 
                     (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[17])) ? 
                        -0.118426286f : 
                        0.025281835f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                        -0.036447044f : 
                        0.094917536f) : 
                     (data[92 /* HTN (HYPERTENSION) */] <1.5f ? 
                        0.047001168f : 
                        -0.024425881f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                 (data[106 /* ANTIASTHMATICS */] <2.0f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(150, 8, data[2]) || (GenModel.bitSetIsInRange(150, 8, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 150, 8, data[2])) ? 
                        -0.07190561f : 
                        0.09754727f) : 
                    -0.16514902f) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
                     (data[123 /* bmi_mean */] <25.924767f ? 
                        0.058959033f : 
                        0.019871015f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 166, 0, data[2])) ? 
                        0.11618872f : 
                        0.14905018f)))) : 
         (Double.isNaN(data[0]) || data[0 /* age */] <88.5f ? 
             (!Double.isNaN(data[59 /* hcc_108 */]) && (GenModel.bitSetIsInRange(32, 0, data[59]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[59])) ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <1.5f ? 
                        -0.048783366f : 
                        0.07344341f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                        0.019790798f : 
                        0.108688f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 165, 0, data[2])) ? 
                     (data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.11073274f : 
                        0.052817397f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 165, 0, data[2])) ? 
                        0.041373137f : 
                        0.11179444f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 165, 0, data[2])) ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 165, 0, data[2])) ? 
                    -0.19495864f : 
                    -0.13436419f) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT15, 165, 0, data[2])) ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <94.5f ? 
                        -0.0124631785f : 
                        -0.081173584f) : 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <22.055f ? 
                        0.03184337f : 
                        0.13320546f)))));
    return pred;
  } // constant pool size = 413B, number of visited nodes = 28, static init size = 1794B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00010000 00000000 10000000 00001000 00000000 00000000 000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0, 8, 0, 1, 16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {01000001 01100010 00100110 00000010 00111100 00011010 00111000 01110000 00100000 00000100 00111100 00000100 00000000 00110100 10010101 00100010 01001010 00110000 00100001 11101000 001000}
  public static final byte[] GRPSPLIT2 = new byte[] {-126, 70, 100, 64, 60, 88, 28, 14, 4, 32, 60, 32, 0, 44, -87, 68, 82, 12, -124, 23, 4};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {11111111 01111111 11111110 11110111 11110111 11111111 01011011 11111111 11011011 01111111 01101110 01110111 11111111 11011111 11111111 01011111 11111111 11110101 11111011 11111011 111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -2, 127, -17, -17, -1, -38, -1, -37, -2, 118, -18, -1, -5, -1, -6, -1, -81, -33, -33, 63};
  // {...8 0-bits... 00000000 00000000 00000000 00001000 00000000 00000100 00000000 00000000 00000000 10000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000001}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 16, 0, 32, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 32, 0};
  // {11111011 11101001 11111111 11111111 11111111 11111011 11111101 11100111 11101101 10011111 11111101 11111111 11111010 11111110 11111111 11111101 11101111 11111111 11111111 11111101 011111}
  public static final byte[] GRPSPLIT6 = new byte[] {-33, -105, -1, -1, -1, -33, -65, -25, -73, -7, -65, -1, 95, 127, -1, -65, -9, -1, -1, -65, 62};
  // {00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 00000000 00000010 00000000 00001100 00000100 00000000 00000000 00000000 00000000 000010}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 8, 0, 0, 0, 0, 0, 2, 0, 2, 0, 64, 0, 48, 32, 0, 0, 0, 0, 16};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11001111 11101111 11111101 11111101 11111111 01011011 11101111 11111111 11010111 11101101 10110110 11101100 11111111 01110111 10111010 11110111 11111111 10001111 11111111 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -13, -9, -65, -65, -1, -38, -9, -1, -21, -73, 109, 55, -1, -18, 93, -17, -1, -15, -1, 31};
  // {11111001 11111101 11111011 11011111 11110111 01100111 11110101 11111111 11101111 00111011 01110110 11111111 11111111 11011010 11111011 01111111 01111111 11011111 11111111 01111111 01111}
  public static final byte[] GRPSPLIT10 = new byte[] {-97, -65, -33, -5, -17, -26, -81, -1, -9, -36, 110, -1, -1, 91, -33, -2, -2, -5, -1, -2, 30};
  // {11111111 01111111 11101111 11101111 11111111 11000101 11001111 11111011 10001111 11110000 10111111 11111011 01111111 11111001 11001111 11111101 10101111 11110111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -2, -9, -9, -1, -93, -13, -33, -15, 15, -3, -33, -2, -97, -13, -65, -11, -17, -1, -1, 31};
  // {10111010 11001111 11111111 10111111 01110111 11111111 01111111 11101101 11111011 00111111 01000111 11110111 11111110 01111110 01111011 10111011 01111111 11111100 01111011 11111011 01111}
  public static final byte[] GRPSPLIT12 = new byte[] {93, -13, -1, -3, -18, -1, -2, -73, -33, -4, -30, -17, 127, 126, -34, -35, -2, 63, -34, -33, 30};
  // {11111111 10111101 11011111 11111111 11101111 11111101 11111111 11111111 11111111 10111110 01110110 11110111 11111111 11111111 11011111 11011111 11111111 11111111 11111111 11111011 01111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -67, -5, -1, -9, -65, -1, -1, -1, 125, 110, -17, -1, -1, -5, -5, -1, -1, -1, -33, 30};
  // {00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000001 00001000 00000000 00000000 00000000 00100000 00100000 00000000 00000000 00000000 00000100 00000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 2, 0, 0, 0, 0, 0, 0, 0, -126, 16, 0, 0, 0, 4, 4, 0, 0, 0, 32, 0};
  // {11111011 11011111 11111111 11111111 11111111 01111111 11111111 11101101 11111111 01111111 11111101 11111111 11011110 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT15 = new byte[] {-33, -5, -1, -1, -1, -2, -1, -73, -1, -2, -65, -1, 123, 127, -1, -1, -1, -1, -1, -1, 31};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_25_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <49.5f ? 
         (data[0 /* age */] <35.5f ? 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (data[124 /* bmi_max */] <44.366173f ? 
                     (Double.isNaN(data[126]) || data[126 /* bmi_var */] <10.571037f ? 
                        -0.09957237f : 
                        -0.022403227f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 160, 1, data[2])) ? 
                        -0.109870106f : 
                        -0.034051787f)) : 
                 (data[126 /* bmi_var */] <3.0101604f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(94, 11, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 94, 11, data[2])) ? 
                        -0.114124306f : 
                        -0.108080216f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <27.5f ? 
                        -0.027405426f : 
                        0.17834832f))) : 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <14.0625f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                        -0.10235309f : 
                        -0.056427013f) : 
                    0.08985343f) : 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (data[115 /* ELECT/CALORIC/H2O */] <1.5f ? 
                        -0.037283633f : 
                        0.018094057f) : 
                     (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                        0.029092766f : 
                        0.2783046f)))) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[61])) ? 
             (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[17])) ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 166, 0, data[2])) ? 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.05860411f : 
                        0.014262601f) : 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <39.200424f ? 
                        0.07458999f : 
                        0.18304221f)) : 
                 (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        -0.034787424f : 
                        0.014213438f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                        -0.03172033f : 
                        0.10660295f))) : 
             (!Double.isNaN(data[75 /* hcc_167 */]) && (GenModel.bitSetIsInRange(32, 0, data[75]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[75])) ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <26.419313f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.08489179f : 
                        0.11653036f) : 
                    -0.20561671f) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <86.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 156, 5, data[2])) ? 
                        -0.043455493f : 
                        0.057372693f) : 
                     (Double.isNaN(data[103]) || data[103 /* ANALGESICS */] <7.0f ? 
                        0.016360609f : 
                        -0.107325f)))));
    return pred;
  } // constant pool size = 325B, number of visited nodes = 29, static init size = 1242B
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000010 01000000 00000000 00000001 00000010 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0, 0, 0, 64, 2, 0, -128, 64, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0};
  // {...1 0-bits... 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000001 00000000 00000000 00000000 0000000}
  public static final byte[] GRPSPLIT1 = new byte[] {16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, -128, 0, 0, 0, 0};
  // {...11 0-bits... 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00010100 11010000 00000001 00001000 00101000 00000000 00100100 01010010 00010000 00000000 00101000 00001000 00000000 00100001 00010000 00000001 01001010 00001000 01000100 00000100 100010}
  public static final byte[] GRPSPLIT3 = new byte[] {40, 11, -128, 16, 20, 0, 36, 74, 8, 0, 20, 16, 0, -124, 8, -128, 82, 16, 34, 32, 17};
  // {10000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 11000000 00000000 10000000 00100001 00000000 00001000 01000000 00000001 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 1, -124, 0, 16, 2, -128, 0, 0, 0, 0};
  // {11000100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {35, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {00000001 01000000 00000000 00000010 00000000 00000000 00000100 00000000 00100000 00000000 10000011 10000000 00000000 00000100 00000100 00100111 00000000 00000000 00000000 00001100 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 2, 0, 64, 0, 0, 32, 0, 4, 0, -63, 1, 0, 32, 32, -28, 0, 0, 0, 48, 0};
  // {11101100 01111111 11011110 10011010 11111111 01011101 01011010 11111110 11100110 00011100 11111111 01001110 11001101 00111101 11101101 01111011 01101011 11110101 00101111 11111011 11111}
  public static final byte[] GRPSPLIT9 = new byte[] {55, -2, 123, 89, -1, -70, 90, 127, 103, 56, -1, 114, -77, -68, -73, -34, -42, -81, -12, -33, 31};
  // {00000000 01000000 00000000 00000010 00010000 00000000 00001100 00101010 00010000 00000100 11110101 00000010 00000000 00000110 00010000 00000100 00001000 00000100 10100000 00001010 00110}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 2, 0, 64, 8, 0, 48, 84, 8, 32, -81, 64, 0, 96, 8, 32, 16, 32, 5, 80, 12};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 11110001 11111101 11111111 11111111 11101111 11101111 11111111 11111111 11101111 11101111 10011111 11111111 11111111 11101111 11111011 10011111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-113, -65, -1, -1, -9, -9, -1, -1, -9, -9, -7, -1, -1, -9, -33, -7, -1, -1, -1, 15};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_26_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
         (Double.isNaN(data[0]) || data[0 /* age */] <71.5f ? 
             (Double.isNaN(data[125]) || data[125 /* bmi_min */] <17.300976f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (data[3 /* packYears */] <14.625f ? 
                        -0.0990261f : 
                        0.0056306194f) : 
                     (data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.17208903f : 
                        0.04697466f)) : 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.034107532f : 
                        0.05236999f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.060992233f : 
                        0.06256875f))) : 
             (!Double.isNaN(data[59 /* hcc_108 */]) && (GenModel.bitSetIsInRange(32, 0, data[59]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[59])) ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.059149105f : 
                        0.075696275f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                        0.002657975f : 
                        0.0933222f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
                     (Double.isNaN(data[1 /* sex */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.17818227f : 
                        -0.117616124f) : 
                     (!Double.isNaN(data[73 /* hcc_161 */]) && (GenModel.bitSetIsInRange(32, 0, data[73]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[73])) ? 
                        -0.06673537f : 
                        0.034345757f)))) : 
         (data[0 /* age */] <43.5f ? 
             (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <2.5f ? 
                 (data[125 /* bmi_min */] <23.9975f ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <4.5902343f ? 
                        -0.10787859f : 
                        0.08079507f) : 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <10.560156f ? 
                        -0.10843951f : 
                        -0.11178419f)) : 
                 (data[103 /* ANALGESICS */] <1.5f ? 
                    0.17673148f : 
                    -0.10942562f)) : 
             (data[3 /* packYears */] <205.38281f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 156, 5, data[2])) ? 
                     (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <1.5f ? 
                        1.1585772E-4f : 
                        -0.15242486f) : 
                     (data[124 /* bmi_max */] <17.398594f ? 
                        -0.19818741f : 
                        0.053438973f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 156, 5, data[2])) ? 
                     (Double.isNaN(data[105]) || data[105 /* ANTIARTHRITICS */] <0.5f ? 
                        -0.11942256f : 
                        -0.051997453f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 156, 5, data[2])) ? 
                        0.07301821f : 
                        0.15229225f)))));
    return pred;
  } // constant pool size = 306B, number of visited nodes = 29, static init size = 1128B
  // {10111011 11101111 11100011 11111111 11111111 11110111 01100000 10100111 11001000 00111011 11101101 11111101 11111100 01111111 11001111 01011011 11111111 10111111 11111111 10111011 111111}
  public static final byte[] GRPSPLIT0 = new byte[] {-35, -9, -57, -1, -1, -17, 6, -27, 19, -36, -73, -65, 63, -2, -13, -38, -1, -3, -1, -35, 63};
  // {11111110 11111111 11111110 11110111 11111111 11111111 11110111 10111111 11100111 10110111 11111111 11111111 11111101 01111110 11001111 11011111 01111111 11111111 11111011 11111111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {127, -1, 127, -17, -1, -1, -17, -3, -25, -19, -1, -1, -65, 126, -13, -5, -2, -1, -33, -1, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {11111111 11101111 11001111 11111111 11101101 11111101 01111111 11101111 11111111 11010111 11100100 10110110 11001100 11011111 11010111 00111010 11110111 11111111 10001111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -9, -13, -1, -73, -65, -2, -9, -1, -21, 39, 109, 51, -5, -21, 92, -17, -1, -15, -1, 63};
  // {11111011 10011101 11111111 11111101 11110111 11100111 11010001 11111111 11101111 00111011 01111111 11111111 11111111 11111010 11111011 11111111 11111111 11110111 11111111 01111111 011111}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -71, -1, -65, -17, -25, -117, -1, -9, -36, -2, -1, -1, 95, -33, -1, -1, -17, -1, -2, 62};
  // {11111111 01111111 11111111 11101111 11111111 01001101 11001111 11111111 11011111 11111000 11111111 11111111 01111111 11111001 11101111 11011111 11101111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -2, -1, -9, -1, -78, -13, -1, -5, 31, -1, -1, -2, -97, -9, -5, -9, -1, -1, -1, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 11101111 11111101 11111110 11111110 11111111 11111111 01111111 11111011 11101110 11111111 11101110 11111111 11111011 11001011 11110111 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, -65, 127, 127, -1, -1, -2, -33, 119, -1, 119, -1, -33, -45, -17, -1, -1, -1, -1, 7};
  // {...5 0-bits... 11101111 11111111 11111111 11111110 11111111 11111111 11111111 11111101 11111111 11111101 11111110 11111111 11101111 11111101 11111111 01100111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-9, -1, -1, 127, -1, -1, -1, -65, -1, -65, 127, -1, -9, -65, -1, -26, -1, -1, -1, 13};
  // {...5 0-bits... 00000110 00000000 00000000 00000010 00000011 00000000 01000000 00000100 00010000 00000001 00000000 10010000 00000000 00000000 00000010 01000000 00000000 00000000 0001000}
  public static final byte[] GRPSPLIT10 = new byte[] {96, 0, 0, 64, -64, 0, 2, 32, 8, -128, 0, 9, 0, 0, 64, 2, 0, 0, 8, 8};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_27_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* packYears */] <21.823242f ? 
         (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                 (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                     (data[124 /* bmi_max */] <36.03297f ? 
                        -0.06675271f : 
                        -0.025779882f) : 
                     (Double.isNaN(data[14 /* hcc_18 */]) || !GenModel.bitSetIsInRange(32, 0, data[14]) || (GenModel.bitSetIsInRange(32, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[14])) ? 
                        -0.114236824f : 
                        0.076795876f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                     (!Double.isNaN(data[67 /* hcc_134 */]) && (GenModel.bitSetIsInRange(32, 0, data[67]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[67])) ? 
                        -0.15613982f : 
                        -0.017779747f) : 
                     (data[0 /* age */] <51.5f ? 
                        -0.045399938f : 
                        0.06324087f))) : 
             (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[61])) ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (!Double.isNaN(data[14 /* hcc_18 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[14])) ? 
                        -0.04808506f : 
                        -7.181989E-4f) : 
                     (!Double.isNaN(data[16 /* hcc_21 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[16])) ? 
                        -0.10914017f : 
                        0.05069501f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <86.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 156, 5, data[2])) ? 
                        -0.12426966f : 
                        0.059305556f) : 
                     (Double.isNaN(data[100]) || data[100 /* ROUTINE ADULT HEALTH CHECK UP EXAM */] <0.5f ? 
                        0.0042578913f : 
                        -0.12908128f)))) : 
         (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 166, 0, data[2])) ? 
             (data[3 /* packYears */] <41.300407f ? 
                -0.1611958f : 
                -0.026558882f) : 
             (data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                 (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <5.5f ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <26.51375f ? 
                        0.05742525f : 
                        0.02215888f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 156, 5, data[2])) ? 
                        -0.11616174f : 
                        0.12833916f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 160, 5, data[2])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <65.0625f ? 
                        0.018429033f : 
                        -0.21723682f) : 
                     (data[105 /* ANTIARTHRITICS */] <1.5f ? 
                        0.086554825f : 
                        0.053172737f)))));
    return pred;
  } // constant pool size = 261B, number of visited nodes = 25, static init size = 954B
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-69, 0, 0, 0};
  // {01111010 01011111 11111111 10111111 01111111 01001111 01101001 10110101 11111101 00010110 01101110 11110111 00101101 10111111 11110111 01101111 11111111 11110111 10011111 11111011 111110}
  public static final byte[] GRPSPLIT1 = new byte[] {94, -6, -1, -3, -2, -14, -106, -83, -65, 104, 118, -17, -76, -3, -17, -10, -1, -17, -7, -33, 31};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11111111 11101111 11111110 11111111 11111101 11110111 10111111 11101111 11101111 11111111 11111111 11111101 11111110 01111110 11011111 10111011 01111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -9, 127, -1, -65, -17, -3, -9, -9, -1, -1, -65, 127, 126, -5, -35, -2, -1, -1, -1, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 11111001 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11011111 11111111 11111111 11111111 11111011 11111111 11111111 11010111 1111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-97, -1, -1, -1, -1, -1, -1, -1, -1, -9, -5, -1, -1, -1, -33, -1, -1, -21, -1, 7};
  // {10111111 01111111 11111110 11111111 11101111 01111111 11111111 11111111 11111111 11110111 01111111 01111111 11111111 11111111 01111111 10111111 11111111 11111101 11111011 01111011 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-3, -2, 127, -1, -9, -2, -1, -1, -1, -17, -2, -2, -1, -1, -2, -3, -1, -65, -33, -34, 63};
  // {...5 0-bits... 01111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 10011111 11011111 11101111 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-2, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -7, -5, -9, -1, -1, -1, -1, 15};
  // {...5 0-bits... 11111101 11111101 11111111 11111110 11111111 11111111 11111111 11111111 11110111 11111111 10011111 11111111 11111111 11111111 11101011 11011110 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, -65, -1, 127, -1, -1, -1, -1, -17, -1, -7, -1, -1, -1, -41, 123, -1, -1, -1, -1};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_28_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <49.5f ? 
         (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
             (data[0 /* age */] <33.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                     (Double.isNaN(data[12 /* hcc_12 */]) || !GenModel.bitSetIsInRange(32, 0, data[12]) || (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[12])) ? 
                        -0.09663537f : 
                        0.049591545f) : 
                     (data[124 /* bmi_max */] <53.25492f ? 
                        -0.07642278f : 
                        0.020088116f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                        -0.10571667f : 
                        -0.05064203f) : 
                     (data[113 /* DIURETICS */] <0.5f ? 
                        -0.029883418f : 
                        0.015786905f))) : 
             (data[0 /* age */] <39.5f ? 
                0.10683023f : 
                0.1313834f)) : 
         (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[17])) ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <25.59375f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(158, 0, data[2]) || (GenModel.bitSetIsInRange(158, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 158, 0, data[2])) ? 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.05257239f : 
                        0.0047654184f) : 
                     (data[110 /* CARDIAC DRUGS */] <0.5f ? 
                        0.1487184f : 
                        0.061841667f)) : 
                 (data[109 /* ANTIHYPERGLYCEMICS */] <16.5f ? 
                     (Double.isNaN(data[116]) || data[116 /* GASTROINTESTINAL */] <6.5f ? 
                        0.0302675f : 
                        0.1275405f) : 
                    -0.20916565f)) : 
             (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                 (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                        0.018257467f : 
                        0.06573212f) : 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.029202789f : 
                        0.048476357f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 165, 0, data[2])) ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.029605284f : 
                        0.07869446f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        0.05837489f : 
                        0.18745096f)))));
    return pred;
  } // constant pool size = 266B, number of visited nodes = 24, static init size = 1008B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00001000 00000000 00000010 00000000 00000000 00000001 00000000 00000000 00000001 10000000 00000000 00000000 10000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 16, 0, 64, 0, 0, -128, 0, 0, -128, 1, 0, 0, 1, 0, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {00010100 11000000 00000001 00001000 00101000 00000000 00100100 01010010 00010000 00000000 00101010 00001000 00000000 00100001 00010000 00000001 01001010 00001000 01000100 00000100 100010}
  public static final byte[] GRPSPLIT3 = new byte[] {40, 3, -128, 16, 20, 0, 36, 74, 8, 0, 84, 16, 0, -124, 8, -128, 82, 16, 34, 32, 17};
  // {01000000 00011000 10000000 00100000 00000000 00000000 01000000 00001000 00000000 11000000 00000000 00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 24, 1, 4, 0, 0, 2, 16, 0, 3, 0, 0, -128, 0, 0, 0, -128, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000010 00000000 00000000 00000100 00001000 00100000 00000000 10000010 10000000 00000000 00000100 00000000 00100110 00001000 00000000 00000000 000001}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, 0, 0, 64, 0, 0, 32, 16, 4, 0, 65, 1, 0, 32, 0, 100, 16, 0, 0, 32};
  // {11000000 01100101 01010110 01000010 10101100 10000101 01111010 01100010 10000110 00001100 10110000 00000100 10001000 10000000 10001001 00110001 01101000 00100000 00101010 11101011 11101}
  public static final byte[] GRPSPLIT7 = new byte[] {3, -90, 106, 66, 53, -95, 94, 70, 97, 48, 13, 32, 17, 1, -111, -116, 22, 4, 84, -41, 23};
  // {00000001 00000010 00000000 00100010 00010010 00010000 00001100 00101010 01110001 00000100 01111100 00000010 00000000 00000110 00010100 10010100 10011000 00000100 10100100 01001010 00110}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, 64, 0, 68, 72, 8, 48, 84, -114, 32, 62, 64, 0, 96, 40, 41, 25, 32, 37, 82, 12};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00010100 00000000 00000000 00000010 00010000 00000100 00000000 00000000 10000000 00000000 00100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 40, 0, 0, 64, 8, 32, 0, 0, 1, 0, 4};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_29_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <71.5f ? 
         (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                 (Double.isNaN(data[0]) || data[0 /* age */] <54.5f ? 
                     (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <2.5f ? 
                        -0.059247706f : 
                        0.09455218f) : 
                     (data[111 /* CARDIOVASCULAR */] <3.5f ? 
                        -0.07906201f : 
                        -0.032312483f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                     (data[116 /* GASTROINTESTINAL */] <6.5f ? 
                        -0.030403383f : 
                        0.010710331f) : 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <33.37375f ? 
                        0.057889197f : 
                        0.19865333f))) : 
             (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                 (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <3.5f ? 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[8])) ? 
                        -0.0023157373f : 
                        0.09829927f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 165, 0, data[2])) ? 
                        -0.09771624f : 
                        0.08093779f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 165, 0, data[2])) ? 
                     (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <3.5f ? 
                        0.012865947f : 
                        -0.14948289f) : 
                     (!Double.isNaN(data[67 /* hcc_134 */]) && (GenModel.bitSetIsInRange(32, 0, data[67]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[67])) ? 
                        -0.14004894f : 
                        0.08389993f)))) : 
         (!Double.isNaN(data[29 /* hcc_48 */]) && (GenModel.bitSetIsInRange(32, 0, data[29]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[29])) ? 
             (!Double.isNaN(data[48 /* hcc_85 */]) && (GenModel.bitSetIsInRange(32, 0, data[48]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[48])) ? 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <21.9375f ? 
                     (data[124 /* bmi_max */] <32.28406f ? 
                        -0.17777124f : 
                        -0.042733274f) : 
                     (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <1.5f ? 
                        0.0746446f : 
                        -0.14020535f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 166, 0, data[2])) ? 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <19.773136f ? 
                        0.07511834f : 
                        -0.14531721f) : 
                     (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <2.5f ? 
                        0.028168686f : 
                        -0.0964069f))) : 
             (Double.isNaN(data[0]) || data[0 /* age */] <96.0f ? 
                 (!Double.isNaN(data[42 /* hcc_78 */]) && (GenModel.bitSetIsInRange(32, 0, data[42]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[42])) ? 
                     (Double.isNaN(data[114]) || data[114 /* EENT PREPS */] <1.5f ? 
                        -0.035809416f : 
                        -0.19604619f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 165, 0, data[2])) ? 
                        -0.053427175f : 
                        0.027749507f)) : 
                 (!Double.isNaN(data[14 /* hcc_18 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[14])) ? 
                    -0.15820353f : 
                     (!Double.isNaN(data[16 /* hcc_21 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[16])) ? 
                        -0.1326811f : 
                        -0.04865578f)))));
    return pred;
  } // constant pool size = 294B, number of visited nodes = 30, static init size = 1032B
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-69, 0, 0, 0};
  // {01111010 01011111 11111111 10111111 01111111 01111111 01101001 10110101 11111101 00010110 01101110 11111101 00111101 10111111 11011111 01101111 11111111 11110111 10011111 11111001 111110}
  public static final byte[] GRPSPLIT1 = new byte[] {94, -6, -1, -3, -2, -2, -106, -83, -65, 104, 118, -65, -68, -3, -5, -10, -1, -17, -7, -97, 31};
  // {11111111 11101111 11111110 11111111 11111101 11110111 10111111 11101111 11101110 11111111 11111111 11111111 11111110 01111110 11110111 10111011 01111111 11111111 11111111 11111110 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -9, 127, -1, -65, -17, -3, -9, 119, -1, -1, -1, 127, 126, -17, -35, -2, -1, -1, 127, 63};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {00000000 00010000 00000000 00000000 00001000 00000100 00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000100 00000000 00000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 8, 0, 0, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 32, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11110111 10110111 11111111 11111111 11111111 11111110 11001111 11011111 01111111 11111111 11111011 11111111 01111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -3, -17, -19, -1, -1, -1, 127, -13, -5, -2, -1, -33, -1, 30};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 11101101 11111111 11111111 11100111 11111101 11111111 11101011 11101111 01111110 11111111 10111110 11111111 11011110 11111111 11111011 01110111 11111111 11011011 11111111 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -73, -1, -1, -25, -65, -1, -41, -9, 126, -1, 125, -1, 123, -1, -33, -18, -1, -37, -1, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {11111111 01011111 11001111 10101111 11111111 11001101 11001111 11111111 11011111 11010000 11101111 11111011 11101101 11111001 01001111 10111111 11101111 11111111 11101111 11111111 11111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -6, -13, -11, -1, -77, -13, -1, -5, 11, -9, -33, -73, -97, -14, -3, -9, -1, -9, -1, 31};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_30_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[61])) ? 
             (data[126 /* bmi_var */] <10.340965f ? 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.023889594f : 
                        0.07699433f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.06358458f : 
                        0.05254762f)) : 
                 (data[0 /* age */] <56.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 165, 0, data[2])) ? 
                        -0.017790005f : 
                        0.09746843f) : 
                     (Double.isNaN(data[112]) || data[112 /* COUGH/COLD PREPARATIONS */] <2.5f ? 
                        0.033322167f : 
                        -0.14707544f))) : 
             (!Double.isNaN(data[75 /* hcc_167 */]) && (GenModel.bitSetIsInRange(32, 0, data[75]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[75])) ? 
                 (!Double.isNaN(data[52 /* hcc_96 */]) && (GenModel.bitSetIsInRange(32, 0, data[52]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[52])) ? 
                    -0.2071301f : 
                    -0.08279941f) : 
                 (Double.isNaN(data[124]) || data[124 /* bmi_max */] <22.055f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 156, 5, data[2])) ? 
                        -0.1522875f : 
                        0.09691654f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 156, 5, data[2])) ? 
                        -0.07466982f : 
                        0.029157555f)))) : 
         (data[0 /* age */] <43.5f ? 
             (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <2.5f ? 
                 (data[125 /* bmi_min */] <23.9975f ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <4.5902343f ? 
                        -0.106397435f : 
                        0.078194164f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <37.5f ? 
                        -0.106845655f : 
                        -0.10905739f)) : 
                 (data[116 /* GASTROINTESTINAL */] <0.5f ? 
                    -0.10883311f : 
                    0.17513579f)) : 
             (data[3 /* packYears */] <205.38281f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 156, 5, data[2])) ? 
                     (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <1.5f ? 
                        -0.0038044455f : 
                        -0.14177625f) : 
                     (data[124 /* bmi_max */] <17.398594f ? 
                        -0.16406898f : 
                        0.047148332f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 156, 5, data[2])) ? 
                     (data[0 /* age */] <58.5f ? 
                        -0.15404697f : 
                        -0.026722685f) : 
                     (data[111 /* CARDIOVASCULAR */] <7.5f ? 
                        0.07882238f : 
                        0.0030206465f)))));
    return pred;
  } // constant pool size = 253B, number of visited nodes = 27, static init size = 858B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11111111 01111111 11111110 10111101 11111111 11111111 11011111 11110101 11100111 01111111 11111111 11111111 01111111 01111110 11111111 11111111 01100111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -2, 127, -67, -1, -1, -5, -81, -25, -2, -1, -1, -2, 126, -1, -1, -26, -1, -1, -1, 63};
  // {00010000 10100000 00000001 00000000 00100010 00000000 00010000 00000000 00000100 00000001 01100001 00000000 00000000 10000000 00010000 00000001 00001000 00000000 00000110 00000000 00101}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 5, -128, 0, 68, 0, 8, 0, 32, -128, -122, 0, 0, 1, 8, -128, 16, 0, 96, 0, 20};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {...5 0-bits... 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01101111 11111111 11111111 11111111 11011111 11111111 11110111 11111111 11111111 11011111 1111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-17, -1, -1, -1, -1, -1, -1, -1, -10, -1, -1, -1, -5, -1, -17, -1, -1, -5, -1, 15};
  // {...5 0-bits... 11111111 11111101 11111111 10111111 10111111 11101111 11111111 11111111 11110111 11101111 11011111 11111111 11111111 11111111 11111111 10011110 11111111 11011111 1111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -65, -1, -3, -3, -9, -1, -1, -17, -9, -5, -1, -1, -1, -1, 121, -1, -5, -1, 15};
  // {...5 0-bits... 11101111 11111101 11111110 11111110 11111111 11111111 01111111 11111111 11101110 11111111 11101110 11111111 11111011 11001011 11110111 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT7 = new byte[] {-9, -65, 127, 127, -1, -1, -2, -1, 119, -1, 119, -1, -33, -45, -17, -1, -1, -1, -1, 7};
  // {...5 0-bits... 11101111 11111111 11111111 10111110 11111111 11111111 11111111 11111101 11111111 11111101 11111110 11111111 11101111 11111101 11111111 01100111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, -1, -1, 125, -1, -1, -1, -65, -1, -65, 127, -1, -9, -65, -1, -26, -1, -1, -1, 13};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_31_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <44.5f ? 
         (Double.isNaN(data[62 /* hcc_112 */]) || !GenModel.bitSetIsInRange(32, 0, data[62]) || (GenModel.bitSetIsInRange(32, 0, data[62]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[62])) ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                 (data[124 /* bmi_max */] <47.83625f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <2.5f ? 
                        -0.07340737f : 
                        0.07208355f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 161, 0, data[2])) ? 
                        -0.07408253f : 
                        -0.005406107f)) : 
                 (data[117 /* HORMONES */] <19.5f ? 
                     (data[88 /* COUGH */] <0.5f ? 
                        0.07444237f : 
                        -0.08824104f) : 
                    0.1788504f)) : 
            0.23724577f) : 
         (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[17])) ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <21.023438f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(158, 0, data[2]) || (GenModel.bitSetIsInRange(158, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 158, 0, data[2])) ? 
                     (data[90 /* ESSENTIAL HTN */] <14.5f ? 
                        -0.033911027f : 
                        -0.10442937f) : 
                    0.12099474f) : 
                 (data[109 /* ANTIHYPERGLYCEMICS */] <16.5f ? 
                     (Double.isNaN(data[122]) || data[122 /* UNCLASSIFIED DRUG PRODUCTS */] <1.5f ? 
                        0.04964907f : 
                        -0.07523399f) : 
                    -0.18086167f)) : 
             (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                 (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
                        -0.030612625f : 
                        0.008108947f) : 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.024377238f : 
                        6.4518483E-4f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 166, 0, data[2])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <7.3125f ? 
                        -0.03560229f : 
                        0.0075436532f) : 
                     (Double.isNaN(data[87]) || data[87 /* CKD STAGE 3 (GFR 30-59) */] <3.5f ? 
                        0.040239736f : 
                        0.16396776f)))));
    return pred;
  } // constant pool size = 210B, number of visited nodes = 21, static init size = 744B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 10000000 00000000 00000000 00000000 00000000 00100000 01000010 00000000 00000001 00001010 00000000 00000000 10100000 00010000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 1, 0, 0, 0, 0, 4, 66, 0, -128, 80, 0, 0, 5, 8, 0, 2, 0, 0, 0, 0};
  // {00000100 00110000 00000000 00001000 00001000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000001 10000000 00001000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {32, 12, 0, 16, 16, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, -128, 1, 16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000010 00000000 00000000 00000100 00001000 00100000 00000000 10000001 10000000 00000000 00000000 00000000 00100110 00001000 00000000 00000000 000001}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 0, 0, 64, 0, 0, 32, 16, 4, 0, -127, 1, 0, 0, 0, 100, 16, 0, 0, 32};
  // {11011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-69, 0, 0, 0};
  // {11111010 01011111 11111111 10111111 11111101 01001111 01111001 11110101 11111101 00011111 01111110 11110101 11101101 00111111 11011111 01111011 11111111 11110111 11111111 11111011 111110}
  public static final byte[] GRPSPLIT6 = new byte[] {95, -6, -1, -3, -65, -14, -98, -81, -65, -8, 126, -81, -73, -4, -5, -34, -1, -17, -1, -33, 31};
  // {00000001 00000010 00000000 00100010 00011010 00010000 00101000 00101010 01110001 00000100 01110101 00001010 00000000 00000110 00010100 10010100 10011000 00000100 11100100 01001010 001100}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, 64, 0, 68, 88, 8, 20, 84, -114, 32, -82, 80, 0, 96, 40, 41, 25, 32, 39, 82, 12};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_32_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <0.5f ? 
         (data[116 /* GASTROINTESTINAL */] <6.5f ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <8.0859375f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.03098247f : 
                        0.033696145f) : 
                     (data[100 /* ROUTINE ADULT HEALTH CHECK UP EXAM */] <0.5f ? 
                        0.117605954f : 
                        0.029444205f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <21.894375f ? 
                        0.032393165f : 
                        -0.08234219f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        0.021520132f : 
                        0.093885675f))) : 
             (data[0 /* age */] <37.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 163, 0, data[2])) ? 
                     (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.08466949f : 
                        0.17324173f) : 
                     (data[0 /* age */] <26.5f ? 
                        -0.07845217f : 
                        0.057920977f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 163, 0, data[2])) ? 
                     (Double.isNaN(data[9 /* hcc_9 */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (GenModel.bitSetIsInRange(32, 0, data[9]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[9])) ? 
                        0.010684817f : 
                        0.18722384f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 163, 0, data[2])) ? 
                        0.058063496f : 
                        0.12446164f)))) : 
         (Double.isNaN(data[118]) || data[118 /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */] <2.0f ? 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 164, 1, data[2])) ? 
                 (Double.isNaN(data[110]) || data[110 /* CARDIAC DRUGS */] <2.5f ? 
                     (Double.isNaN(data[33 /* hcc_58 */]) || !GenModel.bitSetIsInRange(32, 0, data[33]) || (GenModel.bitSetIsInRange(32, 0, data[33]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[33])) ? 
                        -0.11652413f : 
                        -0.008921058f) : 
                    0.052564494f) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 164, 1, data[2])) ? 
                     (data[126 /* bmi_var */] <13.787953f ? 
                        0.02121019f : 
                        0.085241474f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 164, 1, data[2])) ? 
                        0.0878047f : 
                        0.1691937f))) : 
             (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(160, 5, data[2]) || (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 160, 5, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 160, 5, data[2])) ? 
                        -0.24889354f : 
                        -0.13954814f) : 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                        -0.04967376f : 
                        0.06767381f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(160, 5, data[2]) || (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 160, 5, data[2])) ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <75.5f ? 
                        -0.1505385f : 
                        -0.0033245117f) : 
                     (Double.isNaN(data[110]) || data[110 /* CARDIAC DRUGS */] <3.5f ? 
                        0.057198163f : 
                        -0.05518062f)))));
    return pred;
  } // constant pool size = 398B, number of visited nodes = 30, static init size = 1656B
  // {00000000 00000100 00010000 00000010 00110100 10010010 00001000 00001000 00000000 00000000 00011000 00000001 00001000 00010000 00000000 00100000 00000000 00010000 00000101 10100000 000100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 32, 8, 64, 44, 73, 16, 16, 0, 0, 24, -128, 16, 8, 0, 4, 0, 8, -96, 5, 8};
  // {11111111 01111111 11111110 11111111 11111111 11111101 11011001 11110101 11011111 01110111 01111101 11111111 11111101 11011110 01011111 10111101 11111111 11111101 11111111 01111011 011111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -2, 127, -1, -1, -65, -101, -81, -5, -18, -66, -1, -65, 123, -6, -67, -1, -65, -1, -34, 62};
  // {11111011 11101101 11111011 11111111 11111111 11110011 01110111 11111111 11101111 10111111 11101110 01110111 11111110 11111011 11111111 11011111 11111111 11111111 11111111 10111101 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -73, -33, -1, -1, -49, -18, -1, -9, -3, 119, -18, 127, -33, -1, -5, -1, -1, -1, -67, 63};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 10000001 00000000 00000000 00000001 10000000 00000000 00000000 10000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 2, 0, -127, 0, 0, -128, 1, 0, 0, 1, 0, 0, 0, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {24, 0, 0, 0};
  // {11111011 11101111 11101011 11111101 11110111 00110111 01110110 11100111 11001000 00011011 01111101 11101101 11111110 11111111 01101011 00011010 10111111 11110110 10111011 11111100 111}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, -9, -41, -65, -17, -20, 110, -25, 19, -40, -66, -73, 127, -1, -42, 88, -3, 111, -35, 63, 7};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {01010001 10000100 00000001 00000000 00110010 00010000 01100000 00000000 00000000 00000000 00110100 00000000 00000000 10000110 00001001 00000000 10000000 00100000 00000000 00001000 000}
  public static final byte[] GRPSPLIT7 = new byte[] {-118, 33, -128, 0, 76, 8, 6, 0, 0, 0, 44, 0, 0, 97, -112, 0, 1, 4, 0, 16, 0};
  // {...1 0-bits... 01111111 11011111 10111101 11011111 11111010 10011011 11101111 11111110 11101111 11101101 11101111 11111101 11011111 11110110 10101111 11111111 11010111 11111111 11110111 11010111 111}
  public static final byte[] GRPSPLIT8 = new byte[] {-2, -5, -67, -5, 95, -39, -9, 127, -9, -73, -9, -65, -5, 111, -11, -1, -21, -1, -17, -21, 15};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {...1 0-bits... 11110001 10110011 11011111 11101111 11011111 11101110 10110011 11011111 11110110 00111110 11010001 11101111 11110001 11111101 11111111 11110010 01101111 11111101 10111111 11111110 111}
  public static final byte[] GRPSPLIT10 = new byte[] {-113, -51, -5, -9, -5, 119, -51, -5, 111, 124, -117, -9, -113, -65, -1, 79, -10, -65, -3, 127, 15};
  // {...1 0-bits... 00000000 00000000 00000000 01000000 00001000 00000000 00100000 00000000 00100010 00000000 00000001 00001000 00000001 01000000 00101000 00000000 00000100 00000000 00000000 10000000 000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 2, 16, 0, 4, 0, 68, 0, -128, 16, -128, 2, 20, 0, 32, 0, 0, 1, 0};
  // {...5 0-bits... 11111101 11111101 11111111 10111110 11111111 11111111 01111110 11111101 11111010 11110100 10111110 11111011 11111111 11111111 11101111 11111111 11111111 11111101 11111111 011}
  public static final byte[] GRPSPLIT12 = new byte[] {-65, -65, -1, 125, -1, -1, 126, -65, 95, 47, 125, -33, -1, -1, -9, -1, -1, -65, -1, -10};
  // {...5 0-bits... 11111111 11111111 11111111 10111111 11111111 11111111 01111110 11111111 11111111 11111110 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -3, -1, -1, 126, -1, -1, 127, -3, -1, -1, -1, -1, -1, -1, -1, -1, -9};
  // {...5 0-bits... 11011111 11111111 11011111 11111111 10111111 11111111 10111111 11111101 11111111 11111111 11111111 11111111 10111111 11011111 11111011 11001111 11111111 11111111 01111111 111}
  public static final byte[] GRPSPLIT14 = new byte[] {-5, -1, -5, -1, -3, -1, -3, -65, -1, -1, -1, -1, -3, -5, -33, -13, -1, -1, -2, -1};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_33_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <44.560547f ? 
             (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <16.70567f ? 
                 (data[0 /* age */] <61.5f ? 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        9.003197E-4f : 
                        -0.11827008f) : 
                     (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <0.5f ? 
                        0.04953917f : 
                        -0.09882822f)) : 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.01974431f : 
                        0.032565463f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                        -0.056233652f : 
                        0.04390332f))) : 
             (!Double.isNaN(data[76 /* hcc_169 */]) && (GenModel.bitSetIsInRange(32, 0, data[76]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[76])) ? 
                 (data[107 /* ANTIBIOTICS */] <6.5f ? 
                     (!Double.isNaN(data[1 /* sex */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                        -0.3563219f : 
                        -0.04039462f) : 
                    0.044942908f) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                     (data[3 /* packYears */] <69.720474f ? 
                        -0.0018170254f : 
                        -0.15396538f) : 
                     (!Double.isNaN(data[75 /* hcc_167 */]) && (GenModel.bitSetIsInRange(32, 0, data[75]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[75])) ? 
                        -0.13367839f : 
                        0.06280092f)))) : 
         (Double.isNaN(data[0]) || data[0 /* age */] <69.5f ? 
             (Double.isNaN(data[120]) || data[120 /* SEDATIVE/HYPNOTICS */] <10.5f ? 
                 (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 156, 5, data[2])) ? 
                        -0.07716663f : 
                        0.020540286f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 156, 5, data[2])) ? 
                        0.034238633f : 
                        0.16277911f)) : 
                -0.20333937f) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 156, 5, data[2])) ? 
                 (Double.isNaN(data[122]) || data[122 /* UNCLASSIFIED DRUG PRODUCTS */] <0.5f ? 
                    0.040534325f : 
                    -0.1570202f) : 
                 (data[3 /* packYears */] <205.38281f ? 
                     (data[123 /* bmi_mean */] <17.014101f ? 
                        -0.22239314f : 
                        0.063632704f) : 
                     (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <2.5f ? 
                        0.1097563f : 
                        -0.076569565f)))));
    return pred;
  } // constant pool size = 229B, number of visited nodes = 25, static init size = 762B
  // {11111111 01111111 11111110 10111101 11111111 11111111 11011111 11111101 11110111 11111011 11111111 11111111 01111111 01111110 11111111 11111111 11100111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -2, 127, -67, -1, -1, -5, -65, -17, -33, -1, -1, -2, 126, -1, -1, -25, -1, -1, -1, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {1, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 01111111 11011111 11110111 11111011 11111111 01111111 11111111 11111111 11111111 11111111 00011110 11110111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -9, -1, -1, -2, -5, -17, -33, -1, -2, -1, -1, -1, -1, 120, -17, -1, -1, -1, 63};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01000001 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-126, 0, 0, 0};
  // {...5 0-bits... 01101101 11111111 11111110 11111110 11111111 11111111 01111110 11111101 11101110 11111100 11111110 11111111 11101111 11011101 11110111 11111111 11011111 11111011 1111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-74, -1, 127, 127, -1, -1, 126, -65, 119, 63, 127, -1, -9, -69, -17, -1, -5, -33, -1, 13};
  // {...5 0-bits... 00000000 00000100 00000000 00000000 00000011 00000000 00000001 00000000 00010000 00010011 00000000 00000000 00000000 00000000 00010000 01000000 00000000 00000000 0001100}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 32, 0, 0, -64, 0, -128, 0, 8, -56, 0, 0, 0, 0, 8, 2, 0, 0, 24, 0};
  // {...5 0-bits... 11111111 11111101 11111111 11111110 11111110 11111111 11111111 11111111 11101110 11111101 11111111 11111111 11111111 11101011 11111111 01101111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -65, -1, 127, 127, -1, -1, -1, 119, -65, -1, -1, -1, -41, -1, -10, -1, -1, -1, 15};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_34_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <74.5f ? 
         (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <9.140625f ? 
                     (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <0.5f ? 
                        -0.015384977f : 
                        -0.06155396f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        -0.088316284f : 
                        0.016147977f)) : 
                 (data[92 /* HTN (HYPERTENSION) */] <1.5f ? 
                     (data[0 /* age */] <42.5f ? 
                        -0.05455446f : 
                        0.04583175f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(158, 7, data[2]) || (GenModel.bitSetIsInRange(158, 7, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 158, 7, data[2])) ? 
                        -0.016382236f : 
                        0.08495233f))) : 
             (!Double.isNaN(data[28 /* hcc_47 */]) && (GenModel.bitSetIsInRange(32, 0, data[28]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[28])) ? 
                 (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                    -0.006881608f : 
                    -0.13803548f) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
                     (data[94 /* HYPERLIPIDEMIA */] <1.5f ? 
                        -0.0938032f : 
                        0.062054537f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
                        0.09867306f : 
                        0.18608537f)))) : 
         (Double.isNaN(data[0]) || data[0 /* age */] <88.5f ? 
             (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 163, 0, data[2])) ? 
                     (Double.isNaN(data[105]) || data[105 /* ANTIARTHRITICS */] <0.5f ? 
                        -0.052307498f : 
                        -0.18091626f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 163, 0, data[2])) ? 
                        0.03460866f : 
                        0.11664264f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 163, 0, data[2])) ? 
                     (data[103 /* ANALGESICS */] <13.5f ? 
                        -0.05852346f : 
                        0.10593885f) : 
                     (Double.isNaN(data[107]) || data[107 /* ANTIBIOTICS */] <20.5f ? 
                        0.0155850435f : 
                        -0.28245202f))) : 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 163, 0, data[2])) ? 
                 (data[125 /* bmi_min */] <24.11875f ? 
                     (Double.isNaN(data[116]) || data[116 /* GASTROINTESTINAL */] <1.5f ? 
                        -0.023802355f : 
                        -0.09266985f) : 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <1.5f ? 
                        0.0034351123f : 
                        -0.13886285f)) : 
                 (Double.isNaN(data[124]) || data[124 /* bmi_max */] <24.78453f ? 
                     (data[96 /* OSTEOARTHRITIS */] <0.5f ? 
                        -0.07889875f : 
                        0.16056572f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(146, 11, data[2]) || (GenModel.bitSetIsInRange(146, 11, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 146, 11, data[2])) ? 
                        0.09908866f : 
                        0.16372974f)))));
    return pred;
  } // constant pool size = 345B, number of visited nodes = 29, static init size = 1362B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000001 01000011 01110100 00010010 00111100 00110101 00111000 01110010 00100000 00000100 00111101 00000001 00001100 00110100 00000001 00110001 00001010 00110000 00101101 11101011 011110}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, -62, 46, 72, 60, -84, 28, 78, 4, 32, -68, -128, 48, 44, -128, -116, 80, 12, -76, -41, 30};
  // {10111111 01101111 11111110 11110111 11111111 11111101 11111111 11111111 11111111 01110111 01111101 11111111 11111111 11111111 01011111 00111111 11111011 11110101 11111111 11111011 011111}
  public static final byte[] GRPSPLIT2 = new byte[] {-3, -10, 127, -17, -1, -65, -1, -1, -1, -18, -66, -1, -1, -1, -6, -4, -33, -81, -1, -33, 62};
  // {...7 0-bits... 11111110 11110101 11111111 11110011 11111111 11110111 11010110 11101111 11111101 11111011 01111111 11111111 11101111 11111111 11101111 11111011 11111111 11111101 1101101}
  public static final byte[] GRPSPLIT3 = new byte[] {127, -81, -1, -49, -1, -17, 107, -9, -65, -33, -2, -1, -9, -1, -9, -33, -1, -65, -37, 55};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01011111 11111111 11111111 11111111 11111100 11110111 11111111 11111110 11111111 01111010 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -1, -1, -1, -1, -6, -1, -1, -1, 63, -17, -1, 127, -1, 94, -1, -1, -1, -1, 63};
  // {01000000 00010000 00000000 00000010 00000000 00000000 00000000 01010000 00000000 00000000 10000000 00000000 00000000 00000000 00000100 00000000 10001000 00000000 00000000 00000100 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 8, 0, 64, 0, 0, 0, 10, 0, 0, 1, 0, 0, 0, 32, 0, 17, 0, 0, 32, 0};
  // {11111111 11111111 11101111 11101111 11111111 11100101 11011111 11111111 11011111 11110110 11111111 10111110 11111101 11011001 11111111 11111111 11101111 11111111 11101011 11111111 111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -9, -9, -1, -89, -5, -1, -5, 111, -1, 125, -65, -101, -1, -1, -9, -1, -41, -1, 7};
  // {11111010 10001111 11111111 11111101 11110111 01111110 01111111 11101001 11101111 00111111 10110100 11110111 11111110 11111110 11111011 10101111 01110111 11010101 11011111 01111111 011}
  public static final byte[] GRPSPLIT8 = new byte[] {95, -15, -1, -65, -17, 126, -2, -105, -9, -4, 45, -17, 127, 127, -33, -11, -18, -85, -5, -2, 6};
  // {11111111 01111111 11101111 11111111 11111111 11011111 01010101 11111111 11101111 01011011 01100111 11111111 01101110 01111111 01110111 11111010 11110111 11111111 11111111 11111111 011}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -2, -9, -1, -1, -5, -86, -1, -9, -38, -26, -1, 118, -2, -18, 95, -17, -1, -1, -1, 6};
  // {11111011 10011101 11011111 11111111 11101111 11111101 11111111 11101101 11111111 00111110 01110110 11110111 11011110 11111110 11011111 11011111 11111111 11111111 11111111 11111011 011}
  public static final byte[] GRPSPLIT10 = new byte[] {-33, -71, -5, -1, -9, -65, -1, -73, -1, 124, 110, -17, 123, 127, -5, -5, -1, -1, -1, -33, 6};
  // {...11 0-bits... 00000000 00000000 00000000 01000000 01000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000010 00010100 00000000 0100000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 64, 40, 0, 2, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_35_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[104]) || data[104 /* ANESTHETICS */] <0.5f ? 
         (data[0 /* age */] <51.5f ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (Double.isNaN(data[62 /* hcc_112 */]) || !GenModel.bitSetIsInRange(32, 0, data[62]) || (GenModel.bitSetIsInRange(32, 0, data[62]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[62])) ? 
                     (Double.isNaN(data[96]) || data[96 /* OSTEOARTHRITIS */] <0.5f ? 
                        -0.03520761f : 
                        0.1218209f) : 
                    0.20033218f) : 
                 (data[0 /* age */] <36.5f ? 
                     (data[121 /* SKIN PREPS */] <0.5f ? 
                        0.07520917f : 
                        -0.1071723f) : 
                     (data[100 /* ROUTINE ADULT HEALTH CHECK UP EXAM */] <0.5f ? 
                        -0.022536505f : 
                        0.15481599f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                 (data[121 /* SKIN PREPS */] <4.5f ? 
                     (data[94 /* HYPERLIPIDEMIA */] <6.5f ? 
                        -0.025464682f : 
                        -0.10107129f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(155, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 155, 3, data[2])) ? 
                        -0.021433262f : 
                        0.061358407f)) : 
                 (Double.isNaN(data[118]) || data[118 /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */] <2.5f ? 
                     (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                        0.023795897f : 
                        -0.008383474f) : 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.046260037f : 
                        0.035504524f)))) : 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <1.828125f ? 
             (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[8])) ? 
                 (Double.isNaN(data[11 /* hcc_11 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (GenModel.bitSetIsInRange(32, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[11])) ? 
                     (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[10])) ? 
                        -0.043661673f : 
                        0.05769587f) : 
                     (data[123 /* bmi_mean */] <24.941822f ? 
                        0.15212628f : 
                        0.028652972f)) : 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[88]) || data[88 /* COUGH */] <0.5f ? 
                        0.07445489f : 
                        0.16729043f) : 
                     (Double.isNaN(data[121]) || data[121 /* SKIN PREPS */] <0.5f ? 
                        -0.13428548f : 
                        0.11961052f))) : 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 165, 0, data[2])) ? 
                 (Double.isNaN(data[110]) || data[110 /* CARDIAC DRUGS */] <1.5f ? 
                     (Double.isNaN(data[88]) || data[88 /* COUGH */] <0.5f ? 
                        -0.16443686f : 
                        0.007964056f) : 
                    0.049905173f) : 
                 (data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 156, 5, data[2])) ? 
                        -0.007204481f : 
                        0.11076624f) : 
                     (Double.isNaN(data[93]) || data[93 /* HX OF MI */] <5.5f ? 
                        0.07824808f : 
                        -0.10847538f)))));
    return pred;
  } // constant pool size = 246B, number of visited nodes = 29, static init size = 768B
  // {00010000 10000000 00000001 00000000 00101000 00000000 00100100 00000010 00000000 00000000 00100100 00000000 00000000 00100000 00000000 00000001 01001000 00000000 01000100 10000000 001010}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 1, -128, 0, 20, 0, 36, 64, 0, 0, 36, 0, 0, 4, 0, -128, 18, 0, 34, 1, 20};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {11100101 01101011 11011110 11010011 11111111 01011101 01111110 11111010 11111100 00010100 11101101 11010111 11101101 01111111 01011001 01111111 01101011 10110101 00111111 01111011 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-89, -42, 123, -53, -1, -70, 126, 95, 63, 40, -73, -21, -73, -2, -102, -2, -42, -83, -4, -34, 63};
  // {...3 0-bits... 11111111 11111111 11111111 11111111 11111011 11111011 11110111 11111111 11110101 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 10111101 11111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -1, -33, -33, -17, -1, -81, -1, -1, -1, -1, -1, -33, -1, -1, -67, -1, 3};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10111111 01111111 11101111 11111111 11101101 01111101 11111101 11111111 11011111 01110111 01111111 11111111 11111111 11111111 01111111 01101011 11110111 11111111 11111011 11111011 11111}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -2, -9, -1, -73, -66, -65, -1, -5, -18, -2, -1, -1, -1, -2, -42, -17, -1, -33, -33, 31};
  // {...5 0-bits... 01011011 10111111 11111111 11111110 11111110 11111011 01111101 10111101 11111111 11111110 10011111 11111111 11011011 11011111 11111011 11111101 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-38, -3, -1, 127, 127, -33, -66, -67, -1, 127, -7, -1, -37, -5, -33, -65, -1, -1, 127, 15};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_36_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
         (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
             (data[126 /* bmi_var */] <10.340965f ? 
                 (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (!Double.isNaN(data[14 /* hcc_18 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[14])) ? 
                        -0.04584139f : 
                        -0.011962779f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.02763754f : 
                        0.04297899f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <61.5f ? 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        4.3931464E-4f : 
                        -0.08765188f) : 
                     (data[3 /* packYears */] <14.0625f ? 
                        -0.0774334f : 
                        0.04147916f))) : 
             (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <4.5f ? 
                 (data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 156, 5, data[2])) ? 
                        0.060703117f : 
                        0.14004524f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 156, 5, data[2])) ? 
                        -0.14223447f : 
                        0.044673312f)) : 
                 (data[113 /* DIURETICS */] <6.5f ? 
                    -0.27274084f : 
                     (data[124 /* bmi_max */] <29.587265f ? 
                        -0.0706346f : 
                        0.120345585f)))) : 
         (data[3 /* packYears */] <205.43555f ? 
             (data[0 /* age */] <62.5f ? 
                 (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <32.879166f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <5.5f ? 
                        -0.0047253855f : 
                        0.12241389f) : 
                     (Double.isNaN(data[114]) || data[114 /* EENT PREPS */] <0.5f ? 
                        -0.10437595f : 
                        0.038622156f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 156, 5, data[2])) ? 
                     (Double.isNaN(data[103]) || data[103 /* ANALGESICS */] <7.0f ? 
                        -0.0037140534f : 
                        -0.17527804f) : 
                     (!Double.isNaN(data[54 /* hcc_100 */]) && (GenModel.bitSetIsInRange(32, 0, data[54]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[54])) ? 
                        -0.05205621f : 
                        0.05339314f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 156, 5, data[2])) ? 
                 (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <3.5f ? 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <25.815f ? 
                        -0.13515607f : 
                        -0.06551962f) : 
                    0.038715396f) : 
                 (data[0 /* age */] <41.0f ? 
                     (Double.isNaN(data[121]) || data[121 /* SKIN PREPS */] <0.5f ? 
                        -0.10531166f : 
                        0.07866019f) : 
                     (data[116 /* GASTROINTESTINAL */] <1.5f ? 
                        0.080851614f : 
                        0.024170125f)))));
    return pred;
  } // constant pool size = 234B, number of visited nodes = 29, static init size = 696B
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 0, 0, 0};
  // {11111110 11111111 11101110 11101111 11111111 11101111 11110111 10111111 11101111 10110111 11110111 11111111 11111101 01111110 11001111 11011011 01110111 11111111 11111011 11111111 011111}
  public static final byte[] GRPSPLIT1 = new byte[] {127, -1, 119, -9, -1, -9, -17, -3, -9, -19, -17, -1, -65, 126, -13, -37, -18, -1, -33, -1, 62};
  // {...5 0-bits... 00000110 00000000 00000000 00000000 00000000 01000000 01000000 00000110 00010000 00000001 01100001 00000000 00100000 00010000 00001100 00010001 00000000 00000000 1000000}
  public static final byte[] GRPSPLIT2 = new byte[] {96, 0, 0, 0, 0, 2, 2, 96, 8, -128, -122, 0, 4, 8, 48, -120, 0, 0, 1, 8};
  // {...5 0-bits... 11111001 11111111 11011111 11111110 11111111 11111111 11111111 10111110 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11001111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-97, -1, -5, 127, -1, -1, -1, 125, -9, -1, -1, -1, -1, -1, -1, -13, -1, -1, -1, 15};
  // {...5 0-bits... 11111111 11111101 11111111 11111110 11111110 11111111 11111110 11111111 11101110 11111111 11111110 11111111 11111011 11101111 11110011 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -65, -1, 127, 127, -1, 127, -1, 119, -1, 127, -1, -33, -9, -49, -1, -1, -1, -1, 15};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 11100111 11111111 11111111 10111110 11111111 11111111 11111111 11111101 11111111 11111101 11111110 11111111 11101111 11111101 11111111 01000111 11111111 11111011 1111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-25, -1, -1, 125, -1, -1, -1, -65, -1, -65, 127, -1, -9, -65, -1, -30, -1, -33, -1, 12};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_37_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <0.5f ? 
         (data[116 /* GASTROINTESTINAL */] <8.5f ? 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <0.5f ? 
                     (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <2.5f ? 
                        -0.04940125f : 
                        0.061545193f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 2, data[2]) || (GenModel.bitSetIsInRange(164, 2, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 164, 2, data[2])) ? 
                        -0.13087766f : 
                        -0.021909935f)) : 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.0132697625f : 
                        0.09038006f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 0, data[2]) || (GenModel.bitSetIsInRange(164, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 164, 0, data[2])) ? 
                        -0.15412189f : 
                        0.059049122f))) : 
             (data[0 /* age */] <37.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 163, 0, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 163, 0, data[2])) ? 
                        -0.07671018f : 
                        -3.5620856E-4f) : 
                    0.09877057f) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 163, 0, data[2])) ? 
                     (data[3 /* packYears */] <16.171875f ? 
                        -0.055435736f : 
                        0.014511034f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 0, data[2]) || (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 163, 0, data[2])) ? 
                        0.04965647f : 
                        0.10638342f)))) : 
         (data[109 /* ANTIHYPERGLYCEMICS */] <2.0f ? 
             (!Double.isNaN(data[29 /* hcc_48 */]) && (GenModel.bitSetIsInRange(32, 0, data[29]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[29])) ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 164, 1, data[2])) ? 
                     (Double.isNaN(data[59 /* hcc_108 */]) || !GenModel.bitSetIsInRange(32, 0, data[59]) || (GenModel.bitSetIsInRange(32, 0, data[59]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[59])) ? 
                        -0.21929395f : 
                        -0.13297057f) : 
                     (!Double.isNaN(data[48 /* hcc_85 */]) && (GenModel.bitSetIsInRange(32, 0, data[48]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[48])) ? 
                        -0.0862189f : 
                        1.9158538E-6f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 164, 1, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 164, 1, data[2])) ? 
                        -0.09625193f : 
                        0.027008882f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 164, 1, data[2])) ? 
                        0.09934988f : 
                        0.17951548f))) : 
             (data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 160, 5, data[2])) ? 
                     (Double.isNaN(data[122]) || data[122 /* UNCLASSIFIED DRUG PRODUCTS */] <5.5f ? 
                        -0.045061897f : 
                        -0.25553852f) : 
                     (data[111 /* CARDIOVASCULAR */] <6.5f ? 
                        0.1729383f : 
                        0.06766311f)) : 
                 (data[123 /* bmi_mean */] <43.282196f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(160, 5, data[2]) || (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT15, 160, 5, data[2])) ? 
                        -0.059654497f : 
                        0.03144823f) : 
                     (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <4.5f ? 
                        -0.052352335f : 
                        -0.26796857f)))));
    return pred;
  } // constant pool size = 421B, number of visited nodes = 30, static init size = 1794B
  // {11000111 01110111 01110110 10010010 01111111 11111111 00011101 11111010 10000100 00010000 00111011 00001011 00001101 00010100 01001001 00111111 01100110 10110101 10111101 11111011 111100}
  public static final byte[] GRPSPLIT0 = new byte[] {-29, -18, 110, 73, -2, -1, -72, 95, 33, 8, -36, -48, -80, 40, -110, -4, 102, -83, -67, -33, 15};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000000 00000010 00001000 00000000 00000011 00000000 00000000 00000000 00000000 00000000 10000000 00000010 00000000 00000000 00000000 00000000 00}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 64, 16, 0, -64, 0, 0, 0, 0, 0, 1, 64, 0, 0, 0, 0, 0};
  // {11111111 11111111 11111111 11111101 11111111 11111111 11111111 11110101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -65, -1, -1, -1, -81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000001 00000000 00000000 00000000 10000000 00000000 00000000 10000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 8, 0, 0, 0, 0, 0, 2, 0, -128, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11111011 11101111 11101011 11111101 11111111 00110111 01110110 11100111 11001000 10011011 01101101 11110101 11111110 11111111 01111011 00011010 10111111 11110111 10111111 11111100 111}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, -9, -41, -65, -1, -20, 110, -25, 19, -39, -74, -81, 127, -1, -34, 88, -3, -17, -3, 63, 7};
  // {11010000 10000100 00000001 00001000 00110010 00010000 01100000 00000010 00000000 00000000 01101101 00000000 00000000 10100110 00101001 00010000 10001000 00000000 00000010 00000000 000}
  public static final byte[] GRPSPLIT6 = new byte[] {11, 33, -128, 16, 76, 8, 6, 64, 0, 0, -74, 0, 0, 101, -108, 8, 17, 0, 64, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
  // {...1 0-bits... 11111111 01011111 11111111 11111111 11011111 11111010 11111111 11111111 11111110 01111111 11101111 11111101 10111111 11111111 11111111 10110111 11101111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -6, -1, -1, -5, 95, -1, -1, 127, -2, -9, -65, -3, -1, -1, -19, -9, -1, -1, -1, 15};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {1, 0, 0, 0};
  // {...1 0-bits... 00000000 10000000 00001000 11000000 00111000 00000111 00100000 00010100 00100010 00000000 00001001 00000001 01000001 01000000 00101000 01000001 00000100 00000000 11000000 10010100 010}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 1, 16, 3, 28, -32, 4, 40, 68, 0, -112, -128, -126, 2, 20, -126, 32, 0, 3, 41, 2};
  // {...1 0-bits... 01111111 11111111 10111101 11011111 11111010 11011111 11111111 11111110 11111111 11111101 11101111 11111111 11011111 11110011 10111110 11111111 11010111 11111111 11010111 11011111 111}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, -1, -67, -5, 95, -5, -1, 127, -1, -65, -9, -1, -5, -49, 125, -1, -21, -1, -21, -5, 15};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000010 00000000 00000001 00000001 00000001 01000000 00101000 00000000 00000100 00000000 01000000 00000000 000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 0, 0, 0, 0, 0, 4, 0, 64, 0, -128, -128, -128, 2, 20, 0, 32, 0, 2, 0, 0};
  // {...5 0-bits... 00000100 00000000 00000000 00000000 00000001 00000000 01000000 00000000 10000000 00010100 00100000 00000000 00000000 10000000 00001010 10000001 00000000 00001000 00000000 010}
  public static final byte[] GRPSPLIT14 = new byte[] {32, 0, 0, 0, -128, 0, 2, 0, 1, 40, 4, 0, 0, 1, 80, -127, 0, 16, 0, 2};
  // {...5 0-bits... 11011111 11111101 11111111 11111110 10111111 11111111 11111111 11111110 11111111 11111111 11111110 11111111 11111111 11011111 11111111 11001110 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT15 = new byte[] {-5, -65, -1, 127, -3, -1, -1, 127, -1, -1, 127, -1, -1, -5, -1, 115, -1, -1, -1, -1};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_38_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[61])) ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <46.38867f ? 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                 (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
                     (data[126 /* bmi_var */] <13.787953f ? 
                        -0.017719697f : 
                        0.0038127236f) : 
                     (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <3.5f ? 
                        0.033956677f : 
                        -0.06288639f)) : 
                 (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <9.0f ? 
                     (Double.isNaN(data[112]) || data[112 /* COUGH/COLD PREPARATIONS */] <1.5f ? 
                        0.019440765f : 
                        -0.031319473f) : 
                     (Double.isNaN(data[115]) || data[115 /* ELECT/CALORIC/H2O */] <6.5f ? 
                        0.11885388f : 
                        -0.046750933f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                -0.091364294f : 
                 (Double.isNaN(data[114]) || data[114 /* EENT PREPS */] <7.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(157, 5, data[2]) || (GenModel.bitSetIsInRange(157, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 157, 5, data[2])) ? 
                        0.056115076f : 
                        0.12852691f) : 
                     (data[104 /* ANESTHETICS */] <1.5f ? 
                        -0.21619381f : 
                        0.02184688f)))) : 
         (Double.isNaN(data[108]) || data[108 /* ANTICOAGULANTS */] <2.0f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <85.5f ? 
                 (Double.isNaN(data[126]) || data[126 /* bmi_var */] <0.46106562f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 156, 5, data[2])) ? 
                        -0.061740726f : 
                        0.068554066f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 156, 5, data[2])) ? 
                        -0.047047574f : 
                        0.03201883f)) : 
                 (Double.isNaN(data[118]) || data[118 /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */] <3.5f ? 
                     (Double.isNaN(data[103]) || data[103 /* ANALGESICS */] <7.5f ? 
                        0.023456099f : 
                        -0.12762867f) : 
                    -0.21129186f)) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 156, 5, data[2])) ? 
                 (data[123 /* bmi_mean */] <26.366257f ? 
                    -0.09937372f : 
                    -0.20526917f) : 
                 (Double.isNaN(data[108]) || data[108 /* ANTICOAGULANTS */] <11.0f ? 
                     (data[107 /* ANTIBIOTICS */] <1.5f ? 
                        -0.10282321f : 
                        0.029700892f) : 
                     (data[90 /* ESSENTIAL HTN */] <7.5f ? 
                        -0.25834578f : 
                        0.03909172f)))));
    return pred;
  } // constant pool size = 235B, number of visited nodes = 25, static init size = 798B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11000001 01100001 01000110 00000010 00111110 10000001 01011100 01111010 00000000 00000000 10111101 00001100 00001000 00110100 10000101 00110011 01001010 00110101 10101111 11101011 101110}
  public static final byte[] GRPSPLIT1 = new byte[] {-125, -122, 98, 64, 124, -127, 58, 94, 0, 0, -67, 48, 16, 44, -95, -52, 82, -84, -11, -41, 29};
  // {11111111 01111111 11111111 11111111 11110111 01110111 11011111 11111111 11111111 11110111 01111111 11111111 11111111 11111111 11111111 00111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -2, -1, -1, -17, -18, -5, -1, -1, -17, -2, -1, -1, -1, -1, -4, -1, -1, -1, -1, 63};
  // {...5 0-bits... 00000010 00000000 00000000 00000000 00000000 00010000 01000000 00000000 00011000 10001001 01000000 00000000 00000000 00000001 00000000 00100000 00000000 00000000 00000001}
  public static final byte[] GRPSPLIT3 = new byte[] {64, 0, 0, 0, 0, 8, 2, 0, 24, -111, 2, 0, 0, -128, 0, 4, 0, 0, -128, 0};
  // {...5 0-bits... 11111001 11111101 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11101110 10011111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-97, -65, -1, -3, -1, -1, -1, -1, -1, 119, -7, -1, -1, -9, -1, -1, -1, -1, -1, 7};
  // {...5 0-bits... 11110011 11111111 11111111 11111111 11101111 11111111 00111111 11111111 11111111 11101111 10011110 11111111 11011111 11111111 11111011 11001110 11111111 11011111 1111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-49, -1, -1, -1, -9, -1, -4, -1, -1, -9, 121, -1, -5, -1, -33, 115, -1, -5, -1, 15};
  // {...5 0-bits... 11111111 11111101 11111111 11111111 10111111 11111111 11111101 11111111 11111111 11101110 11111111 11111111 11011111 11111111 11111111 00111111 11111111 11110111 1111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -65, -1, -1, -3, -1, -65, -1, -1, 119, -1, -1, -5, -1, -1, -4, -1, -17, -1, 15};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_39_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* age */] <43.5f ? 
         (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
             (data[123 /* bmi_mean */] <46.61347f ? 
                 (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <1.5f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 161, 0, data[2])) ? 
                        -0.10578577f : 
                        -0.064660214f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(161, 0, data[2]) || (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 161, 0, data[2])) ? 
                        -0.027906489f : 
                        0.2090752f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(161, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 161, 0, data[2])) ? 
                     (data[123 /* bmi_mean */] <48.578564f ? 
                        0.28754517f : 
                        -0.035469096f) : 
                     (data[0 /* age */] <26.5f ? 
                        -0.110462524f : 
                        0.088492535f))) : 
             (Double.isNaN(data[0]) || data[0 /* age */] <32.5f ? 
                0.005292868f : 
                0.116521515f)) : 
         (!Double.isNaN(data[17 /* hcc_22 */]) && (GenModel.bitSetIsInRange(32, 0, data[17]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[17])) ? 
             (data[115 /* ELECT/CALORIC/H2O */] <8.5f ? 
                 (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <3.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(158, 0, data[2]) || (GenModel.bitSetIsInRange(158, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 158, 0, data[2])) ? 
                        -0.03793893f : 
                        0.14514221f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(158, 0, data[2]) || (GenModel.bitSetIsInRange(158, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 158, 0, data[2])) ? 
                        -0.07159406f : 
                        0.028575493f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 158, 0, data[2])) ? 
                     (data[3 /* packYears */] <42.1875f ? 
                        -0.2003464f : 
                        -0.090982996f) : 
                    0.113216534f)) : 
             (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 166, 0, data[2])) ? 
                     (data[107 /* ANTIBIOTICS */] <5.5f ? 
                        -0.038386617f : 
                        0.013293151f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 166, 0, data[2])) ? 
                        0.01245596f : 
                        0.046655353f)) : 
                 (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.029479587f : 
                        0.10077983f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(160, 5, data[2]) || (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 160, 5, data[2])) ? 
                        -0.14886148f : 
                        0.04050489f)))));
    return pred;
  } // constant pool size = 319B, number of visited nodes = 24, static init size = 1326B
  // {00000000 00000000 00000000 00000000 00000000 00000000 00100000 01000000 00000000 00000001 00000010 00000000 00000000 10100000 00000000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 0, 0, 0, 0, 4, 2, 0, -128, 64, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0};
  // {00000100 00010000 10000001 00000000 10001000 00000000 10000010 00010000 00000000 00101000 00000000 00000000 00000001 00000001 00000000 10000000 00000000 00000000 00000000 00000000 1}
  public static final byte[] GRPSPLIT1 = new byte[] {32, 8, -127, 0, 17, 0, 65, 8, 0, 20, 0, 0, -128, -128, 0, 1, 0, 0, 0, 0, 1};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, -128, -128, 0, 0, 0, 0, 0, 0, 0};
  // {00000000 10100000 00000000 00000000 00001000 00000000 00000000 00000010 00000000 10000000 00000000 00000000 00000001 00000000 00010000 00000000 10000000 00001000 00000000 00000000 0}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 5, 0, 0, 16, 0, 0, 64, 0, 1, 0, 0, -128, 0, 8, 0, 1, 16, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {00000001 00000000 00000000 00000010 00000000 00000000 00000100 00001000 00000000 00000000 10010000 00000000 00000000 00000100 00100000 00000110 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 0, 0, 64, 0, 0, 32, 16, 0, 0, 9, 0, 0, 32, 4, 96, 16, 0, 0, 0};
  // {00000100 00000000 00000000 00000000 00000000 00001000 10000110 00000010 00100000 00000000 10100011 10000000 00000000 00000001 00000100 00000000 00001000 00001000 00000000 000011}
  public static final byte[] GRPSPLIT6 = new byte[] {32, 0, 0, 0, 0, 16, 97, 64, 4, 0, -59, 1, 0, -128, 32, 0, 16, 16, 0, 48};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000101 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, -96, 0, 0, 0, 0};
  // {11100111 01101111 01011110 11000110 11111111 10100101 01111110 11111110 10111101 00110110 11111100 00011110 11011101 10010001 11011011 01111101 01101011 11110101 10101111 11111011 111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-25, -10, 122, 99, -1, -91, 126, 127, -67, 108, 63, 120, -69, -119, -37, -66, -42, -81, -11, -33, 31};
  // {11111011 10111111 11101011 11111111 01101101 11111111 11111011 11101011 11001010 11011111 00111111 11110001 11111110 11111110 11101111 10011111 10111111 11111110 01011111 01111110 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-33, -3, -41, -1, -74, -1, -33, -41, 83, -5, -4, -113, 127, 127, -9, -7, -3, 127, -6, 126, 63};
  // {...5 0-bits... 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11101111 11101111 11111111 11111111 11111100 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -9, -9, -1, -1, 63, -1, -1, -1, -1};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_40_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <0.5f ? 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[61])) ? 
             (data[116 /* GASTROINTESTINAL */] <8.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                     (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <0.5f ? 
                        -0.049456168f : 
                        -0.108642675f) : 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.013582454f : 
                        0.048399173f)) : 
                 (Double.isNaN(data[9 /* hcc_9 */]) || !GenModel.bitSetIsInRange(32, 0, data[9]) || (GenModel.bitSetIsInRange(32, 0, data[9]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[9])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                        -8.0440217E-4f : 
                        0.03795478f) : 
                    0.20657915f)) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                 (data[111 /* CARDIOVASCULAR */] <1.5f ? 
                    -0.15628089f : 
                    0.0044423225f) : 
                 (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <1.5f ? 
                     (Double.isNaN(data[103]) || data[103 /* ANALGESICS */] <42.0f ? 
                        0.06410507f : 
                        -0.22624208f) : 
                     (!Double.isNaN(data[43 /* hcc_79 */]) && (GenModel.bitSetIsInRange(32, 0, data[43]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[43])) ? 
                        -0.24088833f : 
                        0.01502525f)))) : 
         (data[109 /* ANTIHYPERGLYCEMICS */] <2.0f ? 
             (!Double.isNaN(data[29 /* hcc_48 */]) && (GenModel.bitSetIsInRange(32, 0, data[29]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[29])) ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 164, 1, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 164, 1, data[2])) ? 
                        -0.20586382f : 
                        -0.12584785f) : 
                     (!Double.isNaN(data[48 /* hcc_85 */]) && (GenModel.bitSetIsInRange(32, 0, data[48]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[48])) ? 
                        -0.076720215f : 
                        -2.7806612E-4f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 164, 1, data[2])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 164, 1, data[2])) ? 
                        -0.08568606f : 
                        0.02446001f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 164, 1, data[2])) ? 
                        0.09668836f : 
                        0.17576572f))) : 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 164, 1, data[2])) ? 
                 (data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                     (Double.isNaN(data[122]) || data[122 /* UNCLASSIFIED DRUG PRODUCTS */] <5.5f ? 
                        -0.038106687f : 
                        -0.23238768f) : 
                     (!Double.isNaN(data[67 /* hcc_134 */]) && (GenModel.bitSetIsInRange(32, 0, data[67]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[67])) ? 
                        -0.14031573f : 
                        0.008617766f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(164, 1, data[2]) || (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT15, 164, 1, data[2])) ? 
                     (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <7.5f ? 
                        0.10069114f : 
                        -0.009238045f) : 
                    0.16460535f))));
    return pred;
  } // constant pool size = 360B, number of visited nodes = 27, static init size = 1500B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11000111 01110111 01110110 10010010 00111111 11111111 00011111 11111010 10010100 00010000 10111011 00001011 00011101 00010100 11001001 00111111 01000111 10110101 10111101 10111011 111110}
  public static final byte[] GRPSPLIT1 = new byte[] {-29, -18, 110, 73, -4, -1, -8, 95, 41, 8, -35, -48, -72, 40, -109, -4, -30, -83, -67, -35, 31};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {11111011 11101111 11101011 11111101 11110111 00110111 01100110 11110111 11001000 10010011 01101101 11111101 11111100 11111111 01111011 00011000 10111110 11110111 11111111 10111000 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-33, -9, -41, -65, -17, -20, 102, -17, 19, -55, -74, -65, 63, -1, -34, 24, 125, -17, -1, 29, 63};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111011 11111111 11111111 11111111 01111100 11110111 11111111 11111111 01111111 11011101 11111111 11111111 10111111 11111111 011111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -1, -1, -1, -1, -34, -1, -1, -1, 62, -17, -1, -1, -2, -69, -1, -1, -3, -1, 62};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, 0, 0, 0};
  // {...1 0-bits... 11111111 01011111 11111111 11111111 11011111 11111010 11111111 11111111 11111110 01111111 11101111 11111101 10111111 11111111 11111111 10110110 11101111 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -6, -1, -1, -5, 95, -1, -1, 127, -2, -9, -65, -3, -1, -1, 109, -9, -1, -1, -1, 15};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00010000 00000010 01000000 00000000 00000000 00001001 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 8, 64, 2, 0, 0, -112, 0, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {...1 0-bits... 00000000 10000000 00001000 11000000 00111000 00000101 00100000 00010000 00100010 00000000 00000001 00000001 01000001 01000000 00101000 01000001 00000100 00000000 11000000 10000100 010}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 1, 16, 3, 28, -96, 4, 8, 68, 0, -128, -128, -126, 2, 20, -126, 32, 0, 3, 33, 2};
  // {...1 0-bits... 01111111 11111111 10111101 11011111 11111010 11011111 11101111 11111110 11111111 11111101 11101111 11111111 11011111 11110011 10111110 11111111 11010111 11111111 11010111 11011111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, -1, -67, -5, 95, -5, -9, 127, -1, -65, -9, -1, -5, -49, 125, -1, -21, -1, -21, -5, 15};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000001 01000000 00101000 00000000 00000100 00000000 01000000 00000000 000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, -128, 2, 20, 0, 32, 0, 2, 0, 0};
  // {...1 0-bits... 00000000 11000000 00000000 00110100 00100000 00110110 01000100 00000000 11001000 00001001 01000110 00000000 00000000 00001000 00000000 11101000 10000000 00000010 10000000 00010100 000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 3, 0, 44, 4, 108, 34, 0, 19, -112, 98, 0, 0, 16, 0, 23, 1, 64, 1, 40, 8};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00001001 00000000 00000000 00000000 00001000 00000000 10100000 00000000 00000000 00000000 00000000 000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 0, 0, 0, 0, 8, 0, 0, 0, -112, 0, 0, 0, 16, 0, 5, 0, 0, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_41_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[104]) || data[104 /* ANESTHETICS */] <0.5f ? 
         (data[0 /* age */] <51.5f ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[10])) ? 
                     (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[61])) ? 
                        -0.031074084f : 
                        0.08019433f) : 
                    0.12262885f) : 
                 (data[0 /* age */] <39.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 3, data[2]) || (GenModel.bitSetIsInRange(162, 3, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 162, 3, data[2])) ? 
                        -0.053029492f : 
                        0.09933858f) : 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <34.594376f ? 
                        0.10141252f : 
                        -0.11535638f))) : 
             (!Double.isNaN(data[16 /* hcc_21 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[16])) ? 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <3.65625f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 156, 5, data[2])) ? 
                        -0.13193418f : 
                        0.016622934f) : 
                     (Double.isNaN(data[114]) || data[114 /* EENT PREPS */] <1.5f ? 
                        0.05501469f : 
                        -0.11381489f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
                     (data[123 /* bmi_mean */] <39.280224f ? 
                        -0.02224612f : 
                        0.031918596f) : 
                     (data[98 /* PREDIABETES */] <0.5f ? 
                        0.023563296f : 
                        0.0040180986f)))) : 
         (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[8])) ? 
             (Double.isNaN(data[3]) || data[3 /* packYears */] <1.828125f ? 
                 (Double.isNaN(data[11 /* hcc_11 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (GenModel.bitSetIsInRange(32, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[11])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 165, 0, data[2])) ? 
                        -0.037988257f : 
                        0.06172654f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 165, 0, data[2])) ? 
                        -0.08926085f : 
                        0.073040426f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 165, 0, data[2])) ? 
                     (data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.010707877f : 
                        0.054171756f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 165, 0, data[2])) ? 
                        0.08724674f : 
                        0.14577705f))) : 
             (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <1.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(145, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 145, 5, data[2])) ? 
                    -0.08180868f : 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <15.784375f ? 
                        0.10340724f : 
                        0.010410547f)) : 
                -0.10357953f)));
    return pred;
  } // constant pool size = 326B, number of visited nodes = 26, static init size = 1320B
  // {00010000 10000000 00000001 00000000 00101000 00000000 00100100 00000010 00010000 00000000 00101100 00000000 00000000 10100000 00010000 00000001 01001000 00001000 01000100 10000000 001010}
  public static final byte[] GRPSPLIT0 = new byte[] {8, 1, -128, 0, 20, 0, 36, 64, 8, 0, 52, 0, 0, 5, 8, -128, 18, 16, 34, 1, 20};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {...3 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 00000000 10000000 00000010 00000000 00000000 00000000 0000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 1, 64, 0, 0, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 00000000 00000000 00000000 00000001 00000001 00100000 00000101 00000000 00000000 00000001 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 0000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, -128, -128, 4, -96, 0, 0, -128, 0, 0, 0, 4, 0, 0, 0, 0, 0, 8};
  // {11100101 01101011 11111110 11010011 11111101 01011101 01011110 11111010 11111000 00010100 11101101 11010111 11101101 01111110 01001001 01111101 11101011 10110101 00111111 01111011 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-89, -42, 127, -53, -65, -70, 122, 95, 31, 40, -73, -21, -73, 126, -110, -66, -41, -83, -4, -34, 63};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {01000000 00000100 00000000 00000000 00010010 10000010 01001000 01101000 00000000 00000100 00011000 00001000 00000000 00000000 10000100 00100010 00101010 00000000 10000000 11001010 00000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 32, 0, 0, 72, 65, 18, 22, 0, 32, 24, 16, 0, 0, 33, 68, 84, 0, 1, 83, 0};
  // {11111111 11101111 11111111 11111111 11111111 11111111 11111111 11101111 11101110 10111011 11110111 01111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -9, -1, -1, -1, -1, -1, -9, 119, -35, -17, -2, -1, -1, -1, -1, -1, -1, -1, -9, 31};
  // {00000001 01010100 00000100 00000010 00000000 00010000 10001000 00000100 01000100 01000000 00111000 00001000 00000010 00000100 00000100 00000011 11010000 00001001 01101000 00000000 10000}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 42, 32, 64, 0, 8, 17, 32, 34, 2, 28, 16, 64, 32, 32, -64, 11, -112, 22, 0, 1};
  // {00000000 00010100 00000000 00000000 00000000 00000000 10000000 00000100 00000000 00000000 00000000 00001000 00000010 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 40, 0, 0, 0, 0, 1, 32, 0, 0, 0, 16, 64, 0, 0, 0, 0, 16, 0, 0, 0};
  // {...5 0-bits... 11111111 11111101 11111111 11111111 11111111 11111111 11111101 11111111 11111011 11111101 11111111 11111111 10111111 11011111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -65, -1, -1, -1, -1, -65, -1, -33, -65, -1, -1, -3, -5, -1, -1, -1, -1, 1};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_42_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* age */] <74.5f ? 
         (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[8])) ? 
                     (Double.isNaN(data[11 /* hcc_11 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (GenModel.bitSetIsInRange(32, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[11])) ? 
                        -0.012639735f : 
                        0.058742363f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <71.5f ? 
                        0.086773016f : 
                        -0.07885568f)) : 
                 (data[92 /* HTN (HYPERTENSION) */] <1.5f ? 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.051467348f : 
                        0.010275697f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 9, data[2]) || (GenModel.bitSetIsInRange(156, 9, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 156, 9, data[2])) ? 
                        -0.020601954f : 
                        0.067298345f))) : 
             (!Double.isNaN(data[28 /* hcc_47 */]) && (GenModel.bitSetIsInRange(32, 0, data[28]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[28])) ? 
                 (data[123 /* bmi_mean */] <25.396824f ? 
                    -0.12607947f : 
                    -0.01208005f) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
                     (Double.isNaN(data[3]) || data[3 /* packYears */] <18.28125f ? 
                        -0.064742945f : 
                        0.13010842f) : 
                     (Double.isNaN(data[92]) || data[92 /* HTN (HYPERTENSION) */] <1.5f ? 
                        0.087961614f : 
                        0.16901569f)))) : 
         (Double.isNaN(data[0]) || data[0 /* age */] <88.5f ? 
             (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 163, 0, data[2])) ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <27.666563f ? 
                        0.0019774006f : 
                        -0.11046904f) : 
                     (!Double.isNaN(data[16 /* hcc_21 */]) && (GenModel.bitSetIsInRange(32, 0, data[16]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[16])) ? 
                        -0.03503095f : 
                        0.03907435f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(163, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 163, 0, data[2])) ? 
                     (data[103 /* ANALGESICS */] <13.5f ? 
                        -0.054995563f : 
                        0.13402988f) : 
                     (Double.isNaN(data[107]) || data[107 /* ANTIBIOTICS */] <20.5f ? 
                        0.012542608f : 
                        -0.19743036f))) : 
             (Double.isNaN(data[88]) || data[88 /* COUGH */] <0.5f ? 
                 (Double.isNaN(data[0]) || data[0 /* age */] <94.5f ? 
                     (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <6.5f ? 
                        -0.033296295f : 
                        0.09848884f) : 
                     (Double.isNaN(data[126]) || data[126 /* bmi_var */] <1.7474709f ? 
                        -0.12028815f : 
                        0.0022653397f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 156, 5, data[2])) ? 
                    -0.09609674f : 
                     (Double.isNaN(data[117]) || data[117 /* HORMONES */] <4.5f ? 
                        0.09812345f : 
                        -0.10563565f)))));
    return pred;
  } // constant pool size = 269B, number of visited nodes = 28, static init size = 930B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 01000011 01110100 00010010 00111100 00111111 00111000 01110010 00100000 00000100 00111101 00000001 10001100 00110110 00000001 00110001 00001010 00110000 00101101 11101010 011110}
  public static final byte[] GRPSPLIT1 = new byte[] {0, -62, 46, 72, 60, -4, 28, 78, 4, 32, -68, -128, 49, 108, -128, -116, 80, 12, -76, 87, 30};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 0, 0};
  // {...9 0-bits... 11111011 11010111 11111111 11001111 11101011 11011111 01011011 10111111 11110111 11101111 11111110 11111111 10111111 11111111 10111111 11101111 11111111 11110111 011}
  public static final byte[] GRPSPLIT4 = new byte[] {-33, -21, -1, -13, -41, -5, -38, -3, -17, -9, 127, -1, -3, -1, -3, -9, -1, -17, -10, 13};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11101111 11111111 01011111 11111111 11111111 11111111 11110100 11110111 11111111 11111110 11111111 01111010 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -9, -1, -6, -1, -1, -1, 47, -17, -1, 127, -1, 94, -1, -1, -1, -1, 63};
  // {11111111 11111111 11101111 11101111 11110111 11100101 11011111 11101011 11001111 11110110 11111111 10111110 11111101 11011001 11111111 10111111 11101111 11110111 11001011 11111111 011}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -9, -9, -17, -89, -5, -41, -13, 111, -1, 125, -65, -101, -1, -3, -9, -17, -45, -1, 6};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 0, 0};
  // {11111111 01111111 11101111 11111111 11111111 11011111 01010101 11111111 11101111 11011011 01100111 11111111 01101110 01111111 01110111 11111010 11110111 11111111 11111111 11111111 011}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -2, -9, -1, -1, -5, -86, -1, -9, -37, -26, -1, 118, -2, -18, 95, -17, -1, -1, -1, 6};
  // {...5 0-bits... 11111111 11111111 11111111 11111101 11101111 11111111 11111111 11111111 11111111 11001111 11111111 11111111 11011111 11011111 11111011 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -65, -9, -1, -1, -1, -1, -13, -1, -1, -5, -5, -33, -1, -1, -1, -1, 7};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_43_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[117]) || data[117 /* HORMONES */] <0.5f ? 
         (data[0 /* age */] <59.5f ? 
             (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
                 (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[61])) ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                        -0.07678952f : 
                        -0.010207642f) : 
                     (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                        -0.110899076f : 
                        0.072760664f)) : 
                 (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                     (Double.isNaN(data[125]) || data[125 /* bmi_min */] <23.828438f ? 
                        0.1751208f : 
                        -0.011556873f) : 
                    0.17509142f)) : 
             (Double.isNaN(data[0]) || data[0 /* age */] <88.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 165, 0, data[2])) ? 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        0.0090826545f : 
                        0.04812625f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 165, 0, data[2])) ? 
                        0.049404886f : 
                        0.12530722f)) : 
                 (Double.isNaN(data[88]) || data[88 /* COUGH */] <0.5f ? 
                     (Double.isNaN(data[116]) || data[116 /* GASTROINTESTINAL */] <5.5f ? 
                        -0.028995471f : 
                        -0.13075535f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(152, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 152, 5, data[2])) ? 
                        -0.06986698f : 
                        0.086620905f)))) : 
         (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[61])) ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 166, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[8])) ? 
                     (Double.isNaN(data[84]) || data[84 /* ASTIGMATISM. */] <0.5f ? 
                        -0.030337317f : 
                        0.018882157f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 166, 0, data[2])) ? 
                        -0.11108612f : 
                        0.07666893f)) : 
                 (Double.isNaN(data[121]) || data[121 /* SKIN PREPS */] <1.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(155, 9, data[2]) || (GenModel.bitSetIsInRange(155, 9, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 155, 9, data[2])) ? 
                        0.07722057f : 
                        0.15175197f) : 
                    -0.058528762f)) : 
             (!Double.isNaN(data[45 /* hcc_82 */]) && (GenModel.bitSetIsInRange(32, 0, data[45]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[45])) ? 
                -0.14820297f : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 166, 0, data[2])) ? 
                     (Double.isNaN(data[117]) || data[117 /* HORMONES */] <8.0f ? 
                        -0.024784246f : 
                        -0.16277158f) : 
                     (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <8.5f ? 
                        0.030359427f : 
                        -0.10278288f)))));
    return pred;
  } // constant pool size = 314B, number of visited nodes = 26, static init size = 1248B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {2, 0, 0, 0};
  // {10011101 00111111 11110011 11011101 00101111 00111101 00110010 10110011 01011100 11111011 11101100 11001101 01011101 10111111 01111001 01001101 11111111 10110110 01011111 11111101 111110}
  public static final byte[] GRPSPLIT2 = new byte[] {-71, -4, -49, -69, -12, -68, 76, -51, 58, -33, 55, -77, -70, -3, -98, -78, -1, 109, -6, -65, 31};
  // {01110111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-18, 0, 0, 0};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {125, 0, 0, 0};
  // {11000011 01100011 00010110 01000010 10111100 00010101 01001100 01000110 10100011 00000000 00111101 00000011 10001000 10110000 10000000 00110011 01101000 00000101 10100001 01001010 01101}
  public static final byte[] GRPSPLIT5 = new byte[] {-61, -58, 104, 66, 61, -88, 50, 98, -59, 0, -68, -64, 17, 13, 1, -52, 22, -96, -123, 82, 22};
  // {10000010 00000010 00010100 00000000 00100100 00010000 00001000 00000000 10000000 00000000 00010000 00000010 00001000 00110000 10000000 00110000 00000000 00000000 10000000 01001010 00001}
  public static final byte[] GRPSPLIT6 = new byte[] {65, 64, 40, 0, 36, 8, 16, 0, 1, 0, 8, 64, 16, 12, 1, 12, 0, 0, 1, 82, 16};
  // {...5 0-bits... 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11011111 11011111 11111011 11111111 11111111 11111111 111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -65, -1, -1, -1, -1, -1, -9, -1, -1, -5, -5, -33, -1, -1, -1, -1};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
  // {00000000 01000000 00100100 00110010 00010000 10000000 01001000 01101000 00000000 00000100 00000001 10000000 00000000 00000000 00000101 00000000 00000010 00111001 00101100 10000010 000100}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 2, 36, 76, 8, 1, 18, 22, 0, 32, -128, 1, 0, 0, -96, 0, 64, -100, 52, 65, 8};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {11111111 11111111 11101111 11111111 11111111 11111111 11111111 11101111 11111111 01011111 11001111 11111111 11111101 11111110 11111111 11111111 11110111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -1, -9, -1, -1, -1, -1, -9, -1, -6, -13, -1, -65, 127, -1, -1, -17, -1, -1, -1, 63};
  // {...9 0-bits... 00000000 00000000 01000000 00000000 00000000 00000000 00010000 00000000 00001000 00000011 00000000 00000000 00000000 00000010 00000000 00000100 01000000 01001001 00}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 2, 0, 0, 0, 8, 0, 16, -64, 0, 0, 0, 64, 0, 32, 2, -110, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {1, 0, 0, 0};
  // {11111111 11011111 11101111 11111111 11110101 11111111 01111011 11101111 11111111 11111111 01110110 11111111 11111110 11111111 01111111 10011110 01111111 11111110 10111111 11111111 111111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -5, -9, -1, -81, -1, -34, -9, -1, -1, 110, -1, 127, -1, -2, 121, -2, 127, -3, -1, 63};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_44_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <47.07422f ? 
             (data[126 /* bmi_var */] <10.340965f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <76.5f ? 
                        -0.050805666f : 
                        0.0052823536f) : 
                     (data[98 /* PREDIABETES */] <0.5f ? 
                        0.0014836142f : 
                        -0.023003025f)) : 
                 (data[3 /* packYears */] <9.363281f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 165, 0, data[2])) ? 
                        -0.08330721f : 
                        0.056263912f) : 
                     (Double.isNaN(data[99]) || data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.016364958f : 
                        -0.037034802f))) : 
             (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <4.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(157, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 157, 5, data[2])) ? 
                     (Double.isNaN(data[114]) || data[114 /* EENT PREPS */] <1.5f ? 
                        0.016622305f : 
                        -0.21344377f) : 
                     (data[0 /* age */] <62.5f ? 
                        0.08245941f : 
                        0.04912057f)) : 
                -0.1894122f)) : 
         (data[3 /* packYears */] <205.43555f ? 
             (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <5.5f ? 
                 (data[123 /* bmi_mean */] <15.645833f ? 
                    -0.16940816f : 
                     (data[0 /* age */] <65.0f ? 
                        -0.012643169f : 
                        0.031738274f)) : 
                 (data[117 /* HORMONES */] <7.0f ? 
                     (data[3 /* packYears */] <9.803125f ? 
                        0.16474456f : 
                        0.082781866f) : 
                    -0.07650243f)) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 156, 5, data[2])) ? 
                 (data[0 /* age */] <57.0f ? 
                    -0.14503175f : 
                    -0.026086032f) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 156, 5, data[2])) ? 
                     (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <1.5f ? 
                        0.033690676f : 
                        0.09497528f) : 
                     (data[121 /* SKIN PREPS */] <0.5f ? 
                        0.19521661f : 
                        1.20402925E-4f)))));
    return pred;
  } // constant pool size = 205B, number of visited nodes = 24, static init size = 642B
  // {11000111 01010111 01011110 10000010 01111111 11011101 01101101 11111011 00010100 00010100 00111111 10001010 10101101 00010110 01010101 01111101 11101011 11111100 11101101 11111011 111100}
  public static final byte[] GRPSPLIT0 = new byte[] {-29, -22, 122, 65, -2, -69, -74, -33, 40, 40, -4, 81, -75, 104, -86, -66, -41, 63, -73, -33, 15};
  // {00000000 00000000 00010000 00000000 00001000 00000000 10000000 00000010 00000000 00000000 00000000 00001000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00010}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 8, 0, 16, 0, 1, 64, 0, 0, 0, 16, 0, 32, 0, 0, 0, 0, 0, 0, 8};
  // {...5 0-bits... 11111111 11111101 11111111 11111111 11101111 11111011 10111100 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11100011 11011110 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -65, -1, -1, -9, -33, 61, -1, -1, -9, -1, -1, -1, -1, -57, 123, -1, -1, -1, 31};
  // {...5 0-bits... 11100111 11111111 11111111 10111110 11111111 11111111 11111111 11111101 11111111 11111101 11111111 11111111 11101111 11111101 11111111 01000111 11111111 11111011 1111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-25, -1, -1, 125, -1, -1, -1, -65, -1, -65, -1, -1, -9, -65, -1, -30, -1, -33, -1, 13};
  // {...5 0-bits... 00000000 00000000 00000000 00000010 00000001 00010000 01000000 00000100 00010000 00000001 00000000 10000000 00000000 00000000 00000000 01000000 00000000 00000000 0001000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 64, -128, 8, 2, 32, 8, -128, 0, 1, 0, 0, 0, 2, 0, 0, 8, 8};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_45_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[104]) || data[104 /* ANESTHETICS */] <0.5f ? 
         (data[0 /* age */] <41.5f ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (data[123 /* bmi_mean */] <42.391083f ? 
                     (Double.isNaN(data[100]) || data[100 /* ROUTINE ADULT HEALTH CHECK UP EXAM */] <0.5f ? 
                        -0.06273579f : 
                        -0.09712316f) : 
                     (Double.isNaN(data[116]) || data[116 /* GASTROINTESTINAL */] <1.5f ? 
                        -0.023835607f : 
                        0.32467124f)) : 
                 (Double.isNaN(data[0]) || data[0 /* age */] <33.5f ? 
                     (data[123 /* bmi_mean */] <22.589062f ? 
                        0.0855009f : 
                        -0.083397016f) : 
                     (data[124 /* bmi_max */] <31.475079f ? 
                        0.048066292f : 
                        0.15967534f))) : 
             (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.03363375f : 
                        0.037475377f) : 
                     (!Double.isNaN(data[75 /* hcc_167 */]) && (GenModel.bitSetIsInRange(32, 0, data[75]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[75])) ? 
                        -0.16782217f : 
                        0.012006755f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <90.0f ? 
                        0.014825516f : 
                        -0.036452156f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
                        0.0625285f : 
                        0.18004344f)))) : 
         (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 166, 0, data[2])) ? 
             (Double.isNaN(data[85]) || data[85 /* CAD OF NATIVE ARTERY */] <1.5f ? 
                 (data[107 /* ANTIBIOTICS */] <1.5f ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <61.5f ? 
                        -0.10139782f : 
                        -0.18323368f) : 
                     (Double.isNaN(data[122]) || data[122 /* UNCLASSIFIED DRUG PRODUCTS */] <2.5f ? 
                        -0.0877196f : 
                        0.041107457f)) : 
                0.09156946f) : 
             (Double.isNaN(data[11 /* hcc_11 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (GenModel.bitSetIsInRange(32, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[11])) ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[8])) ? 
                     (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                        -0.022425039f : 
                        0.038267013f) : 
                     (Double.isNaN(data[101]) || data[101 /* SEBORRHEIC KERATOSIS */] <0.5f ? 
                        0.06760982f : 
                        -0.07289474f)) : 
                 (data[92 /* HTN (HYPERTENSION) */] <8.5f ? 
                     (data[123 /* bmi_mean */] <24.26459f ? 
                        0.13218807f : 
                        0.0102951f) : 
                    0.18573171f))));
    return pred;
  } // constant pool size = 240B, number of visited nodes = 27, static init size = 780B
  // {00000000 00010000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000001 00000010 00000000 00000000 10100000 00010000 00000000 01000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0, 16, 0, 0, 0, 0, -128, 64, 0, 0, 5, 8, 0, 2, 16, 0, 0, 0};
  // {01011101 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-70, 0, 0, 0};
  // {01111011 01001111 11111110 10110111 11111101 01011111 01111111 11110101 11111101 00010110 11110101 11010111 11101101 00111111 11110011 01111111 01111111 11110101 10111111 11111011 111110}
  public static final byte[] GRPSPLIT2 = new byte[] {-34, -14, 127, -19, -65, -6, -2, -81, -65, 104, -81, -21, -73, -4, -49, -2, -2, -81, -3, -33, 31};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {10000001 00000000 00000010 01001010 01010100 10101001 00000000 00110000 00110000 10000000 00000000 00001001 10100001 00010000 00001000 01010000 00000000 00110000 00100000 01101000 111110}
  public static final byte[] GRPSPLIT4 = new byte[] {-127, 0, 64, 82, 42, -107, 0, 12, 12, 1, 0, -112, -123, 8, 16, 10, 0, 12, 4, 22, 31};
  // {00000001 00000000 00000000 00001000 00000000 10000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00100000 100000}
  public static final byte[] GRPSPLIT5 = new byte[] {-128, 0, 0, 16, 0, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1};
  // {11111110 01111101 11101111 10101110 10111111 11111111 11111101 11111111 10000110 11011010 00111011 00101110 01011111 11110101 11110111 11101011 11111111 11111110 11101011 11101011 110101}
  public static final byte[] GRPSPLIT6 = new byte[] {127, -66, -9, 117, -3, -1, -65, -1, 97, 91, -36, 116, -6, -81, -17, -41, -1, 127, -41, -41, 43};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_46_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[117]) || data[117 /* HORMONES */] <0.5f ? 
         (data[0 /* age */] <63.5f ? 
             (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[61])) ? 
                 (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <2.5f ? 
                     (Double.isNaN(data[118]) || data[118 /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */] <2.5f ? 
                        -0.008310289f : 
                        -0.057404853f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        0.024234895f : 
                        0.12158261f)) : 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                    -0.115628146f : 
                     (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <1.5f ? 
                        0.07990257f : 
                        -0.08618583f))) : 
             (Double.isNaN(data[0]) || data[0 /* age */] <94.5f ? 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(165, 0, data[2]) || (GenModel.bitSetIsInRange(165, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 165, 0, data[2])) ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <29.08625f ? 
                        0.021499915f : 
                        -7.5552845E-4f) : 
                     (data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.11610086f : 
                        0.06886039f)) : 
                 (!Double.isNaN(data[14 /* hcc_18 */]) && (GenModel.bitSetIsInRange(32, 0, data[14]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[14])) ? 
                    -0.15144819f : 
                     (Double.isNaN(data[94]) || data[94 /* HYPERLIPIDEMIA */] <1.5f ? 
                        -0.0673644f : 
                        0.009664299f)))) : 
         (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
             (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <6.5f ? 
                 (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <8.5f ? 
                     (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <0.5f ? 
                        -0.040358294f : 
                        -0.120409496f) : 
                     (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <2.5f ? 
                        0.09603912f : 
                        -0.12310852f)) : 
                 (!Double.isNaN(data[4 /* binned_race */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                    -0.21650752f : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(158, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 158, 0, data[2])) ? 
                        -0.14354166f : 
                        -0.04948605f))) : 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 166, 0, data[2])) ? 
                 (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[8])) ? 
                     (Double.isNaN(data[61 /* hcc_111 */]) || !GenModel.bitSetIsInRange(32, 0, data[61]) || (GenModel.bitSetIsInRange(32, 0, data[61]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[61])) ? 
                        -0.017519273f : 
                        0.015141045f) : 
                     (Double.isNaN(data[111]) || data[111 /* CARDIOVASCULAR */] <7.5f ? 
                        0.06849281f : 
                        -0.084079675f)) : 
                 (Double.isNaN(data[121]) || data[121 /* SKIN PREPS */] <2.5f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(163, 1, data[2]) || (GenModel.bitSetIsInRange(163, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 163, 1, data[2])) ? 
                        0.08469525f : 
                        0.15057468f) : 
                    -0.05811675f))));
    return pred;
  } // constant pool size = 288B, number of visited nodes = 27, static init size = 1068B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00001010 00000000 00000000 00010000 00000000 00000000 10000110 10000000 00000000 00000000 00010000 00000000 01000000 00000000 00000000 00000100 100000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 80, 0, 0, 8, 0, 0, 97, 1, 0, 0, 8, 0, 2, 0, 0, 32, 1};
  // {11111111 11011111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11110101 11111111 11111110 11111111 11111111 11111101 11111111 11111111 11111111 11111111 011111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -5, -1, -1, -1, -1, -65, -1, -1, -1, -81, -1, 127, -1, -1, -65, -1, -1, -1, -1, 62};
  // {11000010 01000010 00010110 00000000 00000100 00010000 00001100 00101001 10000000 00000000 00010101 10000011 00001000 10100010 10000000 00000011 00100000 00000101 10000000 01001010 01101}
  public static final byte[] GRPSPLIT3 = new byte[] {67, 66, 104, 0, 32, 8, 48, -108, 1, 0, -88, -63, 16, 69, 1, -64, 4, -96, 1, 82, 22};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 0};
  // {01110111 01011101 01101110 10110111 11111111 11101111 01011111 11101111 00110111 00011100 11101011 10110000 10101101 11011000 01111111 01011111 11000111 11111101 11101101 10100011 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-18, -70, 118, -19, -1, -9, -6, -9, -20, 56, -41, 13, -75, 27, -2, -6, -29, -65, -73, -59, 63};
  // {00111111 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-4, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00000000 00000000 10000000 00010000 00000000 00000000 00000000 00000000 00000010 00000001 00000000 10000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 64, -128, 0, 1, 0, 0, 0, 0};
  // {01000010 01000100 00100100 00110010 01010100 00000000 01001000 01101000 00000000 00000100 00000000 10000000 00100000 00000000 00000101 00000000 00000010 00111000 00101100 10000000 000100}
  public static final byte[] GRPSPLIT8 = new byte[] {66, 34, 36, 76, 42, 0, 18, 22, 0, 32, 0, 1, 4, 0, -96, 0, 64, 28, 52, 1, 8};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {2, 0, 0, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0};
  // {...1 0-bits... 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00000000 00000100 01000000 00001001 00000000 00}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 32, 2, -112, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_47_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <0.5f ? 
         (Double.isNaN(data[3]) || data[3 /* packYears */] <47.07422f ? 
             (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <1.5f ? 
                 (Double.isNaN(data[10 /* hcc_10 */]) || !GenModel.bitSetIsInRange(32, 0, data[10]) || (GenModel.bitSetIsInRange(32, 0, data[10]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[10])) ? 
                     (Double.isNaN(data[91]) || data[91 /* GERD (GASTROESOPHAGEAL REFLUX DISEASE) */] <3.5f ? 
                        -0.004994483f : 
                        0.056102812f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 166, 0, data[2])) ? 
                        -0.1639108f : 
                        0.051918797f)) : 
                 (Double.isNaN(data[124]) || data[124 /* bmi_max */] <30.859219f ? 
                     (Double.isNaN(data[98]) || data[98 /* PREDIABETES */] <0.5f ? 
                        8.8895933E-4f : 
                        -0.08926408f) : 
                     (Double.isNaN(data[95]) || data[95 /* HYPOTHYROIDISM */] <1.5f ? 
                        -0.08967964f : 
                        0.030547732f))) : 
             (Double.isNaN(data[83]) || data[83 /* ACTINIC KERATOSIS */] <4.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(157, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 157, 5, data[2])) ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <26.921093f ? 
                        0.042963754f : 
                        -0.13195351f) : 
                     (!Double.isNaN(data[12 /* hcc_12 */]) && (GenModel.bitSetIsInRange(32, 0, data[12]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[12])) ? 
                        -0.027660286f : 
                        0.055311833f)) : 
                -0.15403084f)) : 
         (data[3 /* packYears */] <205.43555f ? 
             (Double.isNaN(data[102]) || data[102 /* TOBACCO SMOKER */] <5.5f ? 
                 (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 156, 5, data[2])) ? 
                     (Double.isNaN(data[109]) || data[109 /* ANTIHYPERGLYCEMICS */] <1.5f ? 
                        -0.024612894f : 
                        -0.13401596f) : 
                     (data[124 /* bmi_max */] <17.326876f ? 
                        -0.14353932f : 
                        0.017421983f)) : 
                 (!Double.isNaN(data[15 /* hcc_19 */]) && (GenModel.bitSetIsInRange(32, 0, data[15]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[15])) ? 
                    -0.13140564f : 
                     (data[117 /* HORMONES */] <7.0f ? 
                        0.09880702f : 
                        -0.06864471f))) : 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(156, 5, data[2]) || (GenModel.bitSetIsInRange(156, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 156, 5, data[2])) ? 
                 (data[123 /* bmi_mean */] <22.54957f ? 
                    0.08562671f : 
                     (Double.isNaN(data[123]) || data[123 /* bmi_mean */] <28.00971f ? 
                        -0.12892918f : 
                        -0.0070611895f)) : 
                 (Double.isNaN(data[113]) || data[113 /* DIURETICS */] <4.5f ? 
                     (data[0 /* age */] <39.0f ? 
                        -0.104319334f : 
                        0.058965962f) : 
                    -0.11388937f))));
    return pred;
  } // constant pool size = 202B, number of visited nodes = 25, static init size = 600B
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {2, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11111100 11111111 11111111 11111111 11111111 01111010 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT1 = new byte[] {-1, -1, -1, -1, -1, -1, -2, -1, -1, -1, 63, -1, -1, -1, -1, 94, -1, -1, -1, -1, 63};
  // {...5 0-bits... 11111111 11111101 11111111 11111111 11101111 11111011 11111100 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11100011 11011110 11111111 11111111 11111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -65, -1, -1, -9, -33, 63, -1, -1, -9, -1, -1, -1, -1, -57, 123, -1, -1, -1, 31};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 11101111 01111101 11111110 11111110 11111111 11111111 11111110 11111111 11101110 11111111 11101110 11111111 11111111 11001011 11110111 11111111 11011111 11111111 1111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-9, -66, 127, 127, -1, -1, 127, -1, 119, -1, 119, -1, -1, -45, -17, -1, -5, -1, -1, 7};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, 0, 0, 0};
  // {...5 0-bits... 11100111 11111111 11111111 10111110 11111111 11111111 11111111 11111101 11111111 11111101 11111110 11111111 11101111 11111101 11111111 01000111 11111111 11111011 1111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-25, -1, -1, 125, -1, -1, -1, -65, -1, -65, 127, -1, -9, -65, -1, -30, -1, -33, -1, 12};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_48_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[104]) || data[104 /* ANESTHETICS */] <0.5f ? 
         (data[0 /* age */] <41.5f ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (data[123 /* bmi_mean */] <42.391083f ? 
                     (Double.isNaN(data[0]) || data[0 /* age */] <37.5f ? 
                        -0.08041229f : 
                        -0.03331291f) : 
                     (Double.isNaN(data[116]) || data[116 /* GASTROINTESTINAL */] <1.5f ? 
                        -0.02020258f : 
                        0.22313315f)) : 
                 (data[124 /* bmi_max */] <21.794727f ? 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <20.83075f ? 
                        0.08968205f : 
                        0.41483647f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(130, 11, data[2]) || (GenModel.bitSetIsInRange(130, 11, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 130, 11, data[2])) ? 
                        -0.018261658f : 
                        0.09696879f))) : 
             (Double.isNaN(data[118]) || data[118 /* MISCELLANEOUS MEDICAL SUPPLIES, DEVICES, NON-DRUG */] <2.5f ? 
                 (Double.isNaN(data[4 /* binned_race */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                     (data[99 /* PRESBYOPIA */] <0.5f ? 
                        0.015965952f : 
                        -0.0026421929f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 166, 0, data[2])) ? 
                        0.029769456f : 
                        0.18313576f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                     (Double.isNaN(data[89]) || data[89 /* DIABETIC FOOT EXAM */] <0.5f ? 
                        -0.054851383f : 
                        0.0196317f) : 
                     (Double.isNaN(data[124]) || data[124 /* bmi_max */] <36.348125f ? 
                        0.13856187f : 
                        0.042501822f)))) : 
         (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT5, 166, 0, data[2])) ? 
             (Double.isNaN(data[86]) || data[86 /* CATARACT. */] <0.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <43.0625f ? 
                     (Double.isNaN(data[11 /* hcc_11 */]) || !GenModel.bitSetIsInRange(32, 0, data[11]) || (GenModel.bitSetIsInRange(32, 0, data[11]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[11])) ? 
                        -0.026048237f : 
                        0.039691206f) : 
                     (Double.isNaN(data[93]) || data[93 /* HX OF MI */] <6.5f ? 
                        0.03445658f : 
                        -0.10143522f)) : 
                 (!Double.isNaN(data[67 /* hcc_134 */]) && (GenModel.bitSetIsInRange(32, 0, data[67]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[67])) ? 
                    -0.15213378f : 
                     (data[126 /* bmi_var */] <13.787953f ? 
                        0.051972274f : 
                        -0.2542002f))) : 
             (data[0 /* age */] <45.5f ? 
                -0.08352361f : 
                 (Double.isNaN(data[104]) || data[104 /* ANESTHETICS */] <5.5f ? 
                     (Double.isNaN(data[95]) || data[95 /* HYPOTHYROIDISM */] <1.5f ? 
                        0.059797306f : 
                        -0.081263795f) : 
                    0.1621141f))));
    return pred;
  } // constant pool size = 227B, number of visited nodes = 26, static init size = 726B
  // {00000000 00010000 00000000 00000000 00001000 00000000 00000010 00000000 00000000 00000001 00000010 00001000 00000000 10100000 00010000 00000000 01000000 00001000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 0, 0, 16, 0, 64, 0, 0, -128, 64, 16, 0, 5, 8, 0, 2, 16, 0, 0, 0};
  // {...11 0-bits... 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000101 00000000 10000000 0000001}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, -96, 0, 1, 64, 0, 0};
  // {01011100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {58, 0, 0, 0};
  // {10000000 00000000 00000000 00001000 00000000 00000000 00100100 00000000 00000000 10100000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00100000 100000}
  public static final byte[] GRPSPLIT3 = new byte[] {1, 0, 0, 16, 0, 0, 36, 0, 0, 5, 16, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1};
  // {00000000 00000000 00000000 00000000 00001000 10011000 10001000 00000011 00010000 00000000 10100001 00000000 10000010 00000100 00000100 00010000 01001000 00000000 00000100 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 16, 25, 17, -64, 8, 0, -123, 0, 65, 32, 32, 8, 18, 0, 32, 0, 0};
  // {01000010 01000100 00000100 00100010 00000010 10000000 01001000 01101100 00000100 00000000 00111000 00001000 00000000 00000000 10000100 00000010 00010010 00001000 11001001 10001010 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {66, 34, 32, 68, 64, 1, 18, 54, 32, 0, 28, 16, 0, 0, 33, 64, 72, 16, -109, 81, 0};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 0, 0, 0};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {1, 0, 0, 0};
}


class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_49_class_0.score0(fdata);
  }
}
class gbm_20db3417_6253_47dd_bb6b_34b10b188d9b_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[90]) || data[90 /* ESSENTIAL HTN */] <0.5f ? 
         (data[103 /* ANALGESICS */] <2.5f ? 
             (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 166, 0, data[2])) ? 
                 (Double.isNaN(data[3]) || data[3 /* packYears */] <8.0859375f ? 
                     (Double.isNaN(data[91]) || data[91 /* GERD (GASTROESOPHAGEAL REFLUX DISEASE) */] <3.5f ? 
                        -0.021932798f : 
                        0.094665945f) : 
                     (data[102 /* TOBACCO SMOKER */] <2.5f ? 
                        -0.003830573f : 
                        0.048589144f)) : 
                 (Double.isNaN(data[88]) || data[88 /* COUGH */] <0.5f ? 
                     (data[0 /* age */] <48.5f ? 
                        -0.06613151f : 
                        0.046002466f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(151, 13, data[2]) && !GenModel.bitSetContains(GRPSPLIT1, 151, 13, data[2])) ? 
                        0.011255633f : 
                        0.14620207f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 166, 0, data[2])) ? 
                 (data[126 /* bmi_var */] <21.879005f ? 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(155, 4, data[2]) && !GenModel.bitSetContains(GRPSPLIT3, 155, 4, data[2])) ? 
                        -0.16937096f : 
                        -0.0743562f) : 
                     (Double.isNaN(data[0]) || data[0 /* age */] <67.5f ? 
                        -0.026685746f : 
                        0.09669783f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(166, 0, data[2]) || (GenModel.bitSetIsInRange(166, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT4, 166, 0, data[2])) ? 
                     (Double.isNaN(data[8 /* hcc_8 */]) || !GenModel.bitSetIsInRange(32, 0, data[8]) || (GenModel.bitSetIsInRange(32, 0, data[8]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[8])) ? 
                        0.007254431f : 
                        0.08062553f) : 
                     (data[125 /* bmi_min */] <32.53172f ? 
                        0.10959329f : 
                        0.04937353f)))) : 
         (data[109 /* ANTIHYPERGLYCEMICS */] <2.0f ? 
             (Double.isNaN(data[0]) || data[0 /* age */] <86.5f ? 
                 (Double.isNaN(data[124]) || data[124 /* bmi_max */] <27.026094f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 1, data[2]) || (GenModel.bitSetIsInRange(162, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 162, 1, data[2])) ? 
                        -0.037386347f : 
                        0.05111557f) : 
                     (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(162, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 162, 1, data[2])) ? 
                        -0.028767008f : 
                        0.019329f)) : 
                 (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 1, data[2]) || (GenModel.bitSetIsInRange(162, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 162, 1, data[2])) ? 
                     (!Double.isNaN(data[52 /* hcc_96 */]) && (GenModel.bitSetIsInRange(32, 0, data[52]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[52])) ? 
                        -0.18770713f : 
                        -0.12112541f) : 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(162, 1, data[2]) || (GenModel.bitSetIsInRange(162, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT10, 162, 1, data[2])) ? 
                        -0.015928552f : 
                        0.14111046f))) : 
             (!Double.isNaN(data[2 /* ethnic_group */]) && (GenModel.bitSetIsInRange(164, 1, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 164, 1, data[2])) ? 
                 (Double.isNaN(data[85]) || data[85 /* CAD OF NATIVE ARTERY */] <1.5f ? 
                     (Double.isNaN(data[107]) || data[107 /* ANTIBIOTICS */] <5.5f ? 
                        -0.06560122f : 
                        -0.19407201f) : 
                    0.098756835f) : 
                 (data[123 /* bmi_mean */] <43.331196f ? 
                     (Double.isNaN(data[2 /* ethnic_group */]) || !GenModel.bitSetIsInRange(160, 5, data[2]) || (GenModel.bitSetIsInRange(160, 5, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 160, 5, data[2])) ? 
                        -0.0071688076f : 
                        0.09769038f) : 
                     (Double.isNaN(data[110]) || data[110 /* CARDIAC DRUGS */] <1.5f ? 
                        -0.058951415f : 
                        -0.19502674f)))));
    return pred;
  } // constant pool size = 370B, number of visited nodes = 30, static init size = 1488B
  // {00000000 00000110 00110010 00000000 00100100 00011110 00011000 00001000 10100100 00000000 00101000 00000011 10001000 00010100 10000001 00110101 01100000 00011001 00100101 00101010 001100}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 96, 76, 0, 36, 120, 24, 16, 37, 0, 20, -64, 17, 40, -127, -84, 6, -104, -92, 84, 12};
  // {...13 0-bits... 10111111 11111111 11111111 11111111 11111100 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01110011 11111101 11111111 11}
  public static final byte[] GRPSPLIT1 = new byte[] {-3, -1, -1, -1, 63, -1, -9, -1, -1, -1, -1, -1, -1, -1, -50, -65, -1, -5, 127};
  // {11110111 11111101 01101111 11111111 11111111 10110101 01000110 11110111 10000000 11110011 01011101 00111101 00001101 11010111 01001011 01001011 10011110 11110111 11111111 10111101 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-17, -65, -10, -1, -1, -83, 98, -17, 1, -49, -70, -68, -80, -21, -46, -46, 121, -17, -1, -67, 63};
  // {...4 0-bits... 11111111 11011110 11111111 11111111 11111111 11111111 11111111 11111001 11111111 10111111 11011111 11110111 11111101 11111100 11111110 11111111 11111111 11111111 1111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, 123, -1, -1, -1, -1, -1, -97, -1, -3, -5, -17, -65, 63, 127, -1, -1, -1, -1, 7};
  // {11010001 11000000 00000000 00000010 00110010 10010001 01000000 01000010 00000000 00000000 00011100 00000100 00000000 10000000 00001000 00000000 00011000 00100000 00000000 10000000 010000}
  public static final byte[] GRPSPLIT4 = new byte[] {-117, 3, 0, 64, 76, -119, 2, 66, 0, 0, 56, 32, 0, 1, 16, 0, 24, 4, 0, 1, 2};
  // {01000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 0};
  // {...1 0-bits... 11111111 00011111 11011111 11011111 11111111 11101111 11101111 11111111 11111111 11111110 11111011 11111101 11111111 11111110 10111110 11110111 11000111 11111111 11110111 11110111 1}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -8, -5, -5, -1, -9, -9, -1, -1, 127, -33, -65, -1, 127, 125, -17, -29, -1, -17, -17, 3};
  // {...1 0-bits... 01111111 11110111 11111101 11101011 11111010 10001111 10111111 11011110 11110111 00100101 01100111 11111111 11011011 11110001 10101111 11010011 01111111 11111011 11011111 11011111 1}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, -17, -65, -41, 95, -15, -3, 123, -17, -92, -26, -1, -37, -113, -11, -53, -2, -33, -5, -5, 3};
  // {...1 0-bits... 11111111 10111011 10111111 11111111 11011110 11111111 11111111 11111111 11111111 11111111 11101001 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111110 1}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -35, -3, -1, 123, -1, -1, -1, -1, -1, -105, -1, -33, -1, -1, -1, -1, -1, -1, 127, 3};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {1, 0, 0, 0};
  // {...1 0-bits... 00000000 00101000 00000000 00000100 00000000 00010000 01001000 01010110 00000000 00001001 01000000 00000000 00000000 00000000 00000000 00000101 00000000 00000000 00000000 00000000 0}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 20, 0, 32, 0, 8, 18, 106, 0, -112, 2, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0};
  // {...1 0-bits... 11111101 11011111 11011101 11111111 11111011 11111110 11110111 11101111 11001111 00101111 11010111 11101111 11111111 11111101 11111111 11111100 11111111 11101111 10010111 11110111 111}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, -5, -69, -1, -33, 127, -17, -9, -13, -12, -21, -9, -1, -65, -1, 63, -1, -9, -23, -17, 15};
  // {...5 0-bits... 01111111 11111111 11111111 10111100 11111111 10011111 10111101 10111111 11101111 11111111 11111111 11111111 11011111 11111111 11111011 10111110 11111111 11011111 11111110 111}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, -1, -1, 61, -1, -7, -67, -3, -9, -1, -1, -1, -5, -1, -33, 125, -1, -5, 127, -9};
}


